{
    "docs": [
        {
            "location": "/",
            "text": "Introdu\u00e7\u00e3o ao Framework Angular\n\u00b6\n\n\n\n\nAcessar slides do curso\n\n\nAgenda\n\u00b6\n\n\n\n\n\n\nIntrodu\u00e7\u00e3o\n\n\n\n\nApresenta\u00e7\u00f5es\n\n\nHor\u00e1rios\n\n\nForma do curso\n\n\n\n\n\n\n\n\nVis\u00e3o geral\n\n\n\n\narquiteturas web tradicionais\n\n\narquiteturas web modernas\n\n\nangular\n\n\n\n\n\n\n\n\nInstala\u00e7\u00e3o\n\n\n\n\npr\u00e9-requisitos\n\n\na anatomia de uma aplica\u00e7\u00e3o angular\n\n\nsuporte aos navegadores\n\n\n\n\n\n\n\n\nArquitetura:\n\n\n\n\nvis\u00e3o geral\n\n\nm\u00f3dulos\n\n\ncomponentes e diretivas\n\n\ntemplates\n\n\nservi\u00e7os\n\n\nmetadata (annotation)\n\n\ndata binding\n\n\ninje\u00e7\u00e3o de depend\u00eancias\n\n\n\n\n\n\n\n\nThe tour of heroes\n\n\n\n\nintrodu\u00e7\u00e3o\n\n\no editor de her\u00f3is\n\n\no padr\u00e3o mestre/detalhe\n\n\ncomponentes\n\n\nservi\u00e7os\n\n\nnavega\u00e7\u00e3o\n\n\nhttp\n\n\n\n\n\n\n\n\nAprofundando os conceitos\n\n\n\n\ntemplates\n\n\nlifecycle hooks\n\n\nintera\u00e7\u00e3o entre componentes\n\n\ndiretivas estruturais\n\n\ndiretivas de atributo\n\n\npipes\n\n\nroteamento e navega\u00e7\u00e3o\n\n\ncliente http\n\n\nseguran\u00e7a\n\n\n\n\n\n\n\n\nPublica\u00e7\u00e3o\n\n\n\n\nvis\u00e3o geral\n\n\na publica\u00e7\u00e3o mais simples poss\u00edvel\n\n\notimiza\u00e7\u00e3o para ambientes produtivos\n\n\nconfigura\u00e7\u00e3o no lado cliente\n\n\nconfigura\u00e7\u00e3o no lado servidor\n\n\n\n\n\n\n\n\nT\u00f3picos complementares",
            "title": "Home"
        },
        {
            "location": "/#introducao-ao-framework-angular",
            "text": "Acessar slides do curso",
            "title": "Introdu\u00e7\u00e3o ao Framework Angular"
        },
        {
            "location": "/#agenda",
            "text": "Introdu\u00e7\u00e3o   Apresenta\u00e7\u00f5es  Hor\u00e1rios  Forma do curso     Vis\u00e3o geral   arquiteturas web tradicionais  arquiteturas web modernas  angular     Instala\u00e7\u00e3o   pr\u00e9-requisitos  a anatomia de uma aplica\u00e7\u00e3o angular  suporte aos navegadores     Arquitetura:   vis\u00e3o geral  m\u00f3dulos  componentes e diretivas  templates  servi\u00e7os  metadata (annotation)  data binding  inje\u00e7\u00e3o de depend\u00eancias     The tour of heroes   introdu\u00e7\u00e3o  o editor de her\u00f3is  o padr\u00e3o mestre/detalhe  componentes  servi\u00e7os  navega\u00e7\u00e3o  http     Aprofundando os conceitos   templates  lifecycle hooks  intera\u00e7\u00e3o entre componentes  diretivas estruturais  diretivas de atributo  pipes  roteamento e navega\u00e7\u00e3o  cliente http  seguran\u00e7a     Publica\u00e7\u00e3o   vis\u00e3o geral  a publica\u00e7\u00e3o mais simples poss\u00edvel  otimiza\u00e7\u00e3o para ambientes produtivos  configura\u00e7\u00e3o no lado cliente  configura\u00e7\u00e3o no lado servidor     T\u00f3picos complementares",
            "title": "Agenda"
        },
        {
            "location": "/exercicios/exercicio-01/",
            "text": "Exerc\u00edcio 01\n\u00b6\n\n\nObjetivo\n\u00b6\n\n\n\n\nInstalar NVM, Node.js e NPM\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n15 minutos\n\n\n\n\n\n\nATEN\u00c7\u00c3O! Antes de come\u00e7ar:\n\n\nVerifique se j\u00e1 existe um \nnode\n instalado no seu ambiente com o comando: \nwhich node\n. Se j\u00e1 existir um node e o caminho for algo como \n/bin/bash\n, voc\u00ea precisar\u00e1 \nDESINSTALAR\n o node atual. Para remover o node do ubuntu, fa\u00e7a: \nsudo apt-get purge --auto-remove nodejs npm\n.\n\n\n\n\n\n\nNVM\n\u00b6\n\n\nPara instalar (ou atualizar) o NVM, voc\u00ea deve executar o script de instala\u00e7\u00e3o, usando cURL:\n\n\n1\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh \n|\n bash\n\n\n\n\n\n\nOu com wget:\n\n\n1\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh \n|\n bash\n\n\n\n\n\n\nDepois de rodar o script de instala\u00e7\u00e3o, execute o comando abaixo para verificar a instala\u00e7\u00e3o:\n\n\n1\n2\n3\n4\nnvm --version\n\n\n# resultado esperado:\n\n\n0\n.33.11\n\n\n\n\n\n\nSe voc\u00ea n\u00e3o tiver nenhuma resposta, ou se aparecer o erro:\n\n\n1\nnvm: \ncommand\n not found\n\n\n\n\n\n\nFeche e abra novamente seu terminal e tente verificar novamente.\n\n\nNode.js e NPM\n\u00b6\n\n\nPara instalar o Node.js \nLTS\n (\nLong Term Support\n), execute o comando:\n\n\n1\nnvm install --lts\n\n\n\n\n\n\nEsse comando ir\u00e1 instalar a \u00faltima vers\u00e3o LTS do Node.js e tamb\u00e9m vai instalar o NPM.\n\n\nPara confirmar a instala\u00e7\u00e3o do Node.js, execute:\n\n\n1\nnode --version\n\n\n\n\n\n\nO resultado esperado \u00e9:\n\n\n1\nv8.11.3\n\n\n\n\n\n\n\n\nDICA: nvm\n\n\nSe voc\u00ea j\u00e1 tem uma vers\u00e3o de node instalada (ex. v6.x.y) e quer atualizar para a v8,\nexecute: \nnvm install 8 --reinstall-packages-from=6\n. Assim, todos os pacotes \nglobais\n ser\u00e3o reinstalados tamb\u00e9m na nova vers\u00e3o.\n\n\n\n\nPara confirmar a instala\u00e7\u00e3o do NPM, execute:\n\n\n1\n2\n3\n4\nnpm --version\n\n\n# o resultado esperado \u00e9:\n\n\n5\n.6.0\n\n\n\n\n\n\nVisual Studio Code\n\u00b6\n\n\nPara instalar o VS Code, baixe a vers\u00e3o apropriada (.deb ou .rpm) de acordo com a sua distribui\u00e7\u00e3o Linux no endere\u00e7o: \nhttps://code.visualstudio.com/\n\n\nPlugins\n\u00b6\n\n\nAdicionalmente, instale os seguintes plugins recomendados:\n\n\n\n\next install Angular.ng-template\n | Ref.: \nAngular Language Service\n\n\next install pavellev.Angular2\n | Ref.: \nAngular v5 Snippets\n\n\next install msjsdiag.debugger-for-chrome\n | Ref.: \nDebugger for Chrome\n\n\next install EditorConfig.EditorConfig\n | Ref.: \nEditorConfig for VS Code\n\n\next install rbbit.typescript-hero\n | Ref.: \nTypeScript Hero\n\n\nTerminal\n N\u00e3o precisa mais. J\u00e1 vem por padr\u00e3o no vscode.\n\n\n\n\nRefer\u00eancias\n\u00b6\n\n\n\n\nNVM (\nNode Version Manager\n): \nhttps://github.com/creationix/nvm\n\n\nNode Release Schedule: \nhttps://github.com/nodejs/Release#lts_schedule\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 02",
            "title": "01 - Instala\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-01/#exercicio-01",
            "text": "",
            "title": "Exerc\u00edcio 01"
        },
        {
            "location": "/exercicios/exercicio-01/#objetivo",
            "text": "Instalar NVM, Node.js e NPM",
            "title": "Objetivo"
        },
        {
            "location": "/exercicios/exercicio-01/#duracao",
            "text": "15 minutos    ATEN\u00c7\u00c3O! Antes de come\u00e7ar:  Verifique se j\u00e1 existe um  node  instalado no seu ambiente com o comando:  which node . Se j\u00e1 existir um node e o caminho for algo como  /bin/bash , voc\u00ea precisar\u00e1  DESINSTALAR  o node atual. Para remover o node do ubuntu, fa\u00e7a:  sudo apt-get purge --auto-remove nodejs npm .",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-01/#nvm",
            "text": "Para instalar (ou atualizar) o NVM, voc\u00ea deve executar o script de instala\u00e7\u00e3o, usando cURL:  1 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh  |  bash   Ou com wget:  1 wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh  |  bash   Depois de rodar o script de instala\u00e7\u00e3o, execute o comando abaixo para verificar a instala\u00e7\u00e3o:  1\n2\n3\n4 nvm --version # resultado esperado:  0 .33.11   Se voc\u00ea n\u00e3o tiver nenhuma resposta, ou se aparecer o erro:  1 nvm:  command  not found   Feche e abra novamente seu terminal e tente verificar novamente.",
            "title": "NVM"
        },
        {
            "location": "/exercicios/exercicio-01/#nodejs-e-npm",
            "text": "Para instalar o Node.js  LTS  ( Long Term Support ), execute o comando:  1 nvm install --lts   Esse comando ir\u00e1 instalar a \u00faltima vers\u00e3o LTS do Node.js e tamb\u00e9m vai instalar o NPM.  Para confirmar a instala\u00e7\u00e3o do Node.js, execute:  1 node --version   O resultado esperado \u00e9:  1 v8.11.3    DICA: nvm  Se voc\u00ea j\u00e1 tem uma vers\u00e3o de node instalada (ex. v6.x.y) e quer atualizar para a v8, execute:  nvm install 8 --reinstall-packages-from=6 . Assim, todos os pacotes  globais  ser\u00e3o reinstalados tamb\u00e9m na nova vers\u00e3o.   Para confirmar a instala\u00e7\u00e3o do NPM, execute:  1\n2\n3\n4 npm --version # o resultado esperado \u00e9:  5 .6.0",
            "title": "Node.js e NPM"
        },
        {
            "location": "/exercicios/exercicio-01/#visual-studio-code",
            "text": "Para instalar o VS Code, baixe a vers\u00e3o apropriada (.deb ou .rpm) de acordo com a sua distribui\u00e7\u00e3o Linux no endere\u00e7o:  https://code.visualstudio.com/",
            "title": "Visual Studio Code"
        },
        {
            "location": "/exercicios/exercicio-01/#plugins",
            "text": "Adicionalmente, instale os seguintes plugins recomendados:   ext install Angular.ng-template  | Ref.:  Angular Language Service  ext install pavellev.Angular2  | Ref.:  Angular v5 Snippets  ext install msjsdiag.debugger-for-chrome  | Ref.:  Debugger for Chrome  ext install EditorConfig.EditorConfig  | Ref.:  EditorConfig for VS Code  ext install rbbit.typescript-hero  | Ref.:  TypeScript Hero  Terminal  N\u00e3o precisa mais. J\u00e1 vem por padr\u00e3o no vscode.",
            "title": "Plugins"
        },
        {
            "location": "/exercicios/exercicio-01/#referencias",
            "text": "NVM ( Node Version Manager ):  https://github.com/creationix/nvm  Node Release Schedule:  https://github.com/nodejs/Release#lts_schedule",
            "title": "Refer\u00eancias"
        },
        {
            "location": "/exercicios/exercicio-01/#proximo-passo",
            "text": "Exerc\u00edcio 02",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-02/",
            "text": "Exerc\u00edcio 02\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nInstalar o Angular CLI\n\n\nCriar a primeira aplica\u00e7\u00e3o Angular\n\n\nExecutar a aplica\u00e7\u00e3o\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n15 minutos\n\n\nInstalando o Angular CLI\n\u00b6\n\n\nPara instalar o Angular CLI, execute:\n\n\n1\nnpm install -g @angular/cli\n\n\n\n\n\n\nPara verificar a instala\u00e7\u00e3o, execute:\n\n\n1\nng version\n\n\n\n\n\n\nO resultado esperado \u00e9:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n     _                      _                 ____ _     ___\n    / \n\\ \n  _ __   __ _ _   _\n|\n \n|\n __ _ _ __     / ___\n|\n \n|\n   \n|\n_ _\n|\n\n   / \u25b3 \n\\ \n|\n \n'_ \\ / _` | | | | |/ _` | '\n__\n|\n   \n|\n \n|\n   \n|\n \n|\n    \n|\n \n|\n\n  / ___ \n\\|\n \n|\n \n|\n \n|\n \n(\n_\n|\n \n|\n \n|\n_\n|\n \n|\n \n|\n \n(\n_\n|\n \n|\n \n|\n      \n|\n \n|\n___\n|\n \n|\n___ \n|\n \n|\n\n /_/   \n\\_\\_\n|\n \n|\n_\n|\n\\_\n_, \n|\n\\_\n_,_\n|\n_\n|\n\\_\n_,_\n|\n_\n|\n       \n\\_\n___\n|\n_____\n|\n___\n|\n\n                \n|\n___/\n\n\nAngular CLI: \n6\n.0.8\nNode: \n8\n.11.3\nOS: linux x64\nAngular: \n... \n\nPackage                      Version\n------------------------------------------------------\n@angular-devkit/architect    \n0\n.6.8\n@angular-devkit/core         \n0\n.6.8\n@angular-devkit/schematics   \n0\n.6.8\n@schematics/angular          \n0\n.6.8\n@schematics/update           \n0\n.6.8\nrxjs                         \n6\n.2.1\ntypescript                   \n2\n.7.2\n\n\n\n\n\n\nPara mais informa\u00e7\u00f5es sobre todos os comandos dispon\u00edveis do Angular CLI, execute:\n\n\n1\nng \nhelp\n\n\n\n\n\n\n\nSe voc\u00ea quiser saber mais sobre um comando espec\u00edfico, execute \nng [command name] --help\n. Por exemplo:\n\n\n1\nng generate --help\n\n\n\n\n\n\nCriando a primeira aplica\u00e7\u00e3o Angular\n\u00b6\n\n\nPara criar a primeira aplica\u00e7\u00e3o Angular, execute:\n\n\n1\nng new app-exemplo\n\n\n\n\n\n\nEsse comando ir\u00e1 criar a aplica\u00e7\u00e3o \"app-exemplo\" numa pasta com mesmo nome, e instalar as depend\u00eancias necess\u00e1rias.\n\n\n\n\nNome do projeto\n\n\nO \"app-exemplo\" \u00e9 apenas uma sugest\u00e3o. O nome escolhido aqui deve ser o mesmo at\u00e9 o exerc\u00edcio 08.\n\n\n\n\nO resultado esperado \u00e9 algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nCREATE app-exemplo/README.md \n(\n1027\n bytes\n)\n\nCREATE app-exemplo/angular.json \n(\n3593\n bytes\n)\n\nCREATE app-exemplo/package.json \n(\n1315\n bytes\n)\n\nCREATE app-exemplo/tsconfig.json \n(\n384\n bytes\n)\n\nCREATE app-exemplo/tslint.json \n(\n2805\n bytes\n)\n\nCREATE app-exemplo/.editorconfig \n(\n245\n bytes\n)\n\nCREATE app-exemplo/.gitignore \n(\n503\n bytes\n)\n\nCREATE app-exemplo/src/environments/environment.prod.ts \n(\n51\n bytes\n)\n\nCREATE app-exemplo/src/environments/environment.ts \n(\n631\n bytes\n)\n\nCREATE app-exemplo/src/favicon.ico \n(\n5430\n bytes\n)\n\nCREATE app-exemplo/src/index.html \n(\n297\n bytes\n)\n\nCREATE app-exemplo/src/main.ts \n(\n370\n bytes\n)\n\nCREATE app-exemplo/src/polyfills.ts \n(\n3194\n bytes\n)\n\nCREATE app-exemplo/src/test.ts \n(\n642\n bytes\n)\n\nCREATE app-exemplo/src/assets/.gitkeep \n(\n0\n bytes\n)\n\nCREATE app-exemplo/src/styles.css \n(\n80\n bytes\n)\n\nCREATE app-exemplo/src/browserslist \n(\n375\n bytes\n)\n\nCREATE app-exemplo/src/karma.conf.js \n(\n964\n bytes\n)\n\nCREATE app-exemplo/src/tsconfig.app.json \n(\n194\n bytes\n)\n\nCREATE app-exemplo/src/tsconfig.spec.json \n(\n282\n bytes\n)\n\nCREATE app-exemplo/src/tslint.json \n(\n314\n bytes\n)\n\nCREATE app-exemplo/src/app/app.module.ts \n(\n314\n bytes\n)\n\nCREATE app-exemplo/src/app/app.component.css \n(\n0\n bytes\n)\n\nCREATE app-exemplo/src/app/app.component.html \n(\n1141\n bytes\n)\n\nCREATE app-exemplo/src/app/app.component.spec.ts \n(\n994\n bytes\n)\n\nCREATE app-exemplo/src/app/app.component.ts \n(\n207\n bytes\n)\n\nCREATE app-exemplo/e2e/protractor.conf.js \n(\n752\n bytes\n)\n\nCREATE app-exemplo/e2e/src/app.e2e-spec.ts \n(\n307\n bytes\n)\n\nCREATE app-exemplo/e2e/src/app.po.ts \n(\n208\n bytes\n)\n\nCREATE app-exemplo/e2e/tsconfig.e2e.json \n(\n213\n bytes\n)\n\n\n\n\n\n\n\nExecutando a aplica\u00e7\u00e3o\n\u00b6\n\n\nPara executar a aplica\u00e7\u00e3o, execute os comandos:\n\n\n1\n2\ncd\n app-exemplo\nng serve --open\n\n\n\n\n\n\nO comando \nng serve\n executa um servidor Web local e \"observa\" os arquivos da sua aplica\u00e7\u00e3o, reconstruindo-a sempre que um arquivo \u00e9 modificado (\nhot-reload\n). \n\n\nA flag \n--open\n vai abrir automaticamente um browser no endere\u00e7o: \nhttp://localhost:4200/\n.\n\n\nVoc\u00ea dever\u00e1 ver algo como:\n\n\n\n\nModifique o arquivo \nsrc/app/app.component.ts\n:\n\n\n1\n2\n3\nexport\n \nclass\n \nAppComponent\n \n{\n\n    \ntitle\n \n=\n \n'My First Angular App'\n;\n\n\n}\n\n\n\n\n\n\n\nAbra o arquivo \nsrc/app/app.component.css\n e inclua a seguinte regra de estilo CSS:\n\n\n1\n2\n3\n4\n5\nh1\n \n{\n\n  \ncolor\n:\n \n#369\n;\n\n  \nfont-family\n:\n \nArial\n,\n \nHelvetica\n,\n \nsans-serif\n;\n\n  \nfont-size\n:\n \n250\n%\n;\n\n\n}\n\n\n\n\n\n\n\nO resultado esperado \u00e9:\n\n\n\n\nRefer\u00eancias\n\u00b6\n\n\n\n\nAngular CLI: \nhttps://cli.angular.io/\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 03",
            "title": "02 - Primeira Aplica\u00e7\u00e3o Angular"
        },
        {
            "location": "/exercicios/exercicio-02/#exercicio-02",
            "text": "",
            "title": "Exerc\u00edcio 02"
        },
        {
            "location": "/exercicios/exercicio-02/#objetivos",
            "text": "Instalar o Angular CLI  Criar a primeira aplica\u00e7\u00e3o Angular  Executar a aplica\u00e7\u00e3o",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-02/#duracao",
            "text": "15 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-02/#instalando-o-angular-cli",
            "text": "Para instalar o Angular CLI, execute:  1 npm install -g @angular/cli   Para verificar a instala\u00e7\u00e3o, execute:  1 ng version   O resultado esperado \u00e9:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23      _                      _                 ____ _     ___\n    /  \\    _ __   __ _ _   _ |   |  __ _ _ __     / ___ |   |     | _ _ | \n   / \u25b3  \\  |   '_ \\ / _` | | | | |/ _` | ' __ |     |   |     |   |      |   | \n  / ___  \\|   |   |   |   ( _ |   |   | _ |   |   |   ( _ |   |   |        |   | ___ |   | ___  |   | \n /_/    \\_\\_ |   | _ | \\_ _,  | \\_ _,_ | _ | \\_ _,_ | _ |         \\_ ___ | _____ | ___ | \n                 | ___/\n\n\nAngular CLI:  6 .0.8\nNode:  8 .11.3\nOS: linux x64\nAngular: \n... \n\nPackage                      Version\n------------------------------------------------------\n@angular-devkit/architect     0 .6.8\n@angular-devkit/core          0 .6.8\n@angular-devkit/schematics    0 .6.8\n@schematics/angular           0 .6.8\n@schematics/update            0 .6.8\nrxjs                          6 .2.1\ntypescript                    2 .7.2   Para mais informa\u00e7\u00f5es sobre todos os comandos dispon\u00edveis do Angular CLI, execute:  1 ng  help    Se voc\u00ea quiser saber mais sobre um comando espec\u00edfico, execute  ng [command name] --help . Por exemplo:  1 ng generate --help",
            "title": "Instalando o Angular CLI"
        },
        {
            "location": "/exercicios/exercicio-02/#criando-a-primeira-aplicacao-angular",
            "text": "Para criar a primeira aplica\u00e7\u00e3o Angular, execute:  1 ng new app-exemplo   Esse comando ir\u00e1 criar a aplica\u00e7\u00e3o \"app-exemplo\" numa pasta com mesmo nome, e instalar as depend\u00eancias necess\u00e1rias.   Nome do projeto  O \"app-exemplo\" \u00e9 apenas uma sugest\u00e3o. O nome escolhido aqui deve ser o mesmo at\u00e9 o exerc\u00edcio 08.   O resultado esperado \u00e9 algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 CREATE app-exemplo/README.md  ( 1027  bytes ) \nCREATE app-exemplo/angular.json  ( 3593  bytes ) \nCREATE app-exemplo/package.json  ( 1315  bytes ) \nCREATE app-exemplo/tsconfig.json  ( 384  bytes ) \nCREATE app-exemplo/tslint.json  ( 2805  bytes ) \nCREATE app-exemplo/.editorconfig  ( 245  bytes ) \nCREATE app-exemplo/.gitignore  ( 503  bytes ) \nCREATE app-exemplo/src/environments/environment.prod.ts  ( 51  bytes ) \nCREATE app-exemplo/src/environments/environment.ts  ( 631  bytes ) \nCREATE app-exemplo/src/favicon.ico  ( 5430  bytes ) \nCREATE app-exemplo/src/index.html  ( 297  bytes ) \nCREATE app-exemplo/src/main.ts  ( 370  bytes ) \nCREATE app-exemplo/src/polyfills.ts  ( 3194  bytes ) \nCREATE app-exemplo/src/test.ts  ( 642  bytes ) \nCREATE app-exemplo/src/assets/.gitkeep  ( 0  bytes ) \nCREATE app-exemplo/src/styles.css  ( 80  bytes ) \nCREATE app-exemplo/src/browserslist  ( 375  bytes ) \nCREATE app-exemplo/src/karma.conf.js  ( 964  bytes ) \nCREATE app-exemplo/src/tsconfig.app.json  ( 194  bytes ) \nCREATE app-exemplo/src/tsconfig.spec.json  ( 282  bytes ) \nCREATE app-exemplo/src/tslint.json  ( 314  bytes ) \nCREATE app-exemplo/src/app/app.module.ts  ( 314  bytes ) \nCREATE app-exemplo/src/app/app.component.css  ( 0  bytes ) \nCREATE app-exemplo/src/app/app.component.html  ( 1141  bytes ) \nCREATE app-exemplo/src/app/app.component.spec.ts  ( 994  bytes ) \nCREATE app-exemplo/src/app/app.component.ts  ( 207  bytes ) \nCREATE app-exemplo/e2e/protractor.conf.js  ( 752  bytes ) \nCREATE app-exemplo/e2e/src/app.e2e-spec.ts  ( 307  bytes ) \nCREATE app-exemplo/e2e/src/app.po.ts  ( 208  bytes ) \nCREATE app-exemplo/e2e/tsconfig.e2e.json  ( 213  bytes )",
            "title": "Criando a primeira aplica\u00e7\u00e3o Angular"
        },
        {
            "location": "/exercicios/exercicio-02/#executando-a-aplicacao",
            "text": "Para executar a aplica\u00e7\u00e3o, execute os comandos:  1\n2 cd  app-exemplo\nng serve --open   O comando  ng serve  executa um servidor Web local e \"observa\" os arquivos da sua aplica\u00e7\u00e3o, reconstruindo-a sempre que um arquivo \u00e9 modificado ( hot-reload ).   A flag  --open  vai abrir automaticamente um browser no endere\u00e7o:  http://localhost:4200/ .  Voc\u00ea dever\u00e1 ver algo como:   Modifique o arquivo  src/app/app.component.ts :  1\n2\n3 export   class   AppComponent   { \n     title   =   'My First Angular App' ;  }    Abra o arquivo  src/app/app.component.css  e inclua a seguinte regra de estilo CSS:  1\n2\n3\n4\n5 h1   { \n   color :   #369 ; \n   font-family :   Arial ,   Helvetica ,   sans-serif ; \n   font-size :   250 % ;  }    O resultado esperado \u00e9:",
            "title": "Executando a aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-02/#referencias",
            "text": "Angular CLI:  https://cli.angular.io/",
            "title": "Refer\u00eancias"
        },
        {
            "location": "/exercicios/exercicio-02/#proximo-passo",
            "text": "Exerc\u00edcio 03",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-03/",
            "text": "Exerc\u00edcio 03\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nEvoluir nossa aplica\u00e7\u00e3o para fazer a aplica\u00e7\u00e3o exemplo do Angular \nTour Of Heroes\n\n\nExibir os detalhes de um her\u00f3i\n\n\nCriar um formul\u00e1rio de edi\u00e7\u00e3o de um her\u00f3i\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n30 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 2. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-02-helloworld/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nExibindo os detalhes de um her\u00f3i\n\u00b6\n\n\nAbra o arquivo \napp.component.ts\n e adicione duas novas propriedades:\n\n\n\n\ntitle\n: o nome da aplica\u00e7\u00e3o;\n\n\nhero\n: o her\u00f3i \u201cHulk\u201d;\n\n\n\n\nA classe \nAppComponent\n deve ficar como abaixo:\n\n\n1\n2\n3\n4\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n  \nhero\n \n=\n \n'Hulk'\n;\n\n\n}\n\n\n\n\n\n\n\nEm seguida substitua todo o conte\u00fado do arquivo de  template descrito no \ntemplateUrl\n do decorador \n@Component\n do \nAppComponent\n pelo conte\u00fado abaixo:\n\n\n1\n2\n<\nh1\n>\n{{title}}\n</\nh1\n>\n\n\n<\nh2\n>\n{{hero}} details!\n</\nh2\n>\n\n\n\n\n\n\n\nO navegador deve recarregar a aplica\u00e7\u00e3o e mostrar o \nt\u00edtulo\n e o \nnome do her\u00f3i\n.\n\n\nAs chaves duplas \n{{}}\n \u00e9 a sintaxe para a \ninterpola\u00e7\u00e3o\n do Angular. A interpola\u00e7\u00e3o apresenta as propriedades \ntitle\n e \nhero\n do componente \nAppComponent\n como strings no HTML.\n\n\nA classe Hero\n\u00b6\n\n\nO her\u00f3i precisa de mais propriedades. Converta a propriedade \nhero\n de uma string para uma classe.\n\n\nCrie a classe \nHero\n com as propriedades \nid\n e \nname\n no arquivo \napp.component.ts\n, logo ap\u00f3s os import:\n\n\n1\n2\n3\n4\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n:\n \nnumber\n;\n\n  \nname\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\n\nNa classe \nAppComponent\n, refatore a propriedade \nhero\n para o tipo \nHero\n, e inicialize o \nid\n e o \nname\n:\n\n\n1\n2\n3\n4\nhero\n:\n \nHero\n \n=\n \n{\n\n  \nid\n:\n \n1\n,\n\n  \nname\n:\n \n'Hulk'\n\n\n};\n\n\n\n\n\n\n\nAtualize, agora, o template para mostrar as propriedades \nid\n e \nname\n:\n\n\n1\n2\n3\n4\n<\nh1\n>\n{{title}}\n</\nh1\n>\n\n\n<\nh2\n>\n{{hero.name}} details!\n</\nh2\n>\n\n\n<\ndiv\n>\nid: {{hero.id}}\n</\ndiv\n>\n\n\n<\ndiv\n>\nnome: {{hero.name}}\n</\ndiv\n>\n\n\n\n\n\n\n\nO navegador deve recarregar a aplica\u00e7\u00e3o e continuar mostrando o nome do her\u00f3i.\n\n\n\n\nTemplates com m\u00faltiplas linhas\n\n\nNo curos original, \u00e9 apresentado o uso da propriedade \ntemplate\n do decorator (ao inv\u00e9s da \ntemplateUrl\n).\nPor\u00e9m, na pr\u00e1tica n\u00e3o utilizamos esta abordagem pois pode dificultar a manuten\u00e7\u00e3o do c\u00f3digo.\nSe voc\u00ea leu isso e o tutor(a) n\u00e3o explicou ainda, pe\u00e7a para que explique!\n\n\n\n\nEditando o nome do her\u00f3i\n\u00b6\n\n\nPara editar o nome do her\u00f3i, vamos usar um \n<input>\n. A caixa de texto deve tanto \nexibir\n a propriedade \nname\n do her\u00f3i, quanto \natualizar\n o valor dessa propriedade na medida em que o usu\u00e1rio modifica seu valor.\n\n\nIsto \u00e9, precisamos de um \ntwo-way binding\n entre o elemento \n<input>\n e a propriedade \nhero.name\n.\n\n\n\n\nAcessibilidade: Labels\n\n\nSempre que poss\u00edvel, use elementos de \nlabel\n para associar e descrever um campo de formul\u00e1rio.\nO atributo \nfor\n do label \ndeve\n existir e ser igual ao \nid\n do campo em quest\u00e3o.\nRefer\u00eancia: \nT\u00e9cnica H44 do WCAG 2.0\n\n\n\n\nTwo-way binding\n\u00b6\n\n\nRefatore o nome do her\u00f3i no template para ficar como abaixo:\n\n\n1\n2\n3\n4\n<\ndiv\n>\n\n  \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n  \n<\ninput\n \nid\n=\n\"hero-name\"\n \n[(\nngModel\n)]=\"\nhero\n.\nname\n\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nO \n[(ngModel)]\n \u00e9 a sintaxe Angular para o \ntwo-way binding\n entre o elemento \n<input>\n e a propriedade \nhero.name\n. Os dados fluem nas duas dire\u00e7\u00f5es: a partir da propriedade para a caixa de texto, e da caixa de texto para a propriedade.\n\n\nLogo ap\u00f3s essa altera\u00e7\u00e3o, a aplica\u00e7\u00e3o quebra. Se voc\u00ea olhar o console do navegador, voc\u00ea ver\u00e1 algo como:\n\n\n1\nngModel ... isn't a known property of input.\n\n\n\n\n\n\nApesar do \nngModel\n ser uma diretiva v\u00e1lida do Angular, ela n\u00e3o est\u00e1 dispon\u00edvel por default. Ela pertence ao m\u00f3dulo opcional \nFormsModule\n.\n\n\nImportando o FormsModule\n\u00b6\n\n\nAbra o arquivo \napp.module.ts\n e importe o m\u00f3dulo \nFormsModule\n da biblioteca \n@angular/forms\n.\n\n\nPara fazer isso, adicione o \nFormsModule\n no array \nimports\n do \n@NgModule\n. Esse array cont\u00e9m a lista de todos os m\u00f3dulos Angular externos que a aplica\u00e7\u00e3o usa.\n\n\nO \nAppModule\n deve ficar como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n \n// Passo 1) Importe o FormsModule (javascript) \n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\n\n@\nNgModule\n({\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nFormsModule\n \n// Passo 2) Importe o FormsModule (angular)\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nQuando o navegador atualizar, a aplica\u00e7\u00e3o deve voltar a funcionar. Voc\u00ea pode editar o nome do her\u00f3i e ver as mudan\u00e7as refletirem imediatamente no \n<h2>\n da p\u00e1gina.\n\n\nResumo\n\u00b6\n\n\nO que aprendemos:\n\n\n\n\nOne-way Data Binding para a interpola\u00e7\u00e3o de dados (\n{{}}\n)\n\n\nTwo-way data Binding para a edi\u00e7\u00e3o de dados (\n[(ngModel)]\n)\n\n\nTemplate com m\u00faltiplas linhas\n ( ` )\n\n\n\n\nVeja como deve estar o conte\u00fado do arquivo \napp.component.ts\n nesse momento:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n:\n \nnumber\n;\n\n  \nname\n:\n \nstring\n;\n\n\n}\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-root'\n,\n\n  \ntemplateUrl\n:\n \n'./app.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./app.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n  \nhero\n:\n \nHero\n \n=\n \n{\n\n    \nid\n:\n \n1\n,\n\n    \nname\n:\n \n\"Hulk\"\n\n  \n};\n\n\n}\n\n\n\n\n\n\n\nE o arquivo \napp.component.html\n deve estar (mais ou menos) assim:\n\n\n1\n2\n3\n4\n5\n6\n7\n<\nh1\n>\n{{title}}\n</\nh1\n>\n\n\n<\nh2\n>\n{{hero.name}} details!\n</\nh2\n>\n\n\n<\ndiv\n>\nid: {{hero.id}}\n</\ndiv\n>\n\n\n<\ndiv\n>\n\n  \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n  \n<\ninput\n \nid\n=\n\"hero-name\"\n \n[(\nngModel\n)]=\"\nhero\n.\nname\n\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\napp-exemplo\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\n\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 04",
            "title": "03 - O Editor de Her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-03/#exercicio-03",
            "text": "",
            "title": "Exerc\u00edcio 03"
        },
        {
            "location": "/exercicios/exercicio-03/#objetivos",
            "text": "Evoluir nossa aplica\u00e7\u00e3o para fazer a aplica\u00e7\u00e3o exemplo do Angular  Tour Of Heroes  Exibir os detalhes de um her\u00f3i  Criar um formul\u00e1rio de edi\u00e7\u00e3o de um her\u00f3i",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-03/#duracao",
            "text": "30 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-03/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 2. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-02-helloworld/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-03/#exibindo-os-detalhes-de-um-heroi",
            "text": "Abra o arquivo  app.component.ts  e adicione duas novas propriedades:   title : o nome da aplica\u00e7\u00e3o;  hero : o her\u00f3i \u201cHulk\u201d;   A classe  AppComponent  deve ficar como abaixo:  1\n2\n3\n4 export   class   AppComponent   { \n   title   =   'Tour of Heroes' ; \n   hero   =   'Hulk' ;  }    Em seguida substitua todo o conte\u00fado do arquivo de  template descrito no  templateUrl  do decorador  @Component  do  AppComponent  pelo conte\u00fado abaixo:  1\n2 < h1 > {{title}} </ h1 >  < h2 > {{hero}} details! </ h2 >    O navegador deve recarregar a aplica\u00e7\u00e3o e mostrar o  t\u00edtulo  e o  nome do her\u00f3i .  As chaves duplas  {{}}  \u00e9 a sintaxe para a  interpola\u00e7\u00e3o  do Angular. A interpola\u00e7\u00e3o apresenta as propriedades  title  e  hero  do componente  AppComponent  como strings no HTML.",
            "title": "Exibindo os detalhes de um her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-03/#a-classe-hero",
            "text": "O her\u00f3i precisa de mais propriedades. Converta a propriedade  hero  de uma string para uma classe.  Crie a classe  Hero  com as propriedades  id  e  name  no arquivo  app.component.ts , logo ap\u00f3s os import:  1\n2\n3\n4 export   class   Hero   { \n   id :   number ; \n   name :   string ;  }    Na classe  AppComponent , refatore a propriedade  hero  para o tipo  Hero , e inicialize o  id  e o  name :  1\n2\n3\n4 hero :   Hero   =   { \n   id :   1 , \n   name :   'Hulk'  };    Atualize, agora, o template para mostrar as propriedades  id  e  name :  1\n2\n3\n4 < h1 > {{title}} </ h1 >  < h2 > {{hero.name}} details! </ h2 >  < div > id: {{hero.id}} </ div >  < div > nome: {{hero.name}} </ div >    O navegador deve recarregar a aplica\u00e7\u00e3o e continuar mostrando o nome do her\u00f3i.   Templates com m\u00faltiplas linhas  No curos original, \u00e9 apresentado o uso da propriedade  template  do decorator (ao inv\u00e9s da  templateUrl ).\nPor\u00e9m, na pr\u00e1tica n\u00e3o utilizamos esta abordagem pois pode dificultar a manuten\u00e7\u00e3o do c\u00f3digo.\nSe voc\u00ea leu isso e o tutor(a) n\u00e3o explicou ainda, pe\u00e7a para que explique!",
            "title": "A classe Hero"
        },
        {
            "location": "/exercicios/exercicio-03/#editando-o-nome-do-heroi",
            "text": "Para editar o nome do her\u00f3i, vamos usar um  <input> . A caixa de texto deve tanto  exibir  a propriedade  name  do her\u00f3i, quanto  atualizar  o valor dessa propriedade na medida em que o usu\u00e1rio modifica seu valor.  Isto \u00e9, precisamos de um  two-way binding  entre o elemento  <input>  e a propriedade  hero.name .   Acessibilidade: Labels  Sempre que poss\u00edvel, use elementos de  label  para associar e descrever um campo de formul\u00e1rio.\nO atributo  for  do label  deve  existir e ser igual ao  id  do campo em quest\u00e3o.\nRefer\u00eancia:  T\u00e9cnica H44 do WCAG 2.0",
            "title": "Editando o nome do her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-03/#two-way-binding",
            "text": "Refatore o nome do her\u00f3i no template para ficar como abaixo:  1\n2\n3\n4 < div > \n   < label   for = \"hero-name\" > Nome: </ label > \n   < input   id = \"hero-name\"   [( ngModel )]=\" hero . name \"   placeholder = \"Nome do her\u00f3i\" >  </ div >    O  [(ngModel)]  \u00e9 a sintaxe Angular para o  two-way binding  entre o elemento  <input>  e a propriedade  hero.name . Os dados fluem nas duas dire\u00e7\u00f5es: a partir da propriedade para a caixa de texto, e da caixa de texto para a propriedade.  Logo ap\u00f3s essa altera\u00e7\u00e3o, a aplica\u00e7\u00e3o quebra. Se voc\u00ea olhar o console do navegador, voc\u00ea ver\u00e1 algo como:  1 ngModel ... isn't a known property of input.   Apesar do  ngModel  ser uma diretiva v\u00e1lida do Angular, ela n\u00e3o est\u00e1 dispon\u00edvel por default. Ela pertence ao m\u00f3dulo opcional  FormsModule .",
            "title": "Two-way binding"
        },
        {
            "location": "/exercicios/exercicio-03/#importando-o-formsmodule",
            "text": "Abra o arquivo  app.module.ts  e importe o m\u00f3dulo  FormsModule  da biblioteca  @angular/forms .  Para fazer isso, adicione o  FormsModule  no array  imports  do  @NgModule . Esse array cont\u00e9m a lista de todos os m\u00f3dulos Angular externos que a aplica\u00e7\u00e3o usa.  O  AppModule  deve ficar como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   NgModule   }   from   '@angular/core' ;  import   {   FormsModule   }   from   '@angular/forms' ;   // Passo 1) Importe o FormsModule (javascript)   import   {   AppComponent   }   from   './app.component' ;  @ NgModule ({ \n   declarations :   [ \n     AppComponent \n   ], \n   imports :   [ \n     BrowserModule , \n     FormsModule   // Passo 2) Importe o FormsModule (angular) \n   ], \n   providers :   [], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {   }    Quando o navegador atualizar, a aplica\u00e7\u00e3o deve voltar a funcionar. Voc\u00ea pode editar o nome do her\u00f3i e ver as mudan\u00e7as refletirem imediatamente no  <h2>  da p\u00e1gina.",
            "title": "Importando o FormsModule"
        },
        {
            "location": "/exercicios/exercicio-03/#resumo",
            "text": "O que aprendemos:   One-way Data Binding para a interpola\u00e7\u00e3o de dados ( {{}} )  Two-way data Binding para a edi\u00e7\u00e3o de dados ( [(ngModel)] )  Template com m\u00faltiplas linhas  ( ` )   Veja como deve estar o conte\u00fado do arquivo  app.component.ts  nesse momento:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   Component   }   from   '@angular/core' ;  export   class   Hero   { \n   id :   number ; \n   name :   string ;  }  @ Component ({ \n   selector :   'app-root' , \n   templateUrl :   './app.component.html' , \n   styleUrls :   [ './app.component.css' ]  })  export   class   AppComponent   { \n   title   =   'Tour of Heroes' ; \n   hero :   Hero   =   { \n     id :   1 , \n     name :   \"Hulk\" \n   };  }    E o arquivo  app.component.html  deve estar (mais ou menos) assim:  1\n2\n3\n4\n5\n6\n7 < h1 > {{title}} </ h1 >  < h2 > {{hero.name}} details! </ h2 >  < div > id: {{hero.id}} </ div >  < div > \n   < label   for = \"hero-name\" > Nome: </ label > \n   < input   id = \"hero-name\"   [( ngModel )]=\" hero . name \"   placeholder = \"Nome do her\u00f3i\" >  </ div >",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-03/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 app-exemplo\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-03/#proximo-passo",
            "text": "Exerc\u00edcio 04",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-04/",
            "text": "Exerc\u00edcio 04\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nImplementar a listagem de her\u00f3is no padr\u00e3o mestre/detalhe.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 3. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-03-tour-of-heroes/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nExibindo a lista de her\u00f3is\n\u00b6\n\n\nPara exibir a lista de her\u00f3is, a primeira coisa a fazer \u00e9 criar um array de her\u00f3is.\n\n\nCriando a lista de her\u00f3is\n\u00b6\n\n\nCrie o seguinte array no \napp.component.ts\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nconst\n \nHEROES\n:\n \nHero\n[]\n \n=\n \n[\n\n  \n{\n \nid\n:\n \n11\n,\n \nname\n:\n \n'Spider-Man'\n \n},\n\n  \n{\n \nid\n:\n \n12\n,\n \nname\n:\n \n'Captain America'\n \n},\n\n  \n{\n \nid\n:\n \n13\n,\n \nname\n:\n \n'Hulk'\n \n},\n\n  \n{\n \nid\n:\n \n14\n,\n \nname\n:\n \n'Thor'\n \n},\n\n  \n{\n \nid\n:\n \n15\n,\n \nname\n:\n \n'Iron Man'\n \n},\n\n  \n{\n \nid\n:\n \n16\n,\n \nname\n:\n \n'Luke Cage'\n \n},\n\n  \n{\n \nid\n:\n \n17\n,\n \nname\n:\n \n'Doctor Strange'\n \n},\n\n  \n{\n \nid\n:\n \n18\n,\n \nname\n:\n \n'Daredevil'\n \n},\n\n  \n{\n \nid\n:\n \n19\n,\n \nname\n:\n \n'Ant-Man'\n \n},\n\n  \n{\n \nid\n:\n \n20\n,\n \nname\n:\n \n'Wolverine'\n \n}\n\n\n];\n\n\n\n\n\n\n\nO array \nHEROES\n \u00e9 do tipo \nHero\n, a classe definida no exerc\u00edcio anterior.\n\n\nEventualmente, a aplica\u00e7\u00e3o ir\u00e1 recuperar a lista de her\u00f3is a partir de um Web Service; por enquanto, esse array de her\u00f3is \nmock\n \u00e9 o suficiente.\n\n\nExpondo o array de her\u00f3is\n\u00b6\n\n\nCrie uma propriedade p\u00fablica no \nAppComponent\n para expor o array de her\u00f3is. Dessa forma, podemos utiliz\u00e1-lo para fazer data binding no template do componente.\n\n\n1\n2\n3\n4\n5\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \n...\n\n  \nheroes\n \n=\n \nHEROES\n;\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\nO tipo da propriedade \nheroes\n n\u00e3o precisa ser definido porque o TypeScript \u00e9 capaz de inferir o tipo a partir do array \nHEROES\n.\n\n\nDefinimos o array \nHEROES\n fora do componente porque, no final das contas, os her\u00f3is ser\u00e3o recuperados a partir de um servi\u00e7o.\n\n\nExibindo o nome dos her\u00f3is\n\u00b6\n\n\nPara exibir o nome dos her\u00f3is em uma lista, adicione o seguinte trecho HTML abaixo do t\u00edtulo e acima dos detalhes do her\u00f3i:\n\n\n1\n2\n3\n4\n5\n6\n<\nh2\n>\nMeus her\u00f3is\n</\nh2\n>\n\n\n<\nul\n \nclass\n=\n\"heroes\"\n>\n\n  \n<\nli\n>\n\n    \n<!-- cada her\u00f3i vir\u00e1 aqui -->\n\n  \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n\n\n\n\nAgora vamos preencher o template com o nome dos her\u00f3is.\n\n\nListando os her\u00f3is com a diretiva \nngFor\n\u00b6\n\n\nO nosso objetivo \u00e9 fazer um bind entre o array de her\u00f3is (a propriedade \nheroes\n) no template do componente e exibir o nome de cada her\u00f3i individualmente, iterando sobre o array.\n\n\nPara isso, modifique a tag \n<li>\n, adicionando a diretiva \n*ngFor\n.\n\n\n1\n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n>\n\n\n\n\n\n\n\nO asterisco (*) \u00e9 uma parte cr\u00edtica dessa sintaxe. Ele indica que o elemento \n<li>\n e seus filhos s\u00e3o um template.\n\n\nA diretiva \nngFor\n itera sobre o array e renderiza uma inst\u00e2ncia do template para cada her\u00f3i.\n\n\nO trecho \nlet hero\n identifica a vari\u00e1vel que guarda o valor do item corrente em cada itera\u00e7\u00e3o. Voc\u00ea pode referenciar essa vari\u00e1vel no template.\n\n\nDentro da tag \n<li>\n, adicione uma tag \n<span>\n com o conte\u00fado abaixo:\n\n\n1\n2\n3\n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n>\n\n  \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n {{hero.name}}\n\n</\nli\n>\n\n\n\n\n\n\n\nNesse \n<span>\n, estamos utilizando a vari\u00e1vel \nhero\n definida na diretiva \nngFor\n para exibir as propriedades do her\u00f3i.\n\n\nQuando o navegador recarregar, voc\u00ea deve ver a lista de her\u00f3is.\n\n\nCriando regras de estilos CSS\n\u00b6\n\n\nPensando na usabilidade, vamos adicionar regras de estilo CSS para:\n\n\n\n\nDestacar o her\u00f3i na navega\u00e7\u00e3o do ponteiro do mouse;\n\n\nDestacar o her\u00f3i selecionado\n\n\n\n\nPara adicionar regras de estilos CSS ao componente, defina a propriedade \nstyles\n do decorador \n@Component\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nstyles\n:\n \n[\n`\n\n\n  .selected {\n\n\n    background-color: #CFD8DC !important;\n\n\n    color: white;\n\n\n  }\n\n\n  .heroes {\n\n\n    margin: 0 0 2em 0;\n\n\n    list-style-type: none;\n\n\n    padding: 0;\n\n\n    width: 15em;\n\n\n  }\n\n\n  .heroes li {\n\n\n    cursor: pointer;\n\n\n    position: relative;\n\n\n    left: 0;\n\n\n    background-color: #EEE;\n\n\n    margin: .5em;\n\n\n    padding: .3em 0;\n\n\n    height: 1.6em;\n\n\n    border-radius: 4px;\n\n\n  }\n\n\n  .heroes li.selected:hover {\n\n\n    background-color: #BBD8DC !important;\n\n\n    color: white;\n\n\n  }\n\n\n  .heroes li:hover {\n\n\n    color: #607D8B;\n\n\n    background-color: #DDD;\n\n\n    left: .1em;\n\n\n  }\n\n\n  .heroes .text {\n\n\n    position: relative;\n\n\n    top: -3px;\n\n\n  }\n\n\n  .heroes .badge {\n\n\n    display: inline-block;\n\n\n    font-size: small;\n\n\n    color: white;\n\n\n    padding: 0.8em 0.7em 0 0.7em;\n\n\n    background-color: #607D8B;\n\n\n    line-height: 1em;\n\n\n    position: relative;\n\n\n    left: -1px;\n\n\n    top: -4px;\n\n\n    height: 1.8em;\n\n\n    margin-right: .8em;\n\n\n    border-radius: 4px 0 0 4px;\n\n\n  }\n\n\n`\n]\n\n\n\n\n\n\n\nLembre-se de utilizar o \nbacktick\n ( ` ) para definir strings com mais de uma linha.\n\n\nDepois que adicionamos os estilos, voc\u00ea pode notar que o arquivo est\u00e1 ficando muito grande. N\u00e3o se preocupe, vamos mover as regras de estilo CSS para um arquivo separado em um exerc\u00edcio posterior.\n\n\nPor enquanto, \u00e9 importante destacar que, quando voc\u00ea define regras de estilo CSS para um componente, essas regras t\u00eam o escopo do componente espec\u00edfico; isto \u00e9, elas n\u00e3o afetam o HTML externo ou de outros componentes.\n\n\nNesse momento, o template deve estar como abaixo:\n\n\n1\n2\n3\n4\n5\n6\n<\nh2\n>\nMeus her\u00f3is\n</\nh2\n>\n\n\n<\nul\n \nclass\n=\n\"heroes\"\n>\n\n  \n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n>\n\n    \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n {{hero.name}}\n  \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n\n\n\n\nSelecionando um her\u00f3i\n\u00b6\n\n\nNesse momento, estamos exibindo uma lista de her\u00f3is e tamb\u00e9m os detalhes de um her\u00f3i espec\u00edfico ao final da p\u00e1gina. No entanto, n\u00e3o h\u00e1 liga\u00e7\u00e3o entre a lista e o her\u00f3i exibido.\n\n\nN\u00f3s queremos que ao se escolher um her\u00f3i da lista, seja exibido o detalhe do her\u00f3i selecionado.\n\n\nEsse padr\u00e3o visual \u00e9 conhecido como \"mestre/detalhe\": a parte \"mestre\" \u00e9 a lista de her\u00f3is, e a parte \"detalhe\" \u00e9 o her\u00f3i selecionado.\n\n\nVamos ent\u00e3o conectar o mestre com o detalhe a partir de um evento de \nclick\n.\n\n\nCapturando o evento de click\n\u00b6\n\n\nPara capturar o evento de click, adicione a express\u00e3o \n(click)\n no elemento \n<li>\n como abaixo:\n\n\n1\n2\n3\n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n \n(\nclick\n)=\"\nonSelect\n(\nhero\n)\"\n>\n\n  ...\n\n</\nli\n>\n\n\n\n\n\n\n\nOs par\u00eanteses identificam que queremos capturar o evento \nclick\n do elemento \n<li>\n. Poder\u00edamos capturar outros eventos JavaScritp da mesma forma (keyup, keydown, keypress, focus, blur etc).\n\n\nA express\u00e3o \nonSelect(hero)\n identifica que deve ser disparado o m\u00e9todo \nonSelect\n do componente \nAppComponent\n, passando a vari\u00e1vel \nhero\n do template (a mesma utilizada na diretiva \nngFor\n) como par\u00e2metro.\n\n\nAdicionando um click handler para expor o her\u00f3i selecionado\n\u00b6\n\n\nN\u00e3o precisamos mais da propriedade \nhero\n no \nAppComponent\n, porque agora n\u00e3o vamos mais exibir um \u00fanico her\u00f3i fixo. Vamos permitir que o usu\u00e1rio selecione um her\u00f3i da lista. Por isso, troque a propriedade \nhero\n pela propriedade \nselectedHero\n:\n\n\n1\nselectedHero\n:\n \nHero\n;\n\n\n\n\n\n\n\nN\u00e3o vamos inicializar a propriedade \nselectedHero\n porque s\u00f3 vamos exibir os dados depois que o usu\u00e1rio selecionar um her\u00f3i da lista.\n\n\nAdicione o m\u00e9todo \nonSelect\n para setar a propriedade \nselectedHero\n:\n\n\n1\n2\n3\nonSelect\n(\nhero\n:\n \nHero\n)\n:\n \nvoid\n \n{\n\n  \nthis\n.\nselectedHero\n \n=\n \nhero\n;\n\n\n}\n\n\n\n\n\n\n\nAgora, atualize o template para n\u00e3o mais referenciar a propriedade \nhero\n. Fa\u00e7a o bind para a nova propriedade \nselectedHero\n:\n\n\n1\n2\n3\n4\n5\n6\n<\nh2\n>\n{{selectedHero.name}} details!\n</\nh2\n>\n\n\n<\ndiv\n>\nid: {{selectedHero.id}}\n</\ndiv\n>\n\n\n<\ndiv\n>\n\n  \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n  \n<\ninput\n \nid\n=\n\"hero-name\"\n \n[(\nngModel\n)]=\"\nselectedHero\n.\nname\n\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nEscondendo o her\u00f3i vazio com a diretiva \nngIf\n\u00b6\n\n\nNesse momento, ap\u00f3s o navegador recarregar a aplica\u00e7\u00e3o, voc\u00ea vai ver que a aplica\u00e7\u00e3o quebrou.\n\n\nComo a propriedade \nselectedHero\n s\u00f3 ser\u00e1 inicializada quando o usu\u00e1rio selecionar um her\u00f3i, voc\u00ea dever\u00e1 ver a seguinte mensagem no console do navegador:\n\n\n1\nERROR TypeError: _co.selectedHero is undefined\n\n\n\n\n\n\nPortanto, s\u00f3 vamos exibir o HTML do her\u00f3i selecionado se houver de fato um her\u00f3i selecionado.\n\n\nPara isso, mova o conte\u00fado do HTML do her\u00f3i selecionado para dentro de um novo elemento \n<div>\n e adicione a diretiva \nngIf\n ao \n<div>\n como abaixo:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n<\ndiv\n \n*\nngIf\n=\n\"selectedHero\"\n>\n\n  \n<\nh2\n>\n{{selectedHero.name}} details!\n</\nh2\n>\n\n  \n<\ndiv\n>\nid: {{selectedHero.id}}\n</\ndiv\n>\n\n  \n<\ndiv\n>\n\n    \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n    \n<\ninput\n \nid\n=\n\"hero-name\"\n \n[(\nngModel\n)]=\"\nselectedHero\n.\nname\n\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nSem um her\u00f3i selecionado, a diretiva \nngIf\n remove o \n<div>\n (e seus filhos) da \u00e1rvore DOM.\n\n\nQuando o usu\u00e1rio seleciona um her\u00f3i, a diretiva \nngIf\n insere o \n<div>\n na \u00e1rvore DOM, e o seu conte\u00fado \u00e9 avaliado.\n\n\nDestacando o her\u00f3i selecionado\n\u00b6\n\n\nNesse momento, os detalhes do her\u00f3i selecionado aparecem abaixo da lista, como esperado. No entanto, est\u00e1 dif\u00edcil identificar na lista em si qual \u00e9 o her\u00f3i selecionado.\n\n\nNas regras de estilo CSS que definimos anteriormente, h\u00e1 uma classe CSS para destacar o her\u00f3i selecionado: \u00e9 a classe \n.selected\n.\n\n\nPara destacar o her\u00f3i selecionado na lista, vamos aplicar essa classe ao elemento \n<li>\n do her\u00f3i selecionado. Dessa forma, quando o usu\u00e1rio clicar no her\u00f3i \"Magneta\", por exemplo, veremos algo como:\n\n\n\n\nPara isso, adicione a express\u00e3o \n[class.selected]\n ao elemento \n<li>\n como abaixo:\n\n\n1\n[class.selected]=\"hero === selectedHero\"\n\n\n\n\n\n\nEssa sintaxe \u00e9 interpretada como:\n\n\n\n\nQuando a express\u00e3o \nhero === selectedHero\n \u00e9 avaliada como \ntrue\n, a classe CSS \nselected\n \u00e9 adicionada\n\n\nQuando a express\u00e3o \nhero === selectedHero\n \u00e9 avaliada como \nfalse\n, a classe CSS \nselected\n \u00e9 removida\n\n\n\n\nA vers\u00e3o final do elemento \n<li>\n \u00e9 como abaixo:\n\n\n1\n2\n3\n4\n5\n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n\n  \n[\nclass\n.\nselected\n]=\"\nhero \n=\n==\n \nselectedHero\n\"\n\n  \n(\nclick\n)=\"\nonSelect\n(\nhero\n)\"\n>\n\n  \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n {{hero.name}}\n\n</\nli\n>\n\n\n\n\n\n\n\nE essa \u00e9 a vers\u00e3o completa do \napp.component.ts\n nesse momento:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n:\n \nnumber\n;\n\n  \nname\n:\n \nstring\n;\n\n\n}\n\n\n\nconst\n \nHEROES\n:\n \nHero\n[]\n \n=\n \n[\n\n  \n{\n \nid\n:\n \n11\n,\n \nname\n:\n \n'Spider-Man'\n \n},\n\n  \n{\n \nid\n:\n \n12\n,\n \nname\n:\n \n'Captain America'\n \n},\n\n  \n{\n \nid\n:\n \n13\n,\n \nname\n:\n \n'Hulk'\n \n},\n\n  \n{\n \nid\n:\n \n14\n,\n \nname\n:\n \n'Thor'\n \n},\n\n  \n{\n \nid\n:\n \n15\n,\n \nname\n:\n \n'Iron Man'\n \n},\n\n  \n{\n \nid\n:\n \n16\n,\n \nname\n:\n \n'Luke Cage'\n \n},\n\n  \n{\n \nid\n:\n \n17\n,\n \nname\n:\n \n'Doctor Strange'\n \n},\n\n  \n{\n \nid\n:\n \n18\n,\n \nname\n:\n \n'Daredevil'\n \n},\n\n  \n{\n \nid\n:\n \n19\n,\n \nname\n:\n \n'Ant-Man'\n \n},\n\n  \n{\n \nid\n:\n \n20\n,\n \nname\n:\n \n'Wolverine'\n \n}\n\n\n];\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-root'\n,\n\n  \ntemplateUrl\n:\n \n'./app.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./app.component.css'\n],\n\n  \nstyles\n:\n \n[\n`\n\n\n  .selected {\n\n\n    background-color: #CFD8DC !important;\n\n\n    color: white;\n\n\n  }\n\n\n  .heroes {\n\n\n    margin: 0 0 2em 0;\n\n\n    list-style-type: none;\n\n\n    padding: 0;\n\n\n    width: 15em;\n\n\n  }\n\n\n  .heroes li {\n\n\n    cursor: pointer;\n\n\n    position: relative;\n\n\n    left: 0;\n\n\n    background-color: #EEE;\n\n\n    margin: .5em;\n\n\n    padding: .3em 0;\n\n\n    height: 1.6em;\n\n\n    border-radius: 4px;\n\n\n  }\n\n\n  .heroes li.selected:hover {\n\n\n    background-color: #BBD8DC !important;\n\n\n    color: white;\n\n\n  }\n\n\n  .heroes li:hover {\n\n\n    color: #607D8B;\n\n\n    background-color: #DDD;\n\n\n    left: .1em;\n\n\n  }\n\n\n  .heroes .text {\n\n\n    position: relative;\n\n\n    top: -3px;\n\n\n  }\n\n\n  .heroes .badge {\n\n\n    display: inline-block;\n\n\n    font-size: small;\n\n\n    color: white;\n\n\n    padding: 0.8em 0.7em 0 0.7em;\n\n\n    background-color: #607D8B;\n\n\n    line-height: 1em;\n\n\n    position: relative;\n\n\n    left: -1px;\n\n\n    top: -4px;\n\n\n    height: 1.8em;\n\n\n    margin-right: .8em;\n\n\n    border-radius: 4px 0 0 4px;\n\n\n  }\n\n\n`\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n  \nselectedHero\n:\n \nHero\n;\n\n  \nheroes\n \n=\n \nHEROES\n;\n\n\n  \nonSelect\n(\nhero\n:\n \nHero\n)\n:\n \nvoid\n \n{\n\n    \nthis\n.\nselectedHero\n \n=\n \nhero\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\napp-exemplo\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nUtilizamos a diretiva \nngFor\n para exibir uma lista de her\u00f3is.\n\n\nFizemos o binding do evento \nclick\n para a sele\u00e7\u00e3o de um her\u00f3i da lista.\n\n\nUtilizamos a diretiva \nngIf\n para controlar a exibi\u00e7\u00e3o de elementos HTML na \u00e1rvore DOM.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 05",
            "title": "04 - O Padr\u00e3o Mestre/Detalhe"
        },
        {
            "location": "/exercicios/exercicio-04/#exercicio-04",
            "text": "",
            "title": "Exerc\u00edcio 04"
        },
        {
            "location": "/exercicios/exercicio-04/#objetivos",
            "text": "Implementar a listagem de her\u00f3is no padr\u00e3o mestre/detalhe.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-04/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-04/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 3. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-03-tour-of-heroes/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-04/#exibindo-a-lista-de-herois",
            "text": "Para exibir a lista de her\u00f3is, a primeira coisa a fazer \u00e9 criar um array de her\u00f3is.",
            "title": "Exibindo a lista de her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-04/#criando-a-lista-de-herois",
            "text": "Crie o seguinte array no  app.component.ts :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 const   HEROES :   Hero []   =   [ \n   {   id :   11 ,   name :   'Spider-Man'   }, \n   {   id :   12 ,   name :   'Captain America'   }, \n   {   id :   13 ,   name :   'Hulk'   }, \n   {   id :   14 ,   name :   'Thor'   }, \n   {   id :   15 ,   name :   'Iron Man'   }, \n   {   id :   16 ,   name :   'Luke Cage'   }, \n   {   id :   17 ,   name :   'Doctor Strange'   }, \n   {   id :   18 ,   name :   'Daredevil'   }, \n   {   id :   19 ,   name :   'Ant-Man'   }, \n   {   id :   20 ,   name :   'Wolverine'   }  ];    O array  HEROES  \u00e9 do tipo  Hero , a classe definida no exerc\u00edcio anterior.  Eventualmente, a aplica\u00e7\u00e3o ir\u00e1 recuperar a lista de her\u00f3is a partir de um Web Service; por enquanto, esse array de her\u00f3is  mock  \u00e9 o suficiente.",
            "title": "Criando a lista de her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-04/#expondo-o-array-de-herois",
            "text": "Crie uma propriedade p\u00fablica no  AppComponent  para expor o array de her\u00f3is. Dessa forma, podemos utiliz\u00e1-lo para fazer data binding no template do componente.  1\n2\n3\n4\n5 export   class   AppComponent   { \n   ... \n   heroes   =   HEROES ; \n   ...  }    O tipo da propriedade  heroes  n\u00e3o precisa ser definido porque o TypeScript \u00e9 capaz de inferir o tipo a partir do array  HEROES .  Definimos o array  HEROES  fora do componente porque, no final das contas, os her\u00f3is ser\u00e3o recuperados a partir de um servi\u00e7o.",
            "title": "Expondo o array de her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-04/#exibindo-o-nome-dos-herois",
            "text": "Para exibir o nome dos her\u00f3is em uma lista, adicione o seguinte trecho HTML abaixo do t\u00edtulo e acima dos detalhes do her\u00f3i:  1\n2\n3\n4\n5\n6 < h2 > Meus her\u00f3is </ h2 >  < ul   class = \"heroes\" > \n   < li > \n     <!-- cada her\u00f3i vir\u00e1 aqui --> \n   </ li >  </ ul >    Agora vamos preencher o template com o nome dos her\u00f3is.",
            "title": "Exibindo o nome dos her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-04/#listando-os-herois-com-a-diretiva-ngfor",
            "text": "O nosso objetivo \u00e9 fazer um bind entre o array de her\u00f3is (a propriedade  heroes ) no template do componente e exibir o nome de cada her\u00f3i individualmente, iterando sobre o array.  Para isso, modifique a tag  <li> , adicionando a diretiva  *ngFor .  1 < li   * ngFor = \"let hero of heroes\" >    O asterisco (*) \u00e9 uma parte cr\u00edtica dessa sintaxe. Ele indica que o elemento  <li>  e seus filhos s\u00e3o um template.  A diretiva  ngFor  itera sobre o array e renderiza uma inst\u00e2ncia do template para cada her\u00f3i.  O trecho  let hero  identifica a vari\u00e1vel que guarda o valor do item corrente em cada itera\u00e7\u00e3o. Voc\u00ea pode referenciar essa vari\u00e1vel no template.  Dentro da tag  <li> , adicione uma tag  <span>  com o conte\u00fado abaixo:  1\n2\n3 < li   * ngFor = \"let hero of heroes\" > \n   < span   class = \"badge\" > {{hero.id}} </ span >  {{hero.name}} </ li >    Nesse  <span> , estamos utilizando a vari\u00e1vel  hero  definida na diretiva  ngFor  para exibir as propriedades do her\u00f3i.  Quando o navegador recarregar, voc\u00ea deve ver a lista de her\u00f3is.",
            "title": "Listando os her\u00f3is com a diretiva ngFor"
        },
        {
            "location": "/exercicios/exercicio-04/#criando-regras-de-estilos-css",
            "text": "Pensando na usabilidade, vamos adicionar regras de estilo CSS para:   Destacar o her\u00f3i na navega\u00e7\u00e3o do ponteiro do mouse;  Destacar o her\u00f3i selecionado   Para adicionar regras de estilos CSS ao componente, defina a propriedade  styles  do decorador  @Component  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 styles :   [ `    .selected {      background-color: #CFD8DC !important;      color: white;    }    .heroes {      margin: 0 0 2em 0;      list-style-type: none;      padding: 0;      width: 15em;    }    .heroes li {      cursor: pointer;      position: relative;      left: 0;      background-color: #EEE;      margin: .5em;      padding: .3em 0;      height: 1.6em;      border-radius: 4px;    }    .heroes li.selected:hover {      background-color: #BBD8DC !important;      color: white;    }    .heroes li:hover {      color: #607D8B;      background-color: #DDD;      left: .1em;    }    .heroes .text {      position: relative;      top: -3px;    }    .heroes .badge {      display: inline-block;      font-size: small;      color: white;      padding: 0.8em 0.7em 0 0.7em;      background-color: #607D8B;      line-height: 1em;      position: relative;      left: -1px;      top: -4px;      height: 1.8em;      margin-right: .8em;      border-radius: 4px 0 0 4px;    }  ` ]    Lembre-se de utilizar o  backtick  ( ` ) para definir strings com mais de uma linha.  Depois que adicionamos os estilos, voc\u00ea pode notar que o arquivo est\u00e1 ficando muito grande. N\u00e3o se preocupe, vamos mover as regras de estilo CSS para um arquivo separado em um exerc\u00edcio posterior.  Por enquanto, \u00e9 importante destacar que, quando voc\u00ea define regras de estilo CSS para um componente, essas regras t\u00eam o escopo do componente espec\u00edfico; isto \u00e9, elas n\u00e3o afetam o HTML externo ou de outros componentes.  Nesse momento, o template deve estar como abaixo:  1\n2\n3\n4\n5\n6 < h2 > Meus her\u00f3is </ h2 >  < ul   class = \"heroes\" > \n   < li   * ngFor = \"let hero of heroes\" > \n     < span   class = \"badge\" > {{hero.id}} </ span >  {{hero.name}}\n   </ li >  </ ul >",
            "title": "Criando regras de estilos CSS"
        },
        {
            "location": "/exercicios/exercicio-04/#selecionando-um-heroi",
            "text": "Nesse momento, estamos exibindo uma lista de her\u00f3is e tamb\u00e9m os detalhes de um her\u00f3i espec\u00edfico ao final da p\u00e1gina. No entanto, n\u00e3o h\u00e1 liga\u00e7\u00e3o entre a lista e o her\u00f3i exibido.  N\u00f3s queremos que ao se escolher um her\u00f3i da lista, seja exibido o detalhe do her\u00f3i selecionado.  Esse padr\u00e3o visual \u00e9 conhecido como \"mestre/detalhe\": a parte \"mestre\" \u00e9 a lista de her\u00f3is, e a parte \"detalhe\" \u00e9 o her\u00f3i selecionado.  Vamos ent\u00e3o conectar o mestre com o detalhe a partir de um evento de  click .",
            "title": "Selecionando um her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-04/#capturando-o-evento-de-click",
            "text": "Para capturar o evento de click, adicione a express\u00e3o  (click)  no elemento  <li>  como abaixo:  1\n2\n3 < li   * ngFor = \"let hero of heroes\"   ( click )=\" onSelect ( hero )\" > \n  ... </ li >    Os par\u00eanteses identificam que queremos capturar o evento  click  do elemento  <li> . Poder\u00edamos capturar outros eventos JavaScritp da mesma forma (keyup, keydown, keypress, focus, blur etc).  A express\u00e3o  onSelect(hero)  identifica que deve ser disparado o m\u00e9todo  onSelect  do componente  AppComponent , passando a vari\u00e1vel  hero  do template (a mesma utilizada na diretiva  ngFor ) como par\u00e2metro.",
            "title": "Capturando o evento de click"
        },
        {
            "location": "/exercicios/exercicio-04/#adicionando-um-click-handler-para-expor-o-heroi-selecionado",
            "text": "N\u00e3o precisamos mais da propriedade  hero  no  AppComponent , porque agora n\u00e3o vamos mais exibir um \u00fanico her\u00f3i fixo. Vamos permitir que o usu\u00e1rio selecione um her\u00f3i da lista. Por isso, troque a propriedade  hero  pela propriedade  selectedHero :  1 selectedHero :   Hero ;    N\u00e3o vamos inicializar a propriedade  selectedHero  porque s\u00f3 vamos exibir os dados depois que o usu\u00e1rio selecionar um her\u00f3i da lista.  Adicione o m\u00e9todo  onSelect  para setar a propriedade  selectedHero :  1\n2\n3 onSelect ( hero :   Hero ) :   void   { \n   this . selectedHero   =   hero ;  }    Agora, atualize o template para n\u00e3o mais referenciar a propriedade  hero . Fa\u00e7a o bind para a nova propriedade  selectedHero :  1\n2\n3\n4\n5\n6 < h2 > {{selectedHero.name}} details! </ h2 >  < div > id: {{selectedHero.id}} </ div >  < div > \n   < label   for = \"hero-name\" > Nome: </ label > \n   < input   id = \"hero-name\"   [( ngModel )]=\" selectedHero . name \"   placeholder = \"Nome do her\u00f3i\" >  </ div >",
            "title": "Adicionando um click handler para expor o her\u00f3i selecionado"
        },
        {
            "location": "/exercicios/exercicio-04/#escondendo-o-heroi-vazio-com-a-diretiva-ngif",
            "text": "Nesse momento, ap\u00f3s o navegador recarregar a aplica\u00e7\u00e3o, voc\u00ea vai ver que a aplica\u00e7\u00e3o quebrou.  Como a propriedade  selectedHero  s\u00f3 ser\u00e1 inicializada quando o usu\u00e1rio selecionar um her\u00f3i, voc\u00ea dever\u00e1 ver a seguinte mensagem no console do navegador:  1 ERROR TypeError: _co.selectedHero is undefined   Portanto, s\u00f3 vamos exibir o HTML do her\u00f3i selecionado se houver de fato um her\u00f3i selecionado.  Para isso, mova o conte\u00fado do HTML do her\u00f3i selecionado para dentro de um novo elemento  <div>  e adicione a diretiva  ngIf  ao  <div>  como abaixo:  1\n2\n3\n4\n5\n6\n7\n8 < div   * ngIf = \"selectedHero\" > \n   < h2 > {{selectedHero.name}} details! </ h2 > \n   < div > id: {{selectedHero.id}} </ div > \n   < div > \n     < label   for = \"hero-name\" > Nome: </ label > \n     < input   id = \"hero-name\"   [( ngModel )]=\" selectedHero . name \"   placeholder = \"Nome do her\u00f3i\" > \n   </ div >  </ div >    Sem um her\u00f3i selecionado, a diretiva  ngIf  remove o  <div>  (e seus filhos) da \u00e1rvore DOM.  Quando o usu\u00e1rio seleciona um her\u00f3i, a diretiva  ngIf  insere o  <div>  na \u00e1rvore DOM, e o seu conte\u00fado \u00e9 avaliado.",
            "title": "Escondendo o her\u00f3i vazio com a diretiva ngIf"
        },
        {
            "location": "/exercicios/exercicio-04/#destacando-o-heroi-selecionado",
            "text": "Nesse momento, os detalhes do her\u00f3i selecionado aparecem abaixo da lista, como esperado. No entanto, est\u00e1 dif\u00edcil identificar na lista em si qual \u00e9 o her\u00f3i selecionado.  Nas regras de estilo CSS que definimos anteriormente, h\u00e1 uma classe CSS para destacar o her\u00f3i selecionado: \u00e9 a classe  .selected .  Para destacar o her\u00f3i selecionado na lista, vamos aplicar essa classe ao elemento  <li>  do her\u00f3i selecionado. Dessa forma, quando o usu\u00e1rio clicar no her\u00f3i \"Magneta\", por exemplo, veremos algo como:   Para isso, adicione a express\u00e3o  [class.selected]  ao elemento  <li>  como abaixo:  1 [class.selected]=\"hero === selectedHero\"   Essa sintaxe \u00e9 interpretada como:   Quando a express\u00e3o  hero === selectedHero  \u00e9 avaliada como  true , a classe CSS  selected  \u00e9 adicionada  Quando a express\u00e3o  hero === selectedHero  \u00e9 avaliada como  false , a classe CSS  selected  \u00e9 removida   A vers\u00e3o final do elemento  <li>  \u00e9 como abaixo:  1\n2\n3\n4\n5 < li   * ngFor = \"let hero of heroes\" \n   [ class . selected ]=\" hero  = ==   selectedHero \" \n   ( click )=\" onSelect ( hero )\" > \n   < span   class = \"badge\" > {{hero.id}} </ span >  {{hero.name}} </ li >    E essa \u00e9 a vers\u00e3o completa do  app.component.ts  nesse momento:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83 import   {   Component   }   from   '@angular/core' ;  export   class   Hero   { \n   id :   number ; \n   name :   string ;  }  const   HEROES :   Hero []   =   [ \n   {   id :   11 ,   name :   'Spider-Man'   }, \n   {   id :   12 ,   name :   'Captain America'   }, \n   {   id :   13 ,   name :   'Hulk'   }, \n   {   id :   14 ,   name :   'Thor'   }, \n   {   id :   15 ,   name :   'Iron Man'   }, \n   {   id :   16 ,   name :   'Luke Cage'   }, \n   {   id :   17 ,   name :   'Doctor Strange'   }, \n   {   id :   18 ,   name :   'Daredevil'   }, \n   {   id :   19 ,   name :   'Ant-Man'   }, \n   {   id :   20 ,   name :   'Wolverine'   }  ];  @ Component ({ \n   selector :   'app-root' , \n   templateUrl :   './app.component.html' , \n   styleUrls :   [ './app.component.css' ], \n   styles :   [ `    .selected {      background-color: #CFD8DC !important;      color: white;    }    .heroes {      margin: 0 0 2em 0;      list-style-type: none;      padding: 0;      width: 15em;    }    .heroes li {      cursor: pointer;      position: relative;      left: 0;      background-color: #EEE;      margin: .5em;      padding: .3em 0;      height: 1.6em;      border-radius: 4px;    }    .heroes li.selected:hover {      background-color: #BBD8DC !important;      color: white;    }    .heroes li:hover {      color: #607D8B;      background-color: #DDD;      left: .1em;    }    .heroes .text {      position: relative;      top: -3px;    }    .heroes .badge {      display: inline-block;      font-size: small;      color: white;      padding: 0.8em 0.7em 0 0.7em;      background-color: #607D8B;      line-height: 1em;      position: relative;      left: -1px;      top: -4px;      height: 1.8em;      margin-right: .8em;      border-radius: 4px 0 0 4px;    }  ` ]  })  export   class   AppComponent   { \n   title   =   'Tour of Heroes' ; \n   selectedHero :   Hero ; \n   heroes   =   HEROES ; \n\n   onSelect ( hero :   Hero ) :   void   { \n     this . selectedHero   =   hero ; \n   }  }",
            "title": "Destacando o her\u00f3i selecionado"
        },
        {
            "location": "/exercicios/exercicio-04/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 app-exemplo\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-04/#resumo",
            "text": "Utilizamos a diretiva  ngFor  para exibir uma lista de her\u00f3is.  Fizemos o binding do evento  click  para a sele\u00e7\u00e3o de um her\u00f3i da lista.  Utilizamos a diretiva  ngIf  para controlar a exibi\u00e7\u00e3o de elementos HTML na \u00e1rvore DOM.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-04/#proximo-passo",
            "text": "Exerc\u00edcio 05",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-05/",
            "text": "Exerc\u00edcio 05\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nRefatorar a aplica\u00e7\u00e3o para o uso de v\u00e1rios componentes\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 4. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-04-master-details/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nCriando um componente para exibir os detalhes de um her\u00f3i\n\u00b6\n\n\nNesse momento, o componente \nAppComponent\n est\u00e1 fazendo tudo!\n\n\nNo come\u00e7o, o componente exibia os detalhes de um her\u00f3i. Agora, j\u00e1 implementa o padr\u00e3o mestre/detalhe de her\u00f3is. No futuro, teremos novos requisitos e funcionalidades.\n\n\nJ\u00e1 d\u00e1 pra perceber que \u00e9 invi\u00e1vel manter tudo em um s\u00f3 componente. Vamos, portanto, refatorar a aplica\u00e7\u00e3o em sub-componentes, de forma que cada componente ter\u00e1 uma \u00fanica responsabilidade. Eventualmente, o componente \nAppComponent\n ser\u00e1 somente uma \u201ccasca\u201d para os sub-componentes.\n\n\nVamos ent\u00e3o come\u00e7ar criando um componente para exibir os detalhes de um her\u00f3i.\n\n\nA nomenclatura de componentes deve seguir os padr\u00f5es definidos no guia de estilo do Angular:\n\n\n\n\nO nome do componente deve seguir o padr\u00e3o \nupper camel case\n com o sufixo \nComponent\n. Ex: \nUpperCamelCaseComponent\n ou \nFormListComponent\n.\n\n\nO nome do arquivo deve seguir o padr\u00e3o \nlower dash case\n e ter a extens\u00e3o \n.component.ts\n. Ex.: \nlower-dash-case.component.ts\n ou \nform-list.component.ts\n.\n\n\n\n\nSeguindo esse padr\u00e3o, crie um novo arquivo chamado \nhero-detail.component.ts\n na pasta \nsrc/app/\n. Esse arquivo ir\u00e1 conter a implementa\u00e7\u00e3o do novo componente \nHeroDetailComponent\n.\n\n\nComece a implementar o componente com o conte\u00fado abaixo:\n\n\n1\n2\n3\n4\n5\n6\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'hero-detail'\n,\n\n\n})\n\n\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n \n}\n\n\n\n\n\n\n\nPara definir um componente Angular, voc\u00ea sempre ir\u00e1 importar o s\u00edmbolo \nComponent\n.\n\n\nO decorador \n@Component\n define os metadados do componente. Por exemplo, no c\u00f3digo acima, a propriedade \nselector\n define que o componente ser\u00e1 identificado por uma tag HTML nova, chamada \"hero-detail\". Ou seja, ser\u00e1 identificado por \n<hero-detail> </hero-detail>\n.\n\n\nSempre exporte o componente, porque sempre iremos import\u00e1-lo em algum outro lugar.\n\n\n\n\nDICA: adicione novos prefixos al\u00e9m do \napp-*\n\n\nNo arquivo \nsrc/tslint.json\n voc\u00ea pode adicionar outros prefixos para suas diretivas e componentes.\nPara n\u00e3o recebermos erros de \nlint\n com os hero's components, basta modificar as regras do item \n\"component-selector\"\n.\nNo nosso caso, subistitu\u00edmos a \nstring\n \n\"app\"\n pelo \narray\n \n[\"app\", \"hero\"]\n\n\n\n\nTemplate do componente \nHeroDetailComponent\n\u00b6\n\n\nSeguindo o padr\u00e3o de nomenclatura \nlower-dash-case\n, crie um arquivo HTML que ser\u00e1 o template do componente \nHeroDetailComponent\n. Ou seja, crie o arquivo \nhero-detail.component.html\n\n\nRecorte e cole o conte\u00fado do template do componente \nAppComponent\n referente ao detalhe do her\u00f3i no novo arquivo criado.\n\n\nAgora, no arquivo do \nhero-detail.component.ts\n, informe ao componente angular o arquivo de templete deste componente. Ou seja, declare a propriedade \ntemplateUrl\n com o valor \n./hero-detail.component.html\n.\n\n\nO componente \nHeroDetailComponent\n possui um her\u00f3i (e n\u00e3o um her\u00f3i \"selecionado\"); por isso, substitua a palavra \nselectedHero\n por \nhero\n no template do novo componente (\nhero-detail.component.html\n).\n\n\nO novo template (\nhero-detail.component.html\n) deve ser algo como:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n<\ndiv\n \n*\nngIf\n=\n\"hero\"\n>\n\n    \n<\nh2\n>\n{{hero.name}} details!\n</\nh2\n>\n\n    \n<\ndiv\n>\nid: {{hero.id}}\n</\ndiv\n>\n\n    \n<\ndiv\n>\n\n        \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n        \n<\ninput\n \nid\n=\n\"hero-name\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n \n[(\nngModel\n)]=\"\nhero\n.\nname\n\"\n>\n\n    \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nE o decorador do novo component (\nhero-detail.component.ts\n) deve ser algo como\n\n\n1\n2\n3\n4\n@\nComponent\n({\n\n  \nselector\n:\n \n'hero-detail'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-detail.component.html'\n\n\n})\n\n\n\n\n\n\n\nE agora n\u00e3o deve ter mais nenhuma refer\u00eancia aos detalhes do her\u00f3i no template do \nAppComponent\n.\n\n\nAdicionando a propriedade \nhero\n\u00b6\n\n\nO template do componente \nHeroDetailComponent\n faz um binding com a propriedade \nhero\n. Por isso, adicione essa propriedade ao componente:\n\n\n1\n2\n3\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \nhero\n:\n \nHero\n;\n \n// <-- adicione esta propriedade\n\n\n}\n\n\n\n\n\n\n\nA propriedade \u00e9 do tipo \nHero\n. Essa classe ainda est\u00e1 definida no arquivo \napp.component.ts\n. Agora, j\u00e1 s\u00e3o dois componentes que precisam referenciar a classe \nHero\n.\n\n\nPor isso, mova a classe \nHero\n do arquivo \napp.component.ts\n para seu pr\u00f3prio arquivo \nhero.ts\n, na pasta \nsrc/app\n, com o conte\u00fado:\n\n\n1\n2\n3\n4\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n:\n \nnumber\n;\n\n  \nname\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\n\nDefinir somente uma classe por arquivo \u00e9 uma \nboa pr\u00e1tica\n recomendada pelo guia de estilo do Angular.\n\n\nAgora que definimos a classe \nHero\n em seu pr\u00f3prio arquivo, vamos import\u00e1-la nos componentes \nAppComponent\n e \nHeroDetailComponent\n.\n\n\nAdicione o \nimport\n no topo dos arquivos \napp.component.ts\n e \nhero-detail.component.ts\n:\n\n\n1\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n\n\n\n\nA propriedade \nhero\n \u00e9 uma propriedade de input\n\u00b6\n\n\nAo final desse exerc\u00edcio, o componente \nAppComponent\n ir\u00e1 dizer ao componente filho \nHeroDetailComponent\n qual her\u00f3i deve ser exibido, fazendo um binding entre a sua propriedade \nselectedHero\n e a propriedade \nhero\n do \nHeroDetailComponent\n.\n\n\nEsse binding ter\u00e1 a seguinte forma:\n\n\n1\n<\nhero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\nhero-detail\n>\n\n\n\n\n\n\n\nA express\u00e3o \n[hero]=\"selectedHero\"\n indica que a propriedade \nhero\n \u00e9 o alvo da express\u00e3o. Para isso funcionar, \u00e9 preciso dizer ao Angular que o alvo da express\u00e3o \u00e9 uma propriedade de \ninput\n.\n\n\nPara isso, primeiro importe o s\u00edmbolo \nInput\n da biblioteca \n@angular/core\n no componente \nHeroDetailComponent\n:\n\n\n1\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n\n\n\n\nDepois, inclua o decorador \n@Input()\n \u00e0 propriedade \nhero\n:\n\n\n1\n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n\n\n\n\n\n\u00c9 isso! A propriedade \nhero\n \u00e9 a \u00fanica coisa definida na classe \nHeroDetailComponent\n:\n\n\n1\n2\n3\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n}\n\n\n\n\n\n\n\nTudo que o componente faz \u00e9 receber um objeto do tipo \nHero\n (atrav\u00e9s da sua propriedade de input \nhero\n) e exibe os seus detalhes (fazendo um binding de propriedade no template).\n\n\nEssa \u00e9 a  vers\u00e3o completa do componente \nHeroDetailComponent\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'hero-detail'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-detail.component.html'\n\n\n})\n\n\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n}\n\n\n\n\n\n\n\nDeclarando o \nHeroDetailComponent\n\u00b6\n\n\nTodo componente deve ser declarado em \num (e somente em um)\n m\u00f3dulo Angular para poder ser utilizado.\n\n\nPor isso, abra o arquivo \napp.module.ts\n e importe o novo componente \nHeroDetailComponent\n:\n\n\n1\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail.component'\n;\n\n\n\n\n\n\n\nDepois, adicione o componente ao array \ndeclarations\n do \nAppModule\n:\n\n\n1\n2\n3\n4\ndeclarations\n:\n \n[\n\n  \nAppComponent\n,\n\n  \nHeroDetailComponent\n\n\n],\n\n\n\n\n\n\n\nDe uma forma geral, o array \ndeclarations\n define uma lista dos componentes, pipes e diretivas que pertencem ao m\u00f3dulo. Para que um componente possa ser referenciado por outros componentes, ele precisa ser declarado.\n\n\nNesse momento, o m\u00f3dulo \nAppModule\n declara os dois \u00fanicos componentes da aplica\u00e7\u00e3o: \nAppComponent\n e \nHeroDetailComponent\n.\n\n\nAdicionando o \nHeroDetailComponent\n ao \nAppComponent\n\u00b6\n\n\nAgora que delegamos a responsabilidade de exibir os detalhes de um her\u00f3i ao componente \nHeroDetailComponent\n, precisamos refatorar o \nAppComponent\n para usar o novo componente.\n\n\nLembre-se que definimos o \nselector\n do componente \nHeroDetailComponent\n como \nhero-detail\n. Esse \u00e9 o nome da tag customizada que representa o componente.\n\n\nPor isso, vamos adicionar uma tag \n<hero-detail>\n no template do componente \nAppComponent\n, onde exib\u00edamos os detalhes do her\u00f3i antes da refatora\u00e7\u00e3o.\n\n\nPara coordenar a intera\u00e7\u00e3o entre os componentes, fazemos um binding da propriedade \nselectedHero\n do componente \nAppComponent\n com a propriedade \nhero\n do componente \nHeroDetailComponent\n, como abaixo:\n\n\n1\n<\nhero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\nhero-detail\n>\n\n\n\n\n\n\n\nA vers\u00e3o atualizada do template do \nAppComponent\n (\napp.component.html\n) deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n<\nh1\n>\n{{title}}\n</\nh1\n>\n\n\n\n<\nh2\n>\nMeus her\u00f3is\n</\nh2\n>\n\n\n<\nul\n \nclass\n=\n\"heroes\"\n>\n\n  \n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n\n    \n[\nclass\n.\nselected\n]=\"\nhero \n=\n==\n \nselectedHero\n\"\n\n    \n(\nclick\n)=\"\nonSelect\n(\nhero\n)\"\n>\n\n    \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n {{hero.name}}\n  \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n<\nhero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\nhero-detail\n>\n\n\n\n\n\n\n\nO que mudou?\n\u00b6\n\n\nRevisite a aplica\u00e7\u00e3o. Para o usu\u00e1rio final, nada mudou: a aplica\u00e7\u00e3o continua exibindo uma lista selecion\u00e1vel de her\u00f3is, e toda vez que um her\u00f3i \u00e9 selecionado, os detalhes do her\u00f3i escolhido s\u00e3o exibidos no padr\u00e3o mestre/detalhe.\n\n\nNo entanto, ao refatorar o \nAppComponent\n em dois componentes, n\u00f3s ganhamos os seguintes benef\u00edcios:\n\n\n\n\nSimplificamos o \nAppComponent\n, reduzindo suas responsabilidades.\n\n\nPodemos evoluir o \nHeroDetailComponent\n sem nos preocupar com o \nAppComponent\n.\n\n\nPodemos evoluir o \nAppComponent\n sem nos preocupar com o \nHeroDetailComponent\n.\n\n\nPodemos reusar o \nHeroDetailComponent\n em outros componentes.\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\napp-exemplo/\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 hero.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nCriamos um componente reus\u00e1vel.\n\n\nAprendemos a usar um componente que recebe uma entrada de dados.\n\n\nAprendemos a declarar um componente em um m\u00f3dulo Angular.\n\n\nAprendemos a fazer um binding entre um componente pai e um componente filho.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 06",
            "title": "05 - Componentes"
        },
        {
            "location": "/exercicios/exercicio-05/#exercicio-05",
            "text": "",
            "title": "Exerc\u00edcio 05"
        },
        {
            "location": "/exercicios/exercicio-05/#objetivos",
            "text": "Refatorar a aplica\u00e7\u00e3o para o uso de v\u00e1rios componentes",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-05/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-05/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 4. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-04-master-details/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-05/#criando-um-componente-para-exibir-os-detalhes-de-um-heroi",
            "text": "Nesse momento, o componente  AppComponent  est\u00e1 fazendo tudo!  No come\u00e7o, o componente exibia os detalhes de um her\u00f3i. Agora, j\u00e1 implementa o padr\u00e3o mestre/detalhe de her\u00f3is. No futuro, teremos novos requisitos e funcionalidades.  J\u00e1 d\u00e1 pra perceber que \u00e9 invi\u00e1vel manter tudo em um s\u00f3 componente. Vamos, portanto, refatorar a aplica\u00e7\u00e3o em sub-componentes, de forma que cada componente ter\u00e1 uma \u00fanica responsabilidade. Eventualmente, o componente  AppComponent  ser\u00e1 somente uma \u201ccasca\u201d para os sub-componentes.  Vamos ent\u00e3o come\u00e7ar criando um componente para exibir os detalhes de um her\u00f3i.  A nomenclatura de componentes deve seguir os padr\u00f5es definidos no guia de estilo do Angular:   O nome do componente deve seguir o padr\u00e3o  upper camel case  com o sufixo  Component . Ex:  UpperCamelCaseComponent  ou  FormListComponent .  O nome do arquivo deve seguir o padr\u00e3o  lower dash case  e ter a extens\u00e3o  .component.ts . Ex.:  lower-dash-case.component.ts  ou  form-list.component.ts .   Seguindo esse padr\u00e3o, crie um novo arquivo chamado  hero-detail.component.ts  na pasta  src/app/ . Esse arquivo ir\u00e1 conter a implementa\u00e7\u00e3o do novo componente  HeroDetailComponent .  Comece a implementar o componente com o conte\u00fado abaixo:  1\n2\n3\n4\n5\n6 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'hero-detail' ,  })  export   class   HeroDetailComponent   {   }    Para definir um componente Angular, voc\u00ea sempre ir\u00e1 importar o s\u00edmbolo  Component .  O decorador  @Component  define os metadados do componente. Por exemplo, no c\u00f3digo acima, a propriedade  selector  define que o componente ser\u00e1 identificado por uma tag HTML nova, chamada \"hero-detail\". Ou seja, ser\u00e1 identificado por  <hero-detail> </hero-detail> .  Sempre exporte o componente, porque sempre iremos import\u00e1-lo em algum outro lugar.   DICA: adicione novos prefixos al\u00e9m do  app-*  No arquivo  src/tslint.json  voc\u00ea pode adicionar outros prefixos para suas diretivas e componentes.\nPara n\u00e3o recebermos erros de  lint  com os hero's components, basta modificar as regras do item  \"component-selector\" .\nNo nosso caso, subistitu\u00edmos a  string   \"app\"  pelo  array   [\"app\", \"hero\"]",
            "title": "Criando um componente para exibir os detalhes de um her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-05/#template-do-componente-herodetailcomponent",
            "text": "Seguindo o padr\u00e3o de nomenclatura  lower-dash-case , crie um arquivo HTML que ser\u00e1 o template do componente  HeroDetailComponent . Ou seja, crie o arquivo  hero-detail.component.html  Recorte e cole o conte\u00fado do template do componente  AppComponent  referente ao detalhe do her\u00f3i no novo arquivo criado.  Agora, no arquivo do  hero-detail.component.ts , informe ao componente angular o arquivo de templete deste componente. Ou seja, declare a propriedade  templateUrl  com o valor  ./hero-detail.component.html .  O componente  HeroDetailComponent  possui um her\u00f3i (e n\u00e3o um her\u00f3i \"selecionado\"); por isso, substitua a palavra  selectedHero  por  hero  no template do novo componente ( hero-detail.component.html ).  O novo template ( hero-detail.component.html ) deve ser algo como:  1\n2\n3\n4\n5\n6\n7\n8 < div   * ngIf = \"hero\" > \n     < h2 > {{hero.name}} details! </ h2 > \n     < div > id: {{hero.id}} </ div > \n     < div > \n         < label   for = \"hero-name\" > Nome: </ label > \n         < input   id = \"hero-name\"   placeholder = \"Nome do her\u00f3i\"   [( ngModel )]=\" hero . name \" > \n     </ div >  </ div >    E o decorador do novo component ( hero-detail.component.ts ) deve ser algo como  1\n2\n3\n4 @ Component ({ \n   selector :   'hero-detail' , \n   templateUrl :   './hero-detail.component.html'  })    E agora n\u00e3o deve ter mais nenhuma refer\u00eancia aos detalhes do her\u00f3i no template do  AppComponent .",
            "title": "Template do componente HeroDetailComponent"
        },
        {
            "location": "/exercicios/exercicio-05/#adicionando-a-propriedade-hero",
            "text": "O template do componente  HeroDetailComponent  faz um binding com a propriedade  hero . Por isso, adicione essa propriedade ao componente:  1\n2\n3 export   class   HeroDetailComponent   { \n   hero :   Hero ;   // <-- adicione esta propriedade  }    A propriedade \u00e9 do tipo  Hero . Essa classe ainda est\u00e1 definida no arquivo  app.component.ts . Agora, j\u00e1 s\u00e3o dois componentes que precisam referenciar a classe  Hero .  Por isso, mova a classe  Hero  do arquivo  app.component.ts  para seu pr\u00f3prio arquivo  hero.ts , na pasta  src/app , com o conte\u00fado:  1\n2\n3\n4 export   class   Hero   { \n   id :   number ; \n   name :   string ;  }    Definir somente uma classe por arquivo \u00e9 uma  boa pr\u00e1tica  recomendada pelo guia de estilo do Angular.  Agora que definimos a classe  Hero  em seu pr\u00f3prio arquivo, vamos import\u00e1-la nos componentes  AppComponent  e  HeroDetailComponent .  Adicione o  import  no topo dos arquivos  app.component.ts  e  hero-detail.component.ts :  1 import   {   Hero   }   from   './hero' ;",
            "title": "Adicionando a propriedade hero"
        },
        {
            "location": "/exercicios/exercicio-05/#a-propriedade-hero-e-uma-propriedade-de-input",
            "text": "Ao final desse exerc\u00edcio, o componente  AppComponent  ir\u00e1 dizer ao componente filho  HeroDetailComponent  qual her\u00f3i deve ser exibido, fazendo um binding entre a sua propriedade  selectedHero  e a propriedade  hero  do  HeroDetailComponent .  Esse binding ter\u00e1 a seguinte forma:  1 < hero-detail   [ hero ]=\" selectedHero \" ></ hero-detail >    A express\u00e3o  [hero]=\"selectedHero\"  indica que a propriedade  hero  \u00e9 o alvo da express\u00e3o. Para isso funcionar, \u00e9 preciso dizer ao Angular que o alvo da express\u00e3o \u00e9 uma propriedade de  input .  Para isso, primeiro importe o s\u00edmbolo  Input  da biblioteca  @angular/core  no componente  HeroDetailComponent :  1 import   {   Component ,   Input   }   from   '@angular/core' ;    Depois, inclua o decorador  @Input()  \u00e0 propriedade  hero :  1 @ Input ()   hero :   Hero ;    \u00c9 isso! A propriedade  hero  \u00e9 a \u00fanica coisa definida na classe  HeroDetailComponent :  1\n2\n3 export   class   HeroDetailComponent   { \n   @ Input ()   hero :   Hero ;  }    Tudo que o componente faz \u00e9 receber um objeto do tipo  Hero  (atrav\u00e9s da sua propriedade de input  hero ) e exibe os seus detalhes (fazendo um binding de propriedade no template).  Essa \u00e9 a  vers\u00e3o completa do componente  HeroDetailComponent :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   Hero   }   from   './hero' ;  @ Component ({ \n   selector :   'hero-detail' , \n   templateUrl :   './hero-detail.component.html'  })  export   class   HeroDetailComponent   { \n   @ Input ()   hero :   Hero ;  }",
            "title": "A propriedade hero \u00e9 uma propriedade de input"
        },
        {
            "location": "/exercicios/exercicio-05/#declarando-o-herodetailcomponent",
            "text": "Todo componente deve ser declarado em  um (e somente em um)  m\u00f3dulo Angular para poder ser utilizado.  Por isso, abra o arquivo  app.module.ts  e importe o novo componente  HeroDetailComponent :  1 import   {   HeroDetailComponent   }   from   './hero-detail.component' ;    Depois, adicione o componente ao array  declarations  do  AppModule :  1\n2\n3\n4 declarations :   [ \n   AppComponent , \n   HeroDetailComponent  ],    De uma forma geral, o array  declarations  define uma lista dos componentes, pipes e diretivas que pertencem ao m\u00f3dulo. Para que um componente possa ser referenciado por outros componentes, ele precisa ser declarado.  Nesse momento, o m\u00f3dulo  AppModule  declara os dois \u00fanicos componentes da aplica\u00e7\u00e3o:  AppComponent  e  HeroDetailComponent .",
            "title": "Declarando o HeroDetailComponent"
        },
        {
            "location": "/exercicios/exercicio-05/#adicionando-o-herodetailcomponent-ao-appcomponent",
            "text": "Agora que delegamos a responsabilidade de exibir os detalhes de um her\u00f3i ao componente  HeroDetailComponent , precisamos refatorar o  AppComponent  para usar o novo componente.  Lembre-se que definimos o  selector  do componente  HeroDetailComponent  como  hero-detail . Esse \u00e9 o nome da tag customizada que representa o componente.  Por isso, vamos adicionar uma tag  <hero-detail>  no template do componente  AppComponent , onde exib\u00edamos os detalhes do her\u00f3i antes da refatora\u00e7\u00e3o.  Para coordenar a intera\u00e7\u00e3o entre os componentes, fazemos um binding da propriedade  selectedHero  do componente  AppComponent  com a propriedade  hero  do componente  HeroDetailComponent , como abaixo:  1 < hero-detail   [ hero ]=\" selectedHero \" ></ hero-detail >    A vers\u00e3o atualizada do template do  AppComponent  ( app.component.html ) deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 < h1 > {{title}} </ h1 >  < h2 > Meus her\u00f3is </ h2 >  < ul   class = \"heroes\" > \n   < li   * ngFor = \"let hero of heroes\" \n     [ class . selected ]=\" hero  = ==   selectedHero \" \n     ( click )=\" onSelect ( hero )\" > \n     < span   class = \"badge\" > {{hero.id}} </ span >  {{hero.name}}\n   </ li >  </ ul >  < hero-detail   [ hero ]=\" selectedHero \" ></ hero-detail >",
            "title": "Adicionando o HeroDetailComponent ao AppComponent"
        },
        {
            "location": "/exercicios/exercicio-05/#o-que-mudou",
            "text": "Revisite a aplica\u00e7\u00e3o. Para o usu\u00e1rio final, nada mudou: a aplica\u00e7\u00e3o continua exibindo uma lista selecion\u00e1vel de her\u00f3is, e toda vez que um her\u00f3i \u00e9 selecionado, os detalhes do her\u00f3i escolhido s\u00e3o exibidos no padr\u00e3o mestre/detalhe.  No entanto, ao refatorar o  AppComponent  em dois componentes, n\u00f3s ganhamos os seguintes benef\u00edcios:   Simplificamos o  AppComponent , reduzindo suas responsabilidades.  Podemos evoluir o  HeroDetailComponent  sem nos preocupar com o  AppComponent .  Podemos evoluir o  AppComponent  sem nos preocupar com o  HeroDetailComponent .  Podemos reusar o  HeroDetailComponent  em outros componentes.",
            "title": "O que mudou?"
        },
        {
            "location": "/exercicios/exercicio-05/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 app-exemplo/\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 hero.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-05/#resumo",
            "text": "Criamos um componente reus\u00e1vel.  Aprendemos a usar um componente que recebe uma entrada de dados.  Aprendemos a declarar um componente em um m\u00f3dulo Angular.  Aprendemos a fazer um binding entre um componente pai e um componente filho.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-05/#proximo-passo",
            "text": "Exerc\u00edcio 06",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-06/",
            "text": "Exerc\u00edcio 06\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nCriar um servi\u00e7o angular para gerenciar as informa\u00e7\u00f5es dos her\u00f3is.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 5. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-05-master-details-refactored/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nCriando um servi\u00e7o de her\u00f3is\n\u00b6\n\n\nNa medida em que a aplica\u00e7\u00e3o do \nTour of Heroes\n evolui, novos componentes v\u00e3o usar as informa\u00e7\u00f5es a respeito dos her\u00f3is\n\n\nAo inv\u00e9s de copiar e colar o mesmo c\u00f3digo, vamos criar um servi\u00e7o reutiliz\u00e1vel, que ser\u00e1 injetado nos componentes.\n\n\nSeparar os dados em servi\u00e7os \u00e9 uma \nboa pr\u00e1tica\n, j\u00e1 que deixamos os componentes mais limpos e focados na vis\u00e3o. Al\u00e9m disso, fica mais f\u00e1cil testar os componentes, j\u00e1 que podemos usar \nmocks\n dos servi\u00e7os e focar nos testes unit\u00e1rios do componente propriamente dito.\n\n\nCriando o \nHeroService\n\u00b6\n\n\nNesse momento, o \nAppComponent\n define um \nmock\n de her\u00f3is para exibi\u00e7\u00e3o. No entanto, definir os her\u00f3is n\u00e3o deveria ser uma responsabilidade desse componente.\n\n\nPor isso, crie um arquivo \nhero.service.ts\n na pasta \nsrc/app\n com o conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n// src/app/hero.service.ts\n\n\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nInjectable\n({\n\n  \nprovidedIn\n:\n \n'root'\n\n\n})\n\n\nexport\n \nclass\n \nHeroService\n \n{\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n}\n\n\n\n\n\n\n\nA nomenclatura do servi\u00e7o e do arquivo devem seguir a conven\u00e7\u00e3o do Angular:\n\n\n\n\nO nome do arquivo deve seguir o padr\u00e3o \nlower dash case\n com o sufixo \n.service.ts\n.\n\n\nO nome da classe deve seguir o padr\u00e3o \nupper camel case\n com o sufixo \nService\n.\n\n\n\n\nPor exemplo, o nome do arquivo para o servi\u00e7o \nSpecialSuperHeroService\n seria \nspecial-super-hero.service.ts\n.\n\n\nO decorador \nInjectable\n\u00b6\n\n\nNote que importamos o s\u00edmbolo \nInjectable\n da biblioteca \n@angular/core\n, e o usamos como um decorador da classe \nHeroService\n.\n\n\nO decorador \n@Injectable()\n \u00e9 um metadado do servi\u00e7o. Esse metadado especifica que o Angular pode usar a classe \nHeroService\n atrav\u00e9s do injetor de depend\u00eancias. \u00c9 opcional em alguns casos, como no caso de n\u00e3o haver depend\u00eancias no servi\u00e7o.\n\n\nApesar de o \nHeroService\n n\u00e3o possuir nenhuma depend\u00eancia nesse momento, \u00e9 uma boa pr\u00e1tica declarar o decorador \n@Injectable()\n desde o come\u00e7o.\n\n\nATEN\u00c7\u00c3O\n: A propriedade \nprovidedIn: 'root'\n \u00e9 uma novidade do \nangular 6\n. Ela possibilita registrarmos o servi\u00e7o como \"global\" sem precisar declarar no m\u00f3dulo principal (Ex.: \nAppModule\n).\n\n\nRecuperando os dados dos her\u00f3is\n\u00b6\n\n\nRemova o construtor do servi\u00e7o (n\u00e3o vamos precisar mexer nele agora) e adicione um \nstub\n para o m\u00e9todo \ngetHeroes()\n, ficando assim:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n// src/app/hero.service.ts\n\n\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nInjectable\n({\n\n  \nprovidedIn\n:\n \n'root'\n\n\n})\n\n\nexport\n \nclass\n \nHeroService\n \n{\n\n  \ngetHeroes\n()\n:\n \nvoid\n \n{}\n\n\n}\n\n\n\n\n\n\n\nO servi\u00e7o poderia recuperar a lista de her\u00f3is de qualquer lugar: um web service, o \nLocalStorage\n do navegador, um data source mock e etc..\n\n\nAo remover a responsabilidade de acesso aos dados dos componentes para um servi\u00e7o, podemos mudar a forma de recuperar os dados sem de fato mexer nos componentes que utilizam o servi\u00e7o.\n\n\nIsolando os dados para o servi\u00e7o\n\u00b6\n\n\nMova o array \nHEROES\n do \napp.component.ts\n para um novo arquivo \nmock-heroes.ts\n na pasta \nsrc/app\n.\n\n\nO conte\u00fado do novo arquivo dever\u00e1 ser como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\nexport\n \nconst\n \nHEROES\n:\n \nHero\n[]\n \n=\n \n[\n\n  \n{\n \nid\n:\n \n11\n,\n \nname\n:\n \n'Spider-Man'\n \n},\n\n  \n{\n \nid\n:\n \n12\n,\n \nname\n:\n \n'Captain America'\n \n},\n\n  \n{\n \nid\n:\n \n13\n,\n \nname\n:\n \n'Hulk'\n \n},\n\n  \n{\n \nid\n:\n \n14\n,\n \nname\n:\n \n'Thor'\n \n},\n\n  \n{\n \nid\n:\n \n15\n,\n \nname\n:\n \n'Iron Man'\n \n},\n\n  \n{\n \nid\n:\n \n16\n,\n \nname\n:\n \n'Luke Cage'\n \n},\n\n  \n{\n \nid\n:\n \n17\n,\n \nname\n:\n \n'Doctor Strange'\n \n},\n\n  \n{\n \nid\n:\n \n18\n,\n \nname\n:\n \n'Daredevil'\n \n},\n\n  \n{\n \nid\n:\n \n19\n,\n \nname\n:\n \n'Ant-Man'\n \n},\n\n  \n{\n \nid\n:\n \n20\n,\n \nname\n:\n \n'Wolverine'\n \n}\n\n\n];\n\n\n\n\n\n\n\nPerceba que importamos a classe \nHero\n, j\u00e1 que o array usa esse tipo.\n\n\nNote tamb\u00e9m que exportamos o array, para que ele possa ser utilizado em outros lugares (iremos utiliz\u00e1-lo no \nHeroService\n).\n\n\nNo \napp.component.ts\n, remova a inicializa\u00e7\u00e3o da propriedade \nheroes\ne defina seu tipo:\n\n\n1\nheroes\n:\n \nHero\n[];\n\n\n\n\n\n\n\nRetornando os her\u00f3is mock\n\u00b6\n\n\nDe volta ao servi\u00e7o \nHeroService\n, importe o array \nHEROES\n e o retorne no m\u00e9todo \ngetHeroes()\n.\n\n\nNesse momento, o \nHeroService\n deve ter o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\nimport\n \n{\n \nHEROES\n \n}\n \nfrom\n \n'./mock-heroes'\n;\n\n\n\n@\nInjectable\n({\n\n  \nprovidedIn\n:\n \n'root'\n\n\n})\n\n\nexport\n \nclass\n \nHeroService\n \n{\n\n  \ngetHeroes\n()\n:\n \nHero\n[]\n \n{\n\n    \nreturn\n \nHEROES\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nImportando o \nHeroService\n\u00b6\n\n\n\n\nATEN\u00c7\u00c3O: Angular 6\n\n\nAgora no Angular 6, os servi\u00e7os com a propriedade \nprovidedIn: 'root'\n n\u00e3o precisam ser importadas nos m\u00f3dulos.\nQualquer d\u00favida, \npergunte\n!\n\n\n\n\nN\u00e3o crie uma inst\u00e2ncia do \nHeroService\n com \nnew\n!\n\u00b6\n\n\nPor se tratar uma classe, poder\u00edamos criar uma nova inst\u00e2ncia do \nHeroService\n com \nnew\n, conforme o exemplo abaixo:\n\n\n1\nheroService\n \n=\n \nnew\n \nHeroService\n();\n \n// N\u00c3O fa\u00e7a isso!\n\n\n\n\n\n\n\nNo entanto, essa n\u00e3o \u00e9 a op\u00e7\u00e3o ideal pelos seguintes motivos:\n\n\n\n\nDessa forma, o componente precisaria saber como criar um \nHeroService\n. Se o construtor do servi\u00e7o mudar, voc\u00ea precisa modificar todos os componentes que o usam.\n\n\nToda vez que voc\u00ea usa o \nnew\n, uma nova inst\u00e2ncia \u00e9 criada. Isso dificultaria o compartilhamento de um cache de her\u00f3is, por exemplo.\n\n\nVoc\u00ea est\u00e1 se \"prendendo\" a uma implementa\u00e7\u00e3o espec\u00edfica de um \nHeroService\n. Trocar a implementa\u00e7\u00e3o do servi\u00e7o (usar um servi\u00e7o mock para testes unit\u00e1rios, por exemplo) \u00e9 mais custoso.\n\n\n\n\nInjetando o \nHeroService\n\u00b6\n\n\nAo inv\u00e9s de instanciar o servi\u00e7o com o \nnew\n, vamos injetar o \nHeroService\n no componente.\n\n\nPara isso, adicione o seguinte contrutor no \nAppComponent\n:\n\n\n1\nconstructor\n(\nprivate\n \nheroService\n:\n \nHeroService\n)\n \n{\n \n}\n\n\n\n\n\n\n\nApesar de o construtor em si n\u00e3o fazer nada, o par\u00e2metro \nheroService\n est\u00e1 simultaneamente definindo uma propriedade privada chamada \nheroService\n e identificando essa propriedade como um ponto de inje\u00e7\u00e3o de um \nHeroService\n.\n\n\nDessa forma, o Angular sabe que deve fornecer uma inst\u00e2ncia do servi\u00e7o \nHeroService\n sempre que criar uma inst\u00e2ncia do componente \nAppComponent\n.\n\n\nChamando o \ngetHeroes()\n no \nAppComponent\n\u00b6\n\n\nAgora que o \nheroService\n \u00e9 uma propriedade privada do \nAppComponent\n, podemos recuperar a lista de her\u00f3is simplesmente chamando o m\u00e9todo do servi\u00e7o:\n\n\n1\nthis\n.\nheroes\n \n=\n \nthis\n.\nheroService\n.\ngetHeroes\n();\n\n\n\n\n\n\n\nPortanto, crie agora um novo m\u00e9todo \ngetHeroes()\n para encapsular essa chamada no componente \nAppComponent\n:\n\n\n1\n2\n3\ngetHeroes\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroes\n \n=\n \nthis\n.\nheroService\n.\ngetHeroes\n();\n\n\n}\n\n\n\n\n\n\n\nO m\u00e9todo \nngOnInit\n\u00b6\n\n\nO componente \nAppComponent\n j\u00e1 consegue recuperar a lista de her\u00f3is usando o servi\u00e7o \nHeroService\n. Mas quando devemos recuperar os dados?\n\n\nComo queremos que a lista de her\u00f3is seja exibida assim que o componente seja carregado, poder\u00edamos fazer a chamada ao m\u00e9todo \ngetHeroes()\n dentro do construtor do \nAppComponent\n. No entanto, sabemos que um construtor n\u00e3o deve conter uma l\u00f3gica complexa e n\u00e3o deve depender de servi\u00e7os externos. O construtor deve ser usado para inicializa\u00e7\u00f5es simples, como setar o valor de propriedades privadas a partir dos par\u00e2metros informados.\n\n\nPara chamar o \ngetHeroes()\n, ent\u00e3o, voc\u00ea pode usar o m\u00e9todo \nngOnInit\n.\n\n\nO \nngOnInit\n \u00e9 um m\u00e9todo do \nlifecycle hook\n do Angular. Esses m\u00e9todos do \nlifecycle hook\n s\u00e3o m\u00e9todos especiais que permitem que a aplica\u00e7\u00e3o atue em momentos cr\u00edticos no ciclo de vida de um componente (na cria\u00e7\u00e3o, ap\u00f3s cada mudan\u00e7a e na destrui\u00e7\u00e3o do componente).\n\n\nCada momento \u00e9 representado por uma interface com um \u00fanico m\u00e9todo. Quando o componente implementa uma dessas interfaces, o Angular chama o m\u00e9todo no momento apropriado.\n\n\nPara implementar o m\u00e9todo \nngOnInit\n, voc\u00ea deve seguir a seguinte estrutura b\u00e1sica:\n\n\n1\n2\n3\n4\n5\n6\nimport\n \n{\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n \n// (1) importe o s\u00edmbolo \"OnInit\"\n\n\n\nexport\n \nclass\n \nAppComponent\n \nimplements\n \nOnInit\n \n{\n  \n// (2) implemente a interface \"OnInit\"\n\n  \nngOnInit\n()\n:\n \nvoid\n \n{\n  \n// (3) adicione o m\u00e9todo \"ngOnInit()\"\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nDe volta ao \nAppComponent\n, adicione a implementa\u00e7\u00e3o da interface \nOnInit\n da declara\u00e7\u00e3o da classe:\n\n\n1\nexport\n \nclass\n \nAppComponent\n \nimplements\n \nOnInit\n \n{}\n\n\n\n\n\n\n\nDepois disso, implemente o m\u00e9todo \nngOnInit()\n com a l\u00f3gica de inicializa\u00e7\u00e3o da lista de her\u00f3is. O Angular ir\u00e1 chamar esse m\u00e9todo no momento apropriado:\n\n\n1\n2\n3\nngOnInit\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\ngetHeroes\n();\n\n\n}\n\n\n\n\n\n\n\n\n\n\nServi\u00e7os ass\u00edncronos\n\u00b6\n\n\nNesse momento, o \nHeroService\n retorna uma lista de her\u00f3is mock imediatamente, e a assinatura do m\u00e9todo \ngetHeroes()\n \u00e9 s\u00edncrona.\n\n\nNa vida real, as informa\u00e7\u00f5es a respeito dos her\u00f3is ser\u00e3o recuperadas a partir de uma API em um servidor remoto.\n\n\nNesse cen\u00e1rio, \u00e9 importante que os usu\u00e1rios n\u00e3o esperem pela resposta do servidor. Por isso, voc\u00ea n\u00e3o deve bloquear a interface durante a espera pela resposta.\n\n\nPara coordenar a vis\u00e3o com a resposta do servidor remoto, vamos usar uma \nPromise\n (ES2015). Basicamente, uma \nPromise\n \u00e9 uma t\u00e9cnica ass\u00edncrona que representa a promessa de que uma fun\u00e7\u00e3o \ncallback\n ser\u00e1 chamada quando o resultado estiverem prontos. Voc\u00ea solicita a um servi\u00e7o ass\u00edncrono a execu\u00e7\u00e3o de um trabalho e d\u00e1 a ele uma fun\u00e7\u00e3o callback. O servi\u00e7o faz o trabalho e eventualmente chama a fun\u00e7\u00e3o callback com os resultados (ou um erro).\n\n\nO \nHeroService\n faz uma promessa\n\u00b6\n\n\nAtualize o m\u00e9todo \ngetHeroes()\n do servi\u00e7o \nHeroService\n para devolver uma \nPromise\n:\n\n\n1\n2\n3\ngetHeroes\n()\n:\n \nPromise\n<\nHero\n[]\n>\n \n{\n\n  \nreturn\n \nPromise\n.\nresolve\n(\nHEROES\n);\n\n\n}\n\n\n\n\n\n\n\nPerceba que ainda estamos usando os dados mock. Nessa simula\u00e7\u00e3o, o nosso servidor remoto tem lat\u00eancia zero e devolve uma promessa com resolu\u00e7\u00e3o imediata do array \nHEROES\n.\n\n\nRespondendo \u00e0 promessa\n\u00b6\n\n\nComo consequ\u00eancia da mudan\u00e7a no \nHeroService\n, devemos modificar o m\u00e9todo \ngetHeroes\n do \nAppComponent\n, j\u00e1 que o retorno n\u00e3o \u00e9 mais um array de her\u00f3is, mas sim uma promessa.\n\n\nA vers\u00e3o anterior do m\u00e9todo era algo como:\n\n\n1\n2\n3\ngetHeroes\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroes\n \n=\n \nthis\n.\nheroService\n.\ngetHeroes\n();\n\n\n}\n\n\n\n\n\n\n\nA nova vers\u00e3o do m\u00e9todo deve agir quando a promessa responder, isto \u00e9, devemos passar uma fun\u00e7\u00e3o de callback como um argumento do m\u00e9todo \nthen()\n da \nPromise\n:\n\n\n1\n2\n3\ngetHeroes\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroService\n.\ngetHeroes\n().\nthen\n(\nheroes\n \n=>\n \nthis\n.\nheroes\n \n=\n \nheroes\n);\n\n\n}\n\n\n\n\n\n\n\nA fun\u00e7\u00e3o callback est\u00e1 usando a sintaxe \nArrow function\n (ES2015), que \u00e9 mais sucinta que a express\u00e3o \nfunction\n equivalente e ainda permite o uso do \nthis\n.\n\n\nEssa fun\u00e7\u00e3o callback seta a propriedade \nheroes\n do componente \nAppComponent\n com o valor do array retornado pelo servi\u00e7o \nHeroService\n.\n\n\nVolte para o navegar e verifique que a aplica\u00e7\u00e3o est\u00e1 rodando normalmente e respondendo \u00e0 sele\u00e7\u00e3o do usu\u00e1rio como anteriormente.\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\napp-exemplo/\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero.service.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mock-heroes.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 angular.json\n\u251c\u2500\u2500 package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nCriamos uma classe de servi\u00e7o que pode ser reutilizada por v\u00e1rios componentes.\n\n\nUsamos o ngOnInit para inicializar a lista de her\u00f3is.\n\n\nProjetamos o servi\u00e7o para retornar uma promessa (mesmo que ainda usando mocks).\n\n\nProjetamos o componente para agir no retorno dessa promessa.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 07",
            "title": "06 - Servi\u00e7os"
        },
        {
            "location": "/exercicios/exercicio-06/#exercicio-06",
            "text": "",
            "title": "Exerc\u00edcio 06"
        },
        {
            "location": "/exercicios/exercicio-06/#objetivos",
            "text": "Criar um servi\u00e7o angular para gerenciar as informa\u00e7\u00f5es dos her\u00f3is.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-06/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-06/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 5. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-05-master-details-refactored/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-06/#criando-um-servico-de-herois",
            "text": "Na medida em que a aplica\u00e7\u00e3o do  Tour of Heroes  evolui, novos componentes v\u00e3o usar as informa\u00e7\u00f5es a respeito dos her\u00f3is  Ao inv\u00e9s de copiar e colar o mesmo c\u00f3digo, vamos criar um servi\u00e7o reutiliz\u00e1vel, que ser\u00e1 injetado nos componentes.  Separar os dados em servi\u00e7os \u00e9 uma  boa pr\u00e1tica , j\u00e1 que deixamos os componentes mais limpos e focados na vis\u00e3o. Al\u00e9m disso, fica mais f\u00e1cil testar os componentes, j\u00e1 que podemos usar  mocks  dos servi\u00e7os e focar nos testes unit\u00e1rios do componente propriamente dito.",
            "title": "Criando um servi\u00e7o de her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-06/#criando-o-heroservice",
            "text": "Nesse momento, o  AppComponent  define um  mock  de her\u00f3is para exibi\u00e7\u00e3o. No entanto, definir os her\u00f3is n\u00e3o deveria ser uma responsabilidade desse componente.  Por isso, crie um arquivo  hero.service.ts  na pasta  src/app  com o conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 // src/app/hero.service.ts  import   {   Injectable   }   from   '@angular/core' ;  @ Injectable ({ \n   providedIn :   'root'  })  export   class   HeroService   { \n\n   constructor ()   {   }  }    A nomenclatura do servi\u00e7o e do arquivo devem seguir a conven\u00e7\u00e3o do Angular:   O nome do arquivo deve seguir o padr\u00e3o  lower dash case  com o sufixo  .service.ts .  O nome da classe deve seguir o padr\u00e3o  upper camel case  com o sufixo  Service .   Por exemplo, o nome do arquivo para o servi\u00e7o  SpecialSuperHeroService  seria  special-super-hero.service.ts .",
            "title": "Criando o HeroService"
        },
        {
            "location": "/exercicios/exercicio-06/#o-decorador-injectable",
            "text": "Note que importamos o s\u00edmbolo  Injectable  da biblioteca  @angular/core , e o usamos como um decorador da classe  HeroService .  O decorador  @Injectable()  \u00e9 um metadado do servi\u00e7o. Esse metadado especifica que o Angular pode usar a classe  HeroService  atrav\u00e9s do injetor de depend\u00eancias. \u00c9 opcional em alguns casos, como no caso de n\u00e3o haver depend\u00eancias no servi\u00e7o.  Apesar de o  HeroService  n\u00e3o possuir nenhuma depend\u00eancia nesse momento, \u00e9 uma boa pr\u00e1tica declarar o decorador  @Injectable()  desde o come\u00e7o.  ATEN\u00c7\u00c3O : A propriedade  providedIn: 'root'  \u00e9 uma novidade do  angular 6 . Ela possibilita registrarmos o servi\u00e7o como \"global\" sem precisar declarar no m\u00f3dulo principal (Ex.:  AppModule ).",
            "title": "O decorador Injectable"
        },
        {
            "location": "/exercicios/exercicio-06/#recuperando-os-dados-dos-herois",
            "text": "Remova o construtor do servi\u00e7o (n\u00e3o vamos precisar mexer nele agora) e adicione um  stub  para o m\u00e9todo  getHeroes() , ficando assim:  1\n2\n3\n4\n5\n6\n7\n8\n9 // src/app/hero.service.ts  import   {   Injectable   }   from   '@angular/core' ;  @ Injectable ({ \n   providedIn :   'root'  })  export   class   HeroService   { \n   getHeroes () :   void   {}  }    O servi\u00e7o poderia recuperar a lista de her\u00f3is de qualquer lugar: um web service, o  LocalStorage  do navegador, um data source mock e etc..  Ao remover a responsabilidade de acesso aos dados dos componentes para um servi\u00e7o, podemos mudar a forma de recuperar os dados sem de fato mexer nos componentes que utilizam o servi\u00e7o.",
            "title": "Recuperando os dados dos her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-06/#isolando-os-dados-para-o-servico",
            "text": "Mova o array  HEROES  do  app.component.ts  para um novo arquivo  mock-heroes.ts  na pasta  src/app .  O conte\u00fado do novo arquivo dever\u00e1 ser como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   {   Hero   }   from   './hero' ;  export   const   HEROES :   Hero []   =   [ \n   {   id :   11 ,   name :   'Spider-Man'   }, \n   {   id :   12 ,   name :   'Captain America'   }, \n   {   id :   13 ,   name :   'Hulk'   }, \n   {   id :   14 ,   name :   'Thor'   }, \n   {   id :   15 ,   name :   'Iron Man'   }, \n   {   id :   16 ,   name :   'Luke Cage'   }, \n   {   id :   17 ,   name :   'Doctor Strange'   }, \n   {   id :   18 ,   name :   'Daredevil'   }, \n   {   id :   19 ,   name :   'Ant-Man'   }, \n   {   id :   20 ,   name :   'Wolverine'   }  ];    Perceba que importamos a classe  Hero , j\u00e1 que o array usa esse tipo.  Note tamb\u00e9m que exportamos o array, para que ele possa ser utilizado em outros lugares (iremos utiliz\u00e1-lo no  HeroService ).  No  app.component.ts , remova a inicializa\u00e7\u00e3o da propriedade  heroes e defina seu tipo:  1 heroes :   Hero [];",
            "title": "Isolando os dados para o servi\u00e7o"
        },
        {
            "location": "/exercicios/exercicio-06/#retornando-os-herois-mock",
            "text": "De volta ao servi\u00e7o  HeroService , importe o array  HEROES  e o retorne no m\u00e9todo  getHeroes() .  Nesse momento, o  HeroService  deve ter o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   {   Injectable   }   from   '@angular/core' ;  import   {   Hero   }   from   './hero' ;  import   {   HEROES   }   from   './mock-heroes' ;  @ Injectable ({ \n   providedIn :   'root'  })  export   class   HeroService   { \n   getHeroes () :   Hero []   { \n     return   HEROES ; \n   }  }",
            "title": "Retornando os her\u00f3is mock"
        },
        {
            "location": "/exercicios/exercicio-06/#importando-o-heroservice",
            "text": "ATEN\u00c7\u00c3O: Angular 6  Agora no Angular 6, os servi\u00e7os com a propriedade  providedIn: 'root'  n\u00e3o precisam ser importadas nos m\u00f3dulos.\nQualquer d\u00favida,  pergunte !",
            "title": "Importando o HeroService"
        },
        {
            "location": "/exercicios/exercicio-06/#nao-crie-uma-instancia-do-heroservice-com-new",
            "text": "Por se tratar uma classe, poder\u00edamos criar uma nova inst\u00e2ncia do  HeroService  com  new , conforme o exemplo abaixo:  1 heroService   =   new   HeroService ();   // N\u00c3O fa\u00e7a isso!    No entanto, essa n\u00e3o \u00e9 a op\u00e7\u00e3o ideal pelos seguintes motivos:   Dessa forma, o componente precisaria saber como criar um  HeroService . Se o construtor do servi\u00e7o mudar, voc\u00ea precisa modificar todos os componentes que o usam.  Toda vez que voc\u00ea usa o  new , uma nova inst\u00e2ncia \u00e9 criada. Isso dificultaria o compartilhamento de um cache de her\u00f3is, por exemplo.  Voc\u00ea est\u00e1 se \"prendendo\" a uma implementa\u00e7\u00e3o espec\u00edfica de um  HeroService . Trocar a implementa\u00e7\u00e3o do servi\u00e7o (usar um servi\u00e7o mock para testes unit\u00e1rios, por exemplo) \u00e9 mais custoso.",
            "title": "N\u00e3o crie uma inst\u00e2ncia do HeroService com new!"
        },
        {
            "location": "/exercicios/exercicio-06/#injetando-o-heroservice",
            "text": "Ao inv\u00e9s de instanciar o servi\u00e7o com o  new , vamos injetar o  HeroService  no componente.  Para isso, adicione o seguinte contrutor no  AppComponent :  1 constructor ( private   heroService :   HeroService )   {   }    Apesar de o construtor em si n\u00e3o fazer nada, o par\u00e2metro  heroService  est\u00e1 simultaneamente definindo uma propriedade privada chamada  heroService  e identificando essa propriedade como um ponto de inje\u00e7\u00e3o de um  HeroService .  Dessa forma, o Angular sabe que deve fornecer uma inst\u00e2ncia do servi\u00e7o  HeroService  sempre que criar uma inst\u00e2ncia do componente  AppComponent .",
            "title": "Injetando o HeroService"
        },
        {
            "location": "/exercicios/exercicio-06/#chamando-o-getheroes-no-appcomponent",
            "text": "Agora que o  heroService  \u00e9 uma propriedade privada do  AppComponent , podemos recuperar a lista de her\u00f3is simplesmente chamando o m\u00e9todo do servi\u00e7o:  1 this . heroes   =   this . heroService . getHeroes ();    Portanto, crie agora um novo m\u00e9todo  getHeroes()  para encapsular essa chamada no componente  AppComponent :  1\n2\n3 getHeroes () :   void   { \n   this . heroes   =   this . heroService . getHeroes ();  }",
            "title": "Chamando o getHeroes() no AppComponent"
        },
        {
            "location": "/exercicios/exercicio-06/#o-metodo-ngoninit",
            "text": "O componente  AppComponent  j\u00e1 consegue recuperar a lista de her\u00f3is usando o servi\u00e7o  HeroService . Mas quando devemos recuperar os dados?  Como queremos que a lista de her\u00f3is seja exibida assim que o componente seja carregado, poder\u00edamos fazer a chamada ao m\u00e9todo  getHeroes()  dentro do construtor do  AppComponent . No entanto, sabemos que um construtor n\u00e3o deve conter uma l\u00f3gica complexa e n\u00e3o deve depender de servi\u00e7os externos. O construtor deve ser usado para inicializa\u00e7\u00f5es simples, como setar o valor de propriedades privadas a partir dos par\u00e2metros informados.  Para chamar o  getHeroes() , ent\u00e3o, voc\u00ea pode usar o m\u00e9todo  ngOnInit .  O  ngOnInit  \u00e9 um m\u00e9todo do  lifecycle hook  do Angular. Esses m\u00e9todos do  lifecycle hook  s\u00e3o m\u00e9todos especiais que permitem que a aplica\u00e7\u00e3o atue em momentos cr\u00edticos no ciclo de vida de um componente (na cria\u00e7\u00e3o, ap\u00f3s cada mudan\u00e7a e na destrui\u00e7\u00e3o do componente).  Cada momento \u00e9 representado por uma interface com um \u00fanico m\u00e9todo. Quando o componente implementa uma dessas interfaces, o Angular chama o m\u00e9todo no momento apropriado.  Para implementar o m\u00e9todo  ngOnInit , voc\u00ea deve seguir a seguinte estrutura b\u00e1sica:  1\n2\n3\n4\n5\n6 import   {   OnInit   }   from   '@angular/core' ;   // (1) importe o s\u00edmbolo \"OnInit\"  export   class   AppComponent   implements   OnInit   {    // (2) implemente a interface \"OnInit\" \n   ngOnInit () :   void   {    // (3) adicione o m\u00e9todo \"ngOnInit()\" \n   }  }    De volta ao  AppComponent , adicione a implementa\u00e7\u00e3o da interface  OnInit  da declara\u00e7\u00e3o da classe:  1 export   class   AppComponent   implements   OnInit   {}    Depois disso, implemente o m\u00e9todo  ngOnInit()  com a l\u00f3gica de inicializa\u00e7\u00e3o da lista de her\u00f3is. O Angular ir\u00e1 chamar esse m\u00e9todo no momento apropriado:  1\n2\n3 ngOnInit () :   void   { \n   this . getHeroes ();  }",
            "title": "O m\u00e9todo ngOnInit"
        },
        {
            "location": "/exercicios/exercicio-06/#servicos-assincronos",
            "text": "Nesse momento, o  HeroService  retorna uma lista de her\u00f3is mock imediatamente, e a assinatura do m\u00e9todo  getHeroes()  \u00e9 s\u00edncrona.  Na vida real, as informa\u00e7\u00f5es a respeito dos her\u00f3is ser\u00e3o recuperadas a partir de uma API em um servidor remoto.  Nesse cen\u00e1rio, \u00e9 importante que os usu\u00e1rios n\u00e3o esperem pela resposta do servidor. Por isso, voc\u00ea n\u00e3o deve bloquear a interface durante a espera pela resposta.  Para coordenar a vis\u00e3o com a resposta do servidor remoto, vamos usar uma  Promise  (ES2015). Basicamente, uma  Promise  \u00e9 uma t\u00e9cnica ass\u00edncrona que representa a promessa de que uma fun\u00e7\u00e3o  callback  ser\u00e1 chamada quando o resultado estiverem prontos. Voc\u00ea solicita a um servi\u00e7o ass\u00edncrono a execu\u00e7\u00e3o de um trabalho e d\u00e1 a ele uma fun\u00e7\u00e3o callback. O servi\u00e7o faz o trabalho e eventualmente chama a fun\u00e7\u00e3o callback com os resultados (ou um erro).",
            "title": "Servi\u00e7os ass\u00edncronos"
        },
        {
            "location": "/exercicios/exercicio-06/#o-heroservice-faz-uma-promessa",
            "text": "Atualize o m\u00e9todo  getHeroes()  do servi\u00e7o  HeroService  para devolver uma  Promise :  1\n2\n3 getHeroes () :   Promise < Hero [] >   { \n   return   Promise . resolve ( HEROES );  }    Perceba que ainda estamos usando os dados mock. Nessa simula\u00e7\u00e3o, o nosso servidor remoto tem lat\u00eancia zero e devolve uma promessa com resolu\u00e7\u00e3o imediata do array  HEROES .",
            "title": "O HeroService faz uma promessa"
        },
        {
            "location": "/exercicios/exercicio-06/#respondendo-a-promessa",
            "text": "Como consequ\u00eancia da mudan\u00e7a no  HeroService , devemos modificar o m\u00e9todo  getHeroes  do  AppComponent , j\u00e1 que o retorno n\u00e3o \u00e9 mais um array de her\u00f3is, mas sim uma promessa.  A vers\u00e3o anterior do m\u00e9todo era algo como:  1\n2\n3 getHeroes () :   void   { \n   this . heroes   =   this . heroService . getHeroes ();  }    A nova vers\u00e3o do m\u00e9todo deve agir quando a promessa responder, isto \u00e9, devemos passar uma fun\u00e7\u00e3o de callback como um argumento do m\u00e9todo  then()  da  Promise :  1\n2\n3 getHeroes () :   void   { \n   this . heroService . getHeroes (). then ( heroes   =>   this . heroes   =   heroes );  }    A fun\u00e7\u00e3o callback est\u00e1 usando a sintaxe  Arrow function  (ES2015), que \u00e9 mais sucinta que a express\u00e3o  function  equivalente e ainda permite o uso do  this .  Essa fun\u00e7\u00e3o callback seta a propriedade  heroes  do componente  AppComponent  com o valor do array retornado pelo servi\u00e7o  HeroService .  Volte para o navegar e verifique que a aplica\u00e7\u00e3o est\u00e1 rodando normalmente e respondendo \u00e0 sele\u00e7\u00e3o do usu\u00e1rio como anteriormente.",
            "title": "Respondendo \u00e0 promessa"
        },
        {
            "location": "/exercicios/exercicio-06/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 app-exemplo/\n\u251c\u2500\u2500 node_modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 src/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app/\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.spec.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 app.module.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero-detail.component.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero.service.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hero.ts\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mock-heroes.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 styles.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 angular.json\n\u251c\u2500\u2500 package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-06/#resumo",
            "text": "Criamos uma classe de servi\u00e7o que pode ser reutilizada por v\u00e1rios componentes.  Usamos o ngOnInit para inicializar a lista de her\u00f3is.  Projetamos o servi\u00e7o para retornar uma promessa (mesmo que ainda usando mocks).  Projetamos o componente para agir no retorno dessa promessa.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-06/#proximo-passo",
            "text": "Exerc\u00edcio 07",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-07/",
            "text": "Exerc\u00edcio 07\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nUsar o componente de roteamento e aprender a navegar entre as vis\u00f5es\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n60 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 6. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-06-services/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nPlano de a\u00e7\u00e3o\n\u00b6\n\n\nO \nTour of Heroes\n est\u00e1 fazendo um enorme sucesso! E, com o sucesso, v\u00eam as mudan\u00e7as. Os \nnovos requisitos\n para a nossa aplica\u00e7\u00e3o s\u00e3o:\n\n\n\n\nAdicionar uma p\u00e1gina de \nDashboard\n, que deve mostrar os principais her\u00f3is do Tour of Heroes.\n\n\nDeve ser poss\u00edvel navegar entre a vis\u00e3o da lista de her\u00f3is e o \nDashboard\n.\n\n\nAo se clicar no nome do her\u00f3i, devem ser exibidos os detalhes do her\u00f3i em uma nova vis\u00e3o.\n\n\nDeve ser poss\u00edvel exibir a vis\u00e3o dos detalhes do her\u00f3i a partir de um \ndeep link\n.\n\n\n\n\n\n\nUm \ndeep link\n \u00e9 um link contextual que te leva diretamente a um conte\u00fado e que pode ser compartilhado via email, pode ser adicionado aos favoritos etc. Por exemplo: a URL \"http://localhost:4200/heroes/10\" \u00e9 um deep link que exibe os detalhes do her\u00f3i com id \"10\".\n\n\n\n\nQuando finalizarmos, os usu\u00e1rios poder\u00e3o navegar pela aplica\u00e7\u00e3o como no diagrama abaixo:\n\n\n\n\nPara implementar esses requisitos, vamos adicionar o \nRouter\n do Angular \u00e0 aplica\u00e7\u00e3o.\n\n\nO plano de a\u00e7\u00e3o, ent\u00e3o, \u00e9:\n\n\n\n\nTransformar o \nAppComponent\n numa \"casca\" para lidar somente com a navega\u00e7\u00e3o da aplica\u00e7\u00e3o.\n\n\nMover a l\u00f3gica a respeito da listagem de her\u00f3is do \nAppComponent\n para um novo componente.\n\n\nAdicionar navega\u00e7\u00e3o.\n\n\nCriar um novo componente para o Dashboard.\n\n\nIncluir o Dashboard na estrutura de navega\u00e7\u00e3o da aplica\u00e7\u00e3o.\n\n\n\n\nDividindo o \nAppComponent\n\u00b6\n\n\nA vers\u00e3o atual da aplica\u00e7\u00e3o est\u00e1 carregando e exibindo imediamente a lista de her\u00f3is.\n\n\nNa nova vers\u00e3o, o \nAppComponent\n deve ser somente uma \"casca\" que lida com a navega\u00e7\u00e3o da aplica\u00e7\u00e3o entre a lista de her\u00f3is e o Dashboard.\n\n\nPara isso, vamos mover a l\u00f3gica da listagem de her\u00f3is para o seu pr\u00f3prio componente \nHeroesComponent\n.\n\n\nCriando o componente \nHeroesComponent\n\u00b6\n\n\nComo o \nAppComponent\n j\u00e1 est\u00e1 dedicado \u00e0 exibi\u00e7\u00e3o da lista de her\u00f3is, para facilitar, vamos simplesmente renome\u00e1-lo para \nHeroesComponent\n:\n\n\n\n\nRenomeie o arquivo \napp.component.ts\n para \nheroes.component.ts\n.\n\n\nRenomeie o componente \nAppComponent\n para \nHeroesComponent\n.\n\n\nRenomeie o selector \napp-root\n para \napp-heroes\n\n\nRefatore os arquivos \napp.component.{html,css,spec}\n para \nheroes.component.{html,css,spec}\n.\n\n\n\n\nCom as mudan\u00e7as, o novo \nHeroesComponent\n deve ser como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n// ... (imports omitidos)\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-heroes'\n,\n\n  \ntemplateUrl\n:\n \n'./heroes.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./heroes.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nHeroesComponent\n \nimplements\n \nOnInit\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n  \nselectedHero\n:\n \nHero\n;\n\n  \nheroes\n:\n \nHero\n[];\n\n\n  \n// ... (construtor e m\u00e9todo omitidos)\n\n\n}\n\n\n\n\n\n\n\nRecriando o componente \nAppComponent\n\u00b6\n\n\nO novo \nAppComponent\n ser\u00e1 a casca da aplica\u00e7\u00e3o. Ele deve mostrar os links de navega\u00e7\u00e3o no topo da p\u00e1gina e, abaixo, ter\u00e1 uma \u00e1rea de exibi\u00e7\u00e3o para os componentes filhos.\n\n\nSiga os seguintes passos:\n\n\n\n\nCrie o arquivo \nsrc/app/app.component.ts\n.\n\n\nDefina a classe \nAppComponent\n (lembre-se de export\u00e1-la).\n\n\nAdicione o decorador \n@Component\n com o selector \napp-root\n.\n\n\nMova os seguintes trechos do \nHeroesComponent\n para o novo \nAppComponent\n:\n\n\nA propriedade \ntitle\n.\n\n\nO trecho do template com o \n<h1>\n.\n\n\nAdicione uma tag \n<app-heroes>\n no template, logo abaixo do \n<h1>\n.\n\n\nAdicione o \nHeroesComponent\n ao array \ndeclarations\n do \nAppModule\n. Dessa forma, o Angular reconhece a tag \n<app-heroes>\n em qualquer vis\u00e3o.\n\n\nLembre-se de incluir as express\u00f5es import necess\u00e1rias no \nAppComponent\n.\n\n\n\n\nAgora, o \napp.component.ts\n deve estar como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-root'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h1>{{title}}</h1>\n\n\n    <app-heroes></app-heroes>\n\n\n  `\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n\n}\n\n\n\n\n\n\n\nE o \napp.module.ts\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail.component'\n;\n\n\nimport\n \n{\n \nHeroesComponent\n \n}\n \nfrom\n \n'./heroes.component'\n;\n\n\n\n@\nNgModule\n({\n\n  \ndeclarations\n:\n \n[\nAppComponent\n,\n \nHeroesComponent\n,\n \nHeroDetailComponent\n],\n\n  \nimports\n:\n \n[\nBrowserModule\n,\n \nFormsModule\n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\n\n\nVolte para o navegador e veja que a aplica\u00e7\u00e3o ainda est\u00e1 rodando e exibindo a lista de her\u00f3is.\n\n\n\n\n\nAdicionando navega\u00e7\u00e3o\n\u00b6\n\n\nSeguindo os nossos requisitos, o usu\u00e1rio deve poder navegar para a vis\u00e3o da lista de her\u00f3is a partir das outras vis\u00f5es que vamos construir.\n\n\nPara configurar as \nrotas\n do \nTour of Heroes\n, vamos usar o \nRouterModule\n, um m\u00f3dulo que prov\u00ea servi\u00e7os, diretivas e configura\u00e7\u00f5es relacionadas \u00e0 navega\u00e7\u00e3o da aplica\u00e7\u00e3o.\n\n\nElemento \n<base href>\n\u00b6\n\n\nAntes de configurar as rotas, abra o arquivo \nindex.html\n e verifique se existe o elemento \n<base href>\n dentro da tag \nhead\n:\n\n\n1\n2\n3\n4\n5\n<\nhead\n>\n\n  ...\n  \n<\nbase\n \nhref\n=\n\"/\"\n>\n\n  ...\n\n</\nhead\n>\n\n\n\n\n\n\n\nEsse elemento \u00e9 usado como prefixo nas URLs relativas (para referenciar recursos como CSS, scripts e imagens).\n\n\nConfigurando as rotas\n\u00b6\n\n\nUma \nrota\n determina qual \u00e9 a vis\u00e3o da aplica\u00e7\u00e3o que deve ser exibida quando um usu\u00e1rio clica num link ou quando o usu\u00e1rio digita (ou cola) a URL na barra de navega\u00e7\u00e3o do navegador.\n\n\nPara definir uma rota da aplica\u00e7\u00e3o, vamos seguir a seguinte configura\u00e7\u00e3o:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \n{\n \nRouterModule\n \n}\n   \nfrom\n \n'@angular/router'\n;\n\n\n\nRouterModule\n.\nforRoot\n([\n\n  \n{\n\n    \npath\n:\n \n'heroes'\n,\n\n    \ncomponent\n:\n \nHeroesComponent\n\n  \n}\n\n\n])\n\n\n\n\n\n\n\nAs rotas da aplica\u00e7\u00e3o s\u00e3o definidas em um array, em que cada elemento possui as seguintes propriedades:\n\n\n\n\npath\n: o router checa esse caminho com a URL na barra de navega\u00e7\u00e3o do browser.\n\n\ncomponent\n: define o componente que deve ser criado quando se navega para essa rota.\n\n\n\n\nConfigurando o \nRouterModule\n\u00b6\n\n\nO \nRouterModule\n \u00e9 um m\u00f3dulo Angular opcional e, por isso, deve ser importado para poder ser utilizado.\n\n\nConfigure o \napp.module.ts\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \n{\n \nNgModule\n \n}\n       \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n  \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n    \nfrom\n \n'@angular/forms'\n;\n\n\nimport\n \n{\n \nRouterModule\n \n}\n   \nfrom\n \n'@angular/router'\n;\n \n// (1) <-- importe o s\u00edmbolo \"RouterModule\"\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n        \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail.component'\n;\n\n\nimport\n \n{\n \nHeroesComponent\n \n}\n     \nfrom\n \n'./heroes.component'\n;\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nFormsModule\n,\n\n    \nRouterModule\n.\nforRoot\n([\n          \n// <-- (2) importe o \"RouterModule\" na nossa aplica\u00e7\u00e3o\n\n      \n{\n                             \n// <-- (2.1) e configure a nossa primeira rota\n\n        \npath\n:\n \n'heroes'\n,\n             \n        \ncomponent\n:\n \nHeroesComponent\n  \n      \n}\n                             \n    \n])\n                              \n  \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHeroDetailComponent\n,\n\n    \nHeroesComponent\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n\n\n}\n\n\n\n\n\n\n\nRouter outlet\n\u00b6\n\n\nSe voc\u00ea colar o caminho \"/heroes\" ao final da URL na barra de endere\u00e7o do navegador, o router deve identificar que essa URL se refere \u00e0 rota que configuramos anteriormente e deve exibir o \nHeroesComponent\n. No entanto, voc\u00ea precisa dizer ao router onde o componente deve ser exibido na p\u00e1gina.\n\n\nPara isso, vamos adicionar um elemento \n<router-outlet>\n ao final do template do \nAppComponent\n.\n\n\n\u00c9 imediatamente abaixo do \n<router-outlet>\n que o router exibe cada componente \u00e0 medida em que o usu\u00e1rio navega pela aplica\u00e7\u00e3o.\n\n\nO elemento \n<router-outlet>\n refere-se \u00e0 diretiva \nRouterOutlet\n do \nRouterModule\n. N\u00f3s conseguimos utiliz\u00e1-lo nos templates dos nossos componentes porque j\u00e1 importamos o m\u00f3dulo \nRouterModule\n na aplica\u00e7\u00e3o anteriormente.\n\n\nRouter links\n\u00b6\n\n\nPara navegar entre as vis\u00f5es, os usu\u00e1rios n\u00e3o deveriam ter que colar a URL na barra de navega\u00e7\u00e3o. Ao inv\u00e9s disso, vamos adicionar elementos \n<a>\n para que, quando clicados, disparem a navega\u00e7\u00e3o.\n\n\nReescreva o template do \nAppComponent\n como abaixo:\n\n\n1\n2\n3\n4\n5\ntemplate\n:\n \n`\n\n\n   <h1>{{title}}</h1>\n\n\n   <a routerLink=\"/heroes\">Heroes</a>\n\n\n   <router-outlet></router-outlet>\n\n\n `\n\n\n\n\n\n\n\nNote que adicionamos ao elemento \n<a>\n a propriedade \nrouterLink\n. A diretiva \nRouterLink\n (outra diretiva do \nRouterModule\n) recebe como valor a string que diz ao router para onde ele deve navegar quando o usu\u00e1rio clica no link.\n\n\nOlhando na nossa configura\u00e7\u00e3o, podemos confirmar que o caminho '/heroes' refere-se \u00e0 rota para o componente \nHeroesComponent\n.\n\n\nRecarregue o navegador. Verifique que a lista de her\u00f3is n\u00e3o \u00e9 mais exibida quando a aplica\u00e7\u00e3o \u00e9 carregada. Voc\u00ea s\u00f3 deve ver o t\u00edtulo da aplica\u00e7\u00e3o e o link para a lista de her\u00f3is.\n\n\nClique no link \"Heroes\". A barra de navega\u00e7\u00e3o muda para \"/heroes\" e a lista de her\u00f3is \u00e9 exibida.\n\n\nRevise o conte\u00fado do \nAppComponent\n, que deve estar como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-root'\n,\n\n  \ntemplate\n:\n \n`\n\n\n      <h1>{{title}}</h1>\n\n\n      <a routerLink=\"/heroes\">Heroes</a>\n\n\n      <router-outlet></router-outlet>\n\n\n    `\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \n'Tour of Heroes'\n;\n\n\n}\n\n\n\n\n\n\n\nCriando o \nDashboardComponent\n\u00b6\n\n\nNavega\u00e7\u00e3o s\u00f3 faz sentido se tivermos mais de uma vis\u00e3o.\n\n\nVamos, ent\u00e3o, adicionar um novo componente para a vis\u00e3o do Dashboard.\n\n\nVamos utilizar o Angular CLI para gerar nosso componente:\n\n\n1\nng generate component dashboard\n\n\n\n\n\n\nO resultado no console deve ser algo como:\n\n\n1\n2\n3\n4\n5\nCREATE src/app/dashboard/dashboard.component.css \n(\n0\n bytes\n)\n\nCREATE src/app/dashboard/dashboard.component.html \n(\n28\n bytes\n)\n\nCREATE src/app/dashboard/dashboard.component.spec.ts \n(\n649\n bytes\n)\n\nCREATE src/app/dashboard/dashboard.component.ts \n(\n281\n bytes\n)\n\nUPDATE src/app/app.module.ts \n(\n771\n bytes\n)\n\n\n\n\n\n\n\nTornaremos o componente mais \u00fatil depois.\n\n\nConfigurando a rota do Dashboard\n\u00b6\n\n\nPara ensinar ao \napp.module.ts\n como navegar para a vis\u00e3o do Dashboard, adicione o objeto de configura\u00e7\u00e3o ao array de rotas da aplica\u00e7\u00e3o:\n\n\n1\n2\n3\n4\n{\n\n  \npath\n:\n \n'dashboard'\n,\n\n  \ncomponent\n:\n \nDashboardComponent\n\n\n},\n\n\n\n\n\n\n\nN\u00e3o esque\u00e7a de declarar o \nDashboardComponent\n no m\u00f3dulo \nAppModule\n (se j\u00e1 n\u00e3o estiver declarado):\n\n\n1\n2\n3\n4\n5\n6\ndeclarations\n:\n \n[\n\n  \nAppComponent\n,\n\n  \nHeroDetailComponent\n,\n\n  \nHeroesComponent\n,\n\n  \nDashboardComponent\n \n// (!) <-- adicione o DashboardComponent ao array declarations\n\n\n],\n\n\n\n\n\n\n\nRedirecionando rotas\n\u00b6\n\n\nNesse momento, n\u00e3o h\u00e1 nenhuma rota configurada para o caminho \"/\", e, quando o navegador carrega a aplica\u00e7\u00e3o, nenhum dos nossos componentes (\nHeroesComponent\n ou \nDashboardComponent\n) ser\u00e1 exibido.\n\n\nPara redirecionar o caminho \"/\" para o caminho \"/dashboard\" e, portanto, exibir o componente \nDashboardComponent\n por padr\u00e3o quando a aplica\u00e7\u00e3o \u00e9 carregada, vamos usar uma rota de \nredirecionamento\n.\n\n\nPara isso, adicione uma nova defini\u00e7\u00e3o de rota como abaixo:\n\n\n1\n2\n3\n4\n5\n{\n\n  \npath\n:\n \n''\n,\n\n  \nredirectTo\n:\n \n'/dashboard'\n,\n\n  \npathMatch\n:\n \n'full'\n\n\n},\n\n\n\n\n\n\n\nAdicionando um link de navega\u00e7\u00e3o para o Dashboard\n\u00b6\n\n\nAtualize o template do \nAppComponent\n, adicionando um link para o Dashboard logo acima do link para a lista de her\u00f3is:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntemplate\n:\n \n`\n\n\n   <h1>{{title}}</h1>\n\n\n   <nav>\n\n\n     <a routerLink=\"/dashboard\">Dashboard</a>\n\n\n     <a routerLink=\"/heroes\">Heroes</a>\n\n\n   </nav>\n\n\n   <router-outlet></router-outlet>\n\n\n `\n\n\n\n\n\n\n\nPerceba que tamb\u00e9m adicionamos a tag \n<nav>\n. Nesse momento, ela n\u00e3o faz nada, mas ela ser\u00e1 \u00fatil mais tarde para criar regras de estilo CSS.\n\n\nNo seu navegador, v\u00e1 para a raiz da aplica\u00e7\u00e3o (/) e recarregue a p\u00e1gina. A aplica\u00e7\u00e3o exibe o Dashboard e voc\u00ea pode navegar entre as vis\u00f5es usando os links de navega\u00e7\u00e3o.\n\n\nAdicionando her\u00f3is ao Dashboard\n\u00b6\n\n\nVamos agora implementar de fato o Dashboard, que deve apresentar os 4 principais her\u00f3is do Tour of Heroes.\n\n\nAltere o arquivo \ndashboard.component.html\n na pasta \nsrc/app/dashboard\n com o conte\u00fado abaixo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n<\nh3\n>\nTop Heroes\n</\nh3\n>\n\n\n<\ndiv\n \nclass\n=\n\"grid grid-pad\"\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let hero of heroes\"\n \nclass\n=\n\"col-1-4\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"module hero\"\n>\n\n      \n<\nh4\n>\n{{hero.name}}\n</\nh4\n>\n\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nA diretiva \n*ngFor\n \u00e9 usada novamente para iterar sobre a lista de her\u00f3is e exibir seus nomes. Os elementos \n<div>\n extras ser\u00e3o \u00fateis para os estilos CSS mais tarde.\n\n\nCompartilhando o servi\u00e7o \nHeroService\n\u00b6\n\n\nPara popular o array de her\u00f3is do \nDashboardComponent\n, vamos reutilizar o \nHeroService\n.\n\n\nNo arquivo \ndashboard.component.ts\n, adicione os \"import\"s necess\u00e1rios:\n\n\n1\n2\n3\n4\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'../hero'\n;\n\n\nimport\n \n{\n \nHeroService\n \n}\n \nfrom\n \n'../hero.service'\n;\n\n\n\n\n\n\n\nReescreva a classe \nDashboardComponent\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nexport\n \nclass\n \nDashboardComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nheroes\n:\n \nHero\n[]\n \n=\n \n[];\n\n\n  \nconstructor\n(\nprivate\n \nheroService\n:\n \nHeroService\n)\n \n{\n \n}\n\n\n  \nngOnInit\n()\n:\n \nvoid\n \n{\n\n    \nthis\n.\nheroService\n.\ngetTopHeroes\n()\n\n      \n.\nthen\n(\nheroes\n \n=>\n \nthis\n.\nheroes\n \n=\n \nheroes\n);\n\n  \n}\n\n\n}\n\n\n\n\n\nAdicioneo o m\u00e9todo \ngetTopHeroes\n no \nHeroService\n\n\n1\n2\n3\ngetTopHeroes\n()\n:\n \nPromise\n<\nHero\n[]\n>\n \n{\n\n  \nreturn\n \nPromise\n.\nresolve\n(\nHEROES\n.\nslice\n(\n0\n,\n \n4\n));\n\n\n}\n\n\n\n\n\n\nSe voc\u00ea olhar com cuidado, ver\u00e1 que estamos usando a mesma estrutura do \nHeroesComponent\n:\n\n\n\n\nDefinimos uma propriedade \nheroes\n do tipo array de \nHero\n.\n\n\nInjetamos o \nHeroService\n no construtor da classe, guardando a inst\u00e2ncia numa propriedade privada \nheroService\n.\n\n\nChamamos o servi\u00e7o para recuperar a lista dos her\u00f3is tops no m\u00e9todo \nngOnInit()\n.\n\n\n\n\nRecarregue o navegador e veja que os nomes dos 4 her\u00f3is no novo Dashboard.\n\n\nNavegando para os detalhes do her\u00f3i\n\u00b6\n\n\nNesse momento, quando o usu\u00e1rio seleciona um her\u00f3i da lista do componente \nHeroesComponent\n, os detalhes do her\u00f3i selecionado s\u00e3o exibidos ao final da p\u00e1gina.\n\n\nNo entanto, o usu\u00e1rio deveria poder visualizar os detalhes do her\u00f3i de outras maneiras. Isto \u00e9, tamb\u00e9m deveria ser poss\u00edvel navegar para o componente \nHeroDetailComponent\n nas seguintes formas:\n\n\n\n\nA partir do top 4 her\u00f3is do \nDashboardComponent\n;\n\n\nA partir da lista de her\u00f3is do \nHeroesComponent\n;\n\n\nA partir de um \ndeep link\n digitado na barra de endere\u00e7o do navegador.\n\n\n\n\nVamos, ent\u00e3o, configurar uma nova rota para o \nHeroDetailComponent\n.\n\n\nConfigurando a rota do \nHeroDetailComponent\n\u00b6\n\n\nPara configurar a rota para o componente \nHeroDetailComponent\n, vamos adicionar mais um item ao array de rotas configuradas no \napp.module.ts\n.\n\n\nA configura\u00e7\u00e3o da nova rota \u00e9 um pouco diferente das rotas que j\u00e1 configuramos porque, agora, precisamos dizer ao \nHeroDetailComponent\n qual \u00e9 o her\u00f3i que deve ser exibido. Nas outras rotas (seja para o \nDashboardComponent\n, seja para o \nHeroesComponent\n), n\u00e3o foi preciso dizer nada.\n\n\nNesse momento, para exibir os detalhes do her\u00f3i no \nHeroDetailComponent\n, o componente pai \nHeroesComponent\n est\u00e1 fazendo um binding da propriedade \nhero\n:\n\n\n1\n<\nhero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\nhero-detail\n>\n\n\n\n\n\n\n\nNo entanto, esse binding n\u00e3o ir\u00e1 funcionar para a navega\u00e7\u00e3o.\nPara navega\u00e7\u00e3o, usamos as \nrotas parametrizadas\n.\n\n\nRota parametrizada\n\u00b6\n\n\nPara indicar qual \u00e9 o her\u00f3i que deve ser exibido, vamos adicionar um par\u00e2metro \u00e0 URL: \nid\n do her\u00f3i.\n\n\nPor exemplo, quando quisermos navegar para o her\u00f3i de \nid\n \n11\n, a URL esperada seria algo como: \n/detail/11\n\n\nA parte \n/detail\n da URL \u00e9 constante. O sufixo num\u00e9rico que corresponde ao id muda de her\u00f3i para her\u00f3i.\n\n\nVamos, ent\u00e3o, representar essa parte vari\u00e1vel como um \npar\u00e2metro\n da rota.\n\n\nConfigurando uma rota parametrizada\n\u00b6\n\n\nAdicione a seguinte defini\u00e7\u00e3o ao array de rotas no arquivo \napp.module.ts\n:\n\n\n1\n2\n3\n4\n,\n \n{\n\n  \npath\n:\n \n'detail/:id'\n,\n\n  \ncomponent\n:\n \nHeroDetailComponent\n\n\n}\n\n\n\n\n\n\n\nOs dois-pontos ( : ) no \npath\n indicam que o \n:id\n \u00e9 um par\u00e2metro da navega\u00e7\u00e3o para o componente \nHeroDetailComponent\n.\n\n\nFinalizamos as configura\u00e7\u00f5es de rota. Agora, vamos revisar o componente \nHeroDetailComponent\n para que ele esteja pronto para a rota parametrizada.\n\n\nRevisando o \nHeroDetailComponent\n\u00b6\n\n\nEssa \u00e9 a implementa\u00e7\u00e3o atual do componente \nHeroDetailComponent\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'hero-detail'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-detail.component.html'\n\n\n})\n\n\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n}\n\n\n\n\n\n\n\nN\u00e3o iremos mudar nada no template (html), pois a forma de exibir os dados do her\u00f3i ir\u00e1 continuar a mesma. A mudan\u00e7a ser\u00e1 quanto \u00e0 forma de recuperar os dados do her\u00f3i.\n\n\nN\u00e3o iremos mais receber o her\u00f3i a partir de um binding de um componente pai. Nessa nova forma de navega\u00e7\u00e3o, iremos receber o \nid\n do her\u00f3i a ser exibido como par\u00e2metro da rota e vamos usar o \nHeroService\n para recuperar o her\u00f3i com esse \nid\n.\n\n\nPara isso, adicione os seguintes imports no arquivo \nhero-detail.component.ts\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n// Pode manter o import do Input por enquanto... voc\u00ea remover\u00e1 ele futuramente:\n\n\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nActivatedRoute\n,\n \nParamMap\n \n}\n \nfrom\n \n'@angular/router'\n;\n\n\nimport\n \n{\n \nLocation\n \n}\n \nfrom\n \n'@angular/common'\n;\n\n\nimport\n \n{\n \nswitchMap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\nimport\n \n{\n \nHeroService\n \n}\n \nfrom\n \n'./hero.service'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n\n\n\n\nEm seguida, injete os servi\u00e7os \nActivatedRoute\n, \nHeroService\n, e \nLocation\n em par\u00e2metros privados no construtor:\n\n\n1\n2\n3\n4\n5\nconstructor\n(\n\n  \nprivate\n \nheroService\n:\n \nHeroService\n,\n\n  \nprivate\n \nroute\n:\n \nActivatedRoute\n,\n\n  \nprivate\n \nlocation\n:\n \nLocation\n\n\n)\n \n{}\n\n\n\n\n\n\n\nAdicione a interface \nOnInit\n na assinatura da classe:\n\n\n1\nexport\n \nclass\n \nHeroDetailComponent\n \nimplements\n \nOnInit\n \n{\n\n\n\n\n\n\n\nNo m\u00e9todo \nngOnInit()\n, use o \nparamMap\n do servi\u00e7o \nActivatedRoute\n para extrair o valor do par\u00e2metro \nid\n e use o servi\u00e7o \nHeroService\n para recuperar o her\u00f3i com esse \nid\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nngOnInit\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nroute\n.\nparamMap\n\n    \n.\npipe\n(\n\n      \nswitchMap\n((\nparams\n:\n \nParamMap\n)\n \n=>\n \nthis\n.\nheroService\n.\ngetHero\n(\n+\nparams\n.\nget\n(\n'id'\n)))\n\n    \n)\n\n    \n.\nsubscribe\n(\nhero\n \n=>\n \nthis\n.\nhero\n \n=\n \nhero\n);\n\n\n}\n\n\n\n\n\n\n\nO operador \nswitchMap\n mapeia o par\u00e2metro \nid\n da rota (um \nObservable\n) em um resultado da chamada ao m\u00e9todo \nHeroService.getHero()\n (outro \nObservable\n).\n\n\nSe o usu\u00e1rio navegar para este componente enquanto a requisi\u00e7\u00e3o ao \ngetHero\n ainda estiver processando, o \nswitchMap\n cancela a requisi\u00e7\u00e3o anterior e faz uma nova chamada ao m\u00e9todo \nHeroService.getHero()\n.\n\n\nO operador JavaScript \n+\n converte o par\u00e2metro da rota (que \u00e9 uma String) em um n\u00famero.\n\n\nO operador \nsubscribe\n registra uma fun\u00e7\u00e3o callback que ser\u00e1 executada automaticamente ap\u00f3s o resultado do m\u00e9todo \nHeroService.getHero()\n.\n\n\n\u00c9 preciso fazer o unsubscribe?\n\u00b6\n\n\nNormalmente, em se tratando de \nObservables\n, sempre que criamos uma \"assinatura\" (isto \u00e9, sempre que invocamos o m\u00e9todo \nsubscribe\n de um \nObservable\n), \u00e9 importante registrar tamb\u00e9m o cancelamento da assinatura em um momento apropriado.\n\n\nEssa boa pr\u00e1tica evita problemas de \nmemory leak\n, que pode degradar o desempenho da aplica\u00e7\u00e3o de forma \"silenciosa\".\n\n\nNo entanto, o \nRouter\n \u00e9 capaz de gerenciar seus pr\u00f3prios \nObservables\n e localizar as suas assinaturas, limpando-as automaticamente quando o componente \u00e9 destru\u00eddo.\n\n\nDessa forma, voc\u00ea n\u00e3o precisa fazer o \nunsubscribe\n dos par\u00e2metros no \nparamMap\n.\n\n\nAdicionando o m\u00e9todo \nHeroService.getHero()\n\u00b6\n\n\nNo trecho de c\u00f3digo anterior, n\u00f3s inclu\u00edmos uma chamada ao m\u00e9todo \ngetHero()\n do servi\u00e7o \nHeroService\n. No entanto, n\u00f3s ainda n\u00e3o implementamos esse m\u00e9todo.\n\n\nPor isso, adicione o m\u00e9todo \ngetHero()\n ao arquivo \nhero.service.ts\n como abaixo:\n\n\n1\n2\n3\n4\ngetHero\n(\nid\n: \nnumber\n)\n:\n \nPromise\n<\nHero\n>\n \n{\n\n  \nreturn\n \nthis\n.\ngetHeroes\n()\n\n             \n.\nthen\n(\nheroes\n \n=>\n \nheroes\n.\nfind\n(\nhero\n \n=>\n \nhero\n.\nid\n \n===\n \nid\n));\n\n\n}\n\n\n\n\n\n\n\nEstamos reusando o m\u00e9todo \ngetHeroes()\n e filtrando o resultado para achar o her\u00f3i com o \nid\n informado.\n\n\nAchando o caminho de volta\n\u00b6\n\n\nComo j\u00e1 vimos, o usu\u00e1rio ter\u00e1 v\u00e1rias formas de navegar para o \nHeroDetailComponent\n.\n\n\nPara retornar um passo no hist\u00f3rico de navega\u00e7\u00e3o, implemente o m\u00e9todo \ngoBack()\n, que usa o servi\u00e7o \nLocation\n que injetamos anteriormente:\n\n\n1\n2\n3\ngoBack\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nlocation\n.\nback\n();\n\n\n}\n\n\n\n\n\n\n\nEsse m\u00e9todo ser\u00e1 chamado a partir do clique no bot\u00e3o \"Voltar\" na p\u00e1gina:\n\n\n1\n<\nbutton\n \ntype\n=\n\"button\"\n \n(\nclick\n)=\"\ngoBack\n()\"\n>\nVoltar\n</\nbutton\n>\n\n\n\n\n\n\n\nVamos ent\u00e3o, migrar o template do componente \nHeroDetailComponent\n para o seu pr\u00f3prio arquivo \nhero-detail.component.html\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<\ndiv\n \n*\nngIf\n=\n\"hero\"\n>\n\n    \n<\nh2\n>\n{{hero.name}} details!\n</\nh2\n>\n\n    \n<\ndiv\n>\nid: {{hero.id}}\n</\ndiv\n>\n\n    \n<\ndiv\n>\n\n        \n<\nlabel\n \nfor\n=\n\"hero-name\"\n>\nNome:\n</\nlabel\n>\n\n        \n<\ninput\n \nid\n=\n\"hero-name\"\n \n[(\nngModel\n)]=\"\nhero\n.\nname\n\"\n \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n    \n</\ndiv\n>\n\n    \n<\nbutton\n \ntype\n=\n\"button\"\n \n(\nclick\n)=\"\ngoBack\n()\"\n>\nVoltar\n</\nbutton\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nLembre-se de atualizar os metadados do componente para referenciar o novo arquivo na propriedade \ntemplateUrl\n (se ainda n\u00e3o estiver atualizado):\n\n\n1\n2\n3\n4\n@\nComponent\n({\n\n  \nselector\n:\n \n'hero-detail'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-detail.component.html'\n,\n\n\n})\n\n\n\n\n\n\n\nRecarregue o navegador e verifique os resultados.\n\n\nSelecionando um her\u00f3i a partir do Dashboard\n\u00b6\n\n\nQuando um usu\u00e1rio clica em um her\u00f3i no Dashboard, a aplica\u00e7\u00e3o deveria navegar para o \nHeroDetailComponent\n para a exibi\u00e7\u00e3o dos detalhes do her\u00f3i selecionado.\n\n\nApesar de os her\u00f3is do Dashboard terem a apar\u00eancia de bot\u00f5es, eles devem se comportar como links de navega\u00e7\u00e3o. Quando o usu\u00e1rio passar o mouse por cima de um her\u00f3i, a URL dos detalhes desse her\u00f3i deveria aparecer na barra de status do navegador.\n\n\nPara fazer isso, reabra o arquivo \ndashboard.component.html\n e troque a tag \n<div *ngFor...>\n pela tag \n<a>\n. O resultado esperado \u00e9:\n\n\n1\n<\na\n \n*\nngFor\n=\n\"let hero of heroes\"\n  \n[\nrouterLink\n]=\"['/\ndetail\n',\n \nhero\n.\nid\n]\"\n  \nclass\n=\n\"col-1-4\"\n>\n\n\n\n\n\n\n\nPerceba como fizemos o binding com a propriedade \nrouterLink\n. Dessa vez, estamos fazendo um binding com um array de par\u00e2metros. Esse array tem duas partes:\n\n\n\n\nO caminho para a rota de destino; e\n\n\nO par\u00e2metro da rota (nesse caso, o \nid\n do her\u00f3i).\n\n\n\n\nOs dois itens desse array est\u00e3o \"alinhados\" com o caminho e o par\u00e2metro da defini\u00e7\u00e3o da rota que adicionamos anteriormente ao \napp.module.ts\n:\n\n\n1\n2\n3\n4\n{\n\n  \npath\n:\n \n'detail/:id'\n,\n\n  \ncomponent\n:\n \nHeroDetailComponent\n\n\n},\n\n\n\n\n\n\n\nRecarregue o navegador e selecione um her\u00f3i a partir do Dashboard. A aplica\u00e7\u00e3o deve navegar para os detalhes do her\u00f3i selecionado.\n\n\nCriando um m\u00f3dulo de navega\u00e7\u00e3o\n\u00b6\n\n\nSe voc\u00ea olhar agora o c\u00f3digo do arquivo \napp.module.ts\n, vai ver que quase 20 linhas est\u00e3o dedicadas \u00e0 configura\u00e7\u00e3o das rotas.\n\n\nA maioria das aplica\u00e7\u00f5es possuem muito mais rotas que, al\u00e9m disso, podem conter configura\u00e7\u00f5es que previnem o acesso indesejado ou n\u00e3o autorizado.\n\n\nAs configura\u00e7\u00f5es de navega\u00e7\u00e3o podem rapidamente dominar o \nAppModule\n, obscurecendo seu prop\u00f3sito inicial, que \u00e9 estabelecer os principais fatos sobre a aplica\u00e7\u00e3o como um todo para o compilador Angular.\n\n\n\u00c9 uma boa ideia, ent\u00e3o, refatorar essas configura\u00e7\u00f5es para sua pr\u00f3pria classe, que \u00e9 conhecido como um \nm\u00f3dulo de navega\u00e7\u00e3o\n.\n\n\nPor conven\u00e7\u00e3o, o nome do m\u00f3dulo de navega\u00e7\u00e3o deve conter a palavra \nRouting\n e estar alinhado com o nome do m\u00f3dulo que declara seus componentes naveg\u00e1veis.\n\n\nCrie, ent\u00e3o, o arquivo \napp-routing.module.ts\n na pasta \nsrc/app\n (isto \u00e9, no mesmo n\u00edvel do \napp-module.ts\n), com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nRouterModule\n,\n \nRoutes\n \n}\n \nfrom\n \n'@angular/router'\n;\n\n\n\nimport\n \n{\n \nDashboardComponent\n \n}\n \nfrom\n \n'./dashboard/dashboard.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail.component'\n;\n\n\nimport\n \n{\n \nHeroesComponent\n \n}\n \nfrom\n \n'./heroes.component'\n;\n\n\n\nconst\n \nroutes\n:\n \nRoutes\n \n=\n \n[\n\n  \n{\n \npath\n:\n \n''\n,\n \nredirectTo\n:\n \n'/dashboard'\n,\n \npathMatch\n:\n \n'full'\n \n},\n\n  \n{\n \npath\n:\n \n'dashboard'\n,\n \ncomponent\n:\n \nDashboardComponent\n \n},\n\n  \n{\n \npath\n:\n \n'detail/:id'\n,\n \ncomponent\n:\n \nHeroDetailComponent\n \n},\n\n  \n{\n \npath\n:\n \n'heroes'\n,\n \ncomponent\n:\n \nHeroesComponent\n \n}\n\n\n];\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\nRouterModule\n.\nforRoot\n(\nroutes\n)],\n\n  \nexports\n:\n \n[\nRouterModule\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppRoutingModule\n \n{}\n\n\n\n\n\n\n\nAs seguintes caracter\u00edsticas s\u00e3o comuns em m\u00f3dulos de navega\u00e7\u00e3o:\n\n\n\n\nAs configura\u00e7\u00f5es das rotas s\u00e3o definidas em uma vari\u00e1vel, podendo ser exportadas e utilizadas por outras classes;\n\n\nO m\u00f3dulo adiciona o \nRouterModule.forRoot(routes)\n no \nimports\n;\n\n\nO m\u00f3dulo adiciona o \nRouterModule\n no \nexports\n, para que os componentes do m\u00f3dulo original tenham acesso \u00e0s diretivas e servi\u00e7os do \nRouterModule\n (como o \nRouterLink\n e o \nRouterOutlet\n);\n\n\nN\u00e3o h\u00e1 um array de \ndeclarations\n, pois isso \u00e9 de responsabilidade do m\u00f3dulo original;\n\n\nSe a aplica\u00e7\u00e3o implementa um controle de autoriza\u00e7\u00e3o de rotas, o m\u00f3dulo adiciona os servi\u00e7os necess\u00e1rios (conhecidos como servi\u00e7os de \nroute guards\n) no array \nproviders\n.\n\n\n\n\nAtualizando o \nAppModule\n\u00b6\n\n\nVolte ao \napp-module.ts\n, apague a configura\u00e7\u00e3o de rotas e importe o \nAppRoutingModule\n.\n\n\nEssa \u00e9 a vers\u00e3o revisada do \nAppModule\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail.component'\n;\n\n\nimport\n \n{\n \nHeroesComponent\n \n}\n \nfrom\n \n'./heroes.component'\n;\n\n\nimport\n \n{\n \nDashboardComponent\n \n}\n \nfrom\n \n'./dashboard/dashboard.component'\n;\n\n\nimport\n \n{\n \nAppRoutingModule\n \n}\n \nfrom\n \n'./app-routing.module'\n;\n\n\n\n@\nNgModule\n({\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHeroesComponent\n,\n\n    \nHeroDetailComponent\n,\n\n    \nDashboardComponent\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nFormsModule\n,\n\n    \nAppRoutingModule\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\n\n\nEssa vers\u00e3o revisada \u00e9 focada em identificar os peda\u00e7os importantes da aplica\u00e7\u00e3o, delegando a navega\u00e7\u00e3o para o m\u00f3dulo de navega\u00e7\u00e3o \nAppRoutingModule\n.\n\n\nSelecionando um her\u00f3io no \nHeroesComponent\n\u00b6\n\n\nNo componente \nHeroesComponent\n, o template (html) atual implementa o padr\u00e3o mestre/detalhe, exibindo uma lista de her\u00f3is no topo da p\u00e1gina e o her\u00f3i selecionado abaixo dela.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<\nh2\n>\nMeus her\u00f3is\n</\nh2\n>\n\n\n<\nul\n \nclass\n=\n\"heroes\"\n>\n\n  \n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n\n    \n[\nclass\n.\nselected\n]=\"\nhero \n=\n==\n \nselectedHero\n\"\n\n    \n(\nclick\n)=\"\nonSelect\n(\nhero\n)\"\n>\n\n    \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n {{hero.name}}\n  \n</\nli\n>\n\n\n</\nul\n>\n\n\n\n<\nhero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\nhero-detail\n>\n\n\n\n\n\n\n\nApague tamb\u00e9m a \u00faltima linha do template, que cont\u00e9m o elemento \n<hero-detail>\n.\n\n\nN\u00e3o vamos mais exibir os detalhes completos do her\u00f3i selecionado. Ao inv\u00e9s disso, vamos criar uma navega\u00e7\u00e3o para o componente \nHeroDetailComponent\n.\n\n\nNo entanto, quando o usu\u00e1rio selecionar um her\u00f3i da lista, n\u00e3o vamos navegar diretamente para a p\u00e1gina de detalhes. Antes disso, vamos mostrar uma se\u00e7\u00e3o resumida dos detalhes do her\u00f3i junto com um bot\u00e3o de navega\u00e7\u00e3o. Quando esse bot\u00e3o for clicado, a\u00ed sim, ser\u00e1 disparada a navega\u00e7\u00e3o para a p\u00e1gina dos detalhes completos do her\u00f3i.\n\n\nAdicionando a se\u00e7\u00e3o de detalhes resumidos\n\u00b6\n\n\nAdicione o seguinte fragmento HTML ao final do template (\nheroes.component.html\n), onde antes estava o elemento \n<hero-detail>\n:\n\n\n1\n2\n3\n4\n5\n6\n<\ndiv\n \n*\nngIf\n=\n\"selectedHero\"\n>\n\n  \n<\nh2\n>\n\n    {{selectedHero.name | uppercase}} is my hero\n  \n</\nh2\n>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\ngotoDetail\n()\"\n>\nView Details\n</\nbutton\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nAgora, ao clicar em um her\u00f3i da lista, o usu\u00e1rio dever\u00e1 ver algo como:\n\n\n\n\nO pipe \nuppercase\n\u00b6\n\n\nPerceba que o nome do her\u00f3i selecionado est\u00e1 sendo exibido em letras mai\u00fasculas.\n\n\nIsso acontece porque o pipe \nuppercase\n foi inclu\u00eddo \u00e0 interpola\u00e7\u00e3o, logo ap\u00f3s o operador pipe ( | ).\n\n\n1\n{{selectedHero.name | uppercase}} is my hero\n\n\n\n\n\n\nOs pipes s\u00e3o \u00fateis para formatar strings, valores monet\u00e1rios, datas e outros tipos de dados para exibi\u00e7\u00e3o na tela. O Angular j\u00e1 fornece alguns pipes padr\u00f5es, mas voc\u00ea tamb\u00e9m pode escrever seus pr\u00f3prios pipes.\n\n\nAtualizando o \nHeroesComponent\n\u00b6\n\n\nO componente \nHeroesComponent\n navega para o \nHeroDetailComponent\n em resposta a um clique de bot\u00e3o. O evento do clique do bot\u00e3o faz um binding com o m\u00e9todo \ngotoDetail()\n, que diz ao \nRouter\n para onde a aplica\u00e7\u00e3o deve navegar.\n\n\nPara esssa abordagem, voc\u00ea deve:\n\n\n\n\nImportar o s\u00edmbolo \nRouter\n da biblioteca router do Angular;\n\n\nInjetar o servi\u00e7o \nRouter\n no construtor, junto com o \nHeroService\n;\n\n\nImplementar o m\u00e9todo \ngotoDetail()\n para chamar o m\u00e9todo \nnavigate()\n do \nRouter\n.\n\n\n\n\n1\n2\n3\ngotoDetail\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nrouter\n.\nnavigate\n([\n'/detail'\n,\n \nthis\n.\nselectedHero\n.\nid\n]);\n\n\n}\n\n\n\n\n\n\n\nPerceba que estamos passando um array com dois elementos (um caminho e um par\u00e2metro de rota) para o m\u00e9todo \nnavigate()\n, da mesma forma que fizemos com o binding \n[routerLink]\n no componente \nDashboardComponent\n.\n\n\nEssa \u00e9 a vers\u00e3o revisada da classe \nHeroesComponent\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nexport\n \nclass\n \nHeroesComponent\n \nimplements\n \nOnInit\n \n{\n\n  \nselectedHero\n:\n \nHero\n;\n\n  \nheroes\n:\n \nHero\n[];\n\n\n  \nconstructor\n(\nprivate\n \nrouter\n:\n \nRouter\n,\n \nprivate\n \nheroService\n:\n \nHeroService\n)\n \n{}\n\n\n  \nngOnInit\n()\n \n{\n\n    \nthis\n.\ngetHeroes\n();\n\n  \n}\n\n\n  \nonSelect\n(\nhero\n:\n \nHero\n)\n:\n \nvoid\n \n{\n\n    \nthis\n.\nselectedHero\n \n=\n \nhero\n;\n\n  \n}\n\n\n  \ngetHeroes\n()\n:\n \nvoid\n \n{\n\n    \nthis\n.\nheroService\n.\ngetHeroes\n().\nthen\n(\nheroes\n \n=>\n \n(\nthis\n.\nheroes\n \n=\n \nheroes\n));\n\n  \n}\n\n\n  \ngotoDetail\n()\n:\n \nvoid\n \n{\n\n    \nthis\n.\nrouter\n.\nnavigate\n([\n'/detail'\n,\n \nthis\n.\nselectedHero\n.\nid\n]);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nRecarregue o navegador e comece a clicar!\n\n\nAgora, o usu\u00e1rio pode navegar por toda a aplica\u00e7\u00e3o: a partir do Dashboard para os detalhes do her\u00f3i e de volta; a partir da lista de her\u00f3is para os detalhes resumidos, e da\u00ed para os detalhes completos, e de novo para a lista de her\u00f3is.\n\n\nNesse ponto, implementamos todas os requisitos de navega\u00e7\u00e3o da aplica\u00e7\u00e3o.\n\n\nCriando estilos para a aplica\u00e7\u00e3o\n\u00b6\n\n\nA aplica\u00e7\u00e3o est\u00e1 funcionando, mas est\u00e1 precisando um pouco mais de estilo!\n\n\nCom esse prop\u00f3sito, o designer da equipe criou 60 linhas de c\u00f3digo CSS para voc\u00ea incluir \u00e0 p\u00e1gina do Dashboard.\n\n\nComo j\u00e1 aprendemos, n\u00e3o vamos mais adicionar as regras de estilo ao \nstyles\n do decorador \n@Component\n, pois ir\u00edamos obscurecer a l\u00f3gica do componente. Ao inv\u00e9s disso, vamos criar um arquivo \n.css\n pr\u00f3prio (ou editar o j\u00e1 existente) para esse fim.\n\n\nCrie, ent\u00e3o, um arquivo \ndashboard.component.css\n \u00e0 pasta \n/src/app\n, referenciando-o na propriedade \nstyleUrls\n do \nDashboardComponent\n:\n\n\n1\nstyleUrls\n:\n \n[\n \n'./dashboard.component.css'\n \n]\n\n\n\n\n\n\n\nO conte\u00fado do arquivo \ndashboard.component.css\n \u00e9 o seguinte:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n[\nclass\n*=\n'col-'\n]\n \n{\n\n  \nfloat\n:\n \nleft\n;\n\n  \npadding-right\n:\n \n20\npx\n;\n\n  \npadding-bottom\n:\n \n20\npx\n;\n\n\n}\n\n\n[\nclass\n*=\n'col-'\n]\n:\nlast-of-type\n \n{\n\n  \npadding-right\n:\n \n0\n;\n\n\n}\n\n\na\n \n{\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n*,\n \n*\n:\nafter\n,\n \n*\n:\nbefore\n \n{\n\n  \n-webkit-\nbox-sizing\n:\n \nborder-box\n;\n\n  \n-moz-\nbox-sizing\n:\n \nborder-box\n;\n\n  \nbox-sizing\n:\n \nborder-box\n;\n\n\n}\n\n\nh3\n \n{\n\n  \ntext-align\n:\n \ncenter\n;\n \nmargin-bottom\n:\n \n0\n;\n\n\n}\n\n\nh4\n \n{\n\n  \nposition\n:\n \nrelative\n;\n\n\n}\n\n\n.\ngrid\n \n{\n\n  \nmargin\n:\n \n0\n;\n\n\n}\n\n\n.\ncol-1-4\n \n{\n\n  \nwidth\n:\n \n25\n%\n;\n\n\n}\n\n\n.\nmodule\n \n{\n\n  \npadding\n:\n \n20\npx\n;\n\n  \ntext-align\n:\n \ncenter\n;\n\n  \ncolor\n:\n \n#eee\n;\n\n  \nmax-height\n:\n \n120\npx\n;\n\n  \nmin-width\n:\n \n120\npx\n;\n\n  \nbackground-color\n:\n \n#607D8B\n;\n\n  \nborder-radius\n:\n \n2\npx\n;\n\n\n}\n\n\n.\nmodule\n:\nhover\n \n{\n\n  \nbackground-color\n:\n \n#EEE\n;\n\n  \ncursor\n:\n \npointer\n;\n\n  \ncolor\n:\n \n#607d8b\n;\n\n\n}\n\n\n.\ngrid-pad\n \n{\n\n  \npadding\n:\n \n10\npx\n \n0\n;\n\n\n}\n\n\n.\ngrid-pad\n \n>\n \n[\nclass\n*=\n'col-'\n]\n:\nlast-of-type\n \n{\n\n  \npadding-right\n:\n \n20\npx\n;\n\n\n}\n\n\n@\nmedia\n \n(\nmax-width\n:\n \n600px\n)\n \n{\n\n  \n.\nmodule\n \n{\n\n    \nfont-size\n:\n \n10\npx\n;\n\n    \nmax-height\n:\n \n75\npx\n;\n \n}\n\n\n}\n\n\n@\nmedia\n \n(\nmax-width\n:\n \n1024px\n)\n \n{\n\n  \n.\ngrid\n \n{\n\n    \nmargin\n:\n \n0\n;\n\n  \n}\n\n  \n.\nmodule\n \n{\n\n    \nmin-width\n:\n \n60\npx\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCriando estilos para os detalhes do her\u00f3i\n\u00b6\n\n\nO designer se empolgou e tamb\u00e9m escreveu regras de estilo CSS para o componente \nHeroDetailComponent\n.\n\n\nCrie o arquivo \nhero-detail.component.css\n \u00e0 pasta \n/src/app\n, referenciando-o no \nstyleUrls\n do \nHeroDetailComponent\n, com o conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nlabel\n \n{\n\n  \ndisplay\n:\n \ninline-block\n;\n\n  \nwidth\n:\n \n3\nem\n;\n\n  \nmargin\n:\n \n.5\nem\n \n0\n;\n\n  \ncolor\n:\n \n#607D8B\n;\n\n  \nfont-weight\n:\n \nbold\n;\n\n\n}\n\n\ninput\n \n{\n\n  \nheight\n:\n \n2\nem\n;\n\n  \nfont-size\n:\n \n1\nem\n;\n\n  \npadding-left\n:\n \n.4\nem\n;\n\n\n}\n\n\nbutton\n \n{\n\n  \nmargin-top\n:\n \n20\npx\n;\n\n  \nfont-family\n:\n \nArial\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder\n:\n \nnone\n;\n\n  \npadding\n:\n \n5\npx\n \n10\npx\n;\n\n  \nborder-radius\n:\n \n4\npx\n;\n\n  \ncursor\n:\n \npointer\n;\n \ncursor\n:\n \nhand\n;\n\n\n}\n\n\nbutton\n:\nhover\n \n{\n\n  \nbackground-color\n:\n \n#cfd8dc\n;\n\n\n}\n\n\nbutton\n:\ndisabled\n \n{\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \ncolor\n:\n \n#ccc\n;\n \n  \ncursor\n:\n \nauto\n;\n\n\n}\n\n\n\n\n\n\n\nAinda, no \nhero-detail.component.ts\n, j\u00e1 \u00e9 poss\u00edvel remover o decorador \n@Input\n (e o seu import), pois j\u00e1 n\u00e3o s\u00e3o mais utilzados.\n\n\nCriando estilos para os links de navega\u00e7\u00e3o\n\u00b6\n\n\nCrie agora o arquivo \napp.component.css\n na pasta \n/src/app\n, com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nh1\n \n{\n\n  \nfont-size\n:\n \n1.2\nem\n;\n\n  \ncolor\n:\n \n#999\n;\n\n  \nmargin-bottom\n:\n \n0\n;\n\n\n}\n\n\nh2\n \n{\n\n  \nfont-size\n:\n \n2\nem\n;\n\n  \nmargin-top\n:\n \n0\n;\n\n  \npadding-top\n:\n \n0\n;\n\n\n}\n\n\nnav\n \na\n \n{\n\n  \npadding\n:\n \n5\npx\n \n10\npx\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \nmargin-top\n:\n \n10\npx\n;\n\n  \ndisplay\n:\n \ninline-block\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder-radius\n:\n \n4\npx\n;\n\n\n}\n\n\nnav\n \na\n:\nvisited\n,\n \na\n:\nlink\n \n{\n\n  \ncolor\n:\n \n#607D8B\n;\n\n\n}\n\n\nnav\n \na\n:\nhover\n \n{\n\n  \ncolor\n:\n \n#039be5\n;\n\n  \nbackground-color\n:\n \n#CFD8DC\n;\n\n\n}\n\n\nnav\n \na\n.\nactive\n \n{\n\n  \ncolor\n:\n \n#039be5\n;\n\n\n}\n\n\n\n\n\n\n\nMarcando um elemento de uma rota como \"ativa\"\n\u00b6\n\n\nO roteador do Angular prov\u00ea a diretiva \nrouterLinkActive\n para que voc\u00ea possa adicionar uma classe CSS ao elemento HTML quando a rota referenciada pelo elemento estiver ativa.\n\n\nNo nosso caso, queremos destacar o elemento \n<a>\n ativo com a classe \nactive\n. Para isso, modifique o template do \nAppComponent\n como abaixo:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntemplate\n:\n \n`\n\n\n  <h1>{{title}}</h1>\n\n\n  <nav>\n\n\n    <a routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard</a>\n\n\n    <a routerLink=\"/heroes\" routerLinkActive=\"active\">Heroes</a>\n\n\n  </nav>\n\n\n  <router-outlet></router-outlet>\n\n\n`\n,\n\n\n\n\n\n\n\nInclua a propriedade \nstyleUrls\n ao componente \nAppComponent\n para referenciar o novo arquivo CSS:\n\n\n1\nstyleUrls\n:\n \n[\n'./app.component.css'\n],\n\n\n\n\n\n\n\nEstilos globais\n\u00b6\n\n\nQuando adicionamos regras de estilo CSS a um componente, estamos juntando tudo o que o componente precisa - HTML, CSS e c\u00f3digo - em um \u00fanico lugar. Assim, \u00e9 mais f\u00e1cil empacot\u00e1-lo e reutiliz\u00e1-lo em outros lugares.\n\n\nNo entanto, tamb\u00e9m \u00e9 poss\u00edvel criar estilos no n\u00edvel de aplica\u00e7\u00e3o, isto \u00e9, estilos n\u00e3o relacionados somente a um componente espec\u00edfico.\n\n\nEssas regras de estilos globais devem ser definidas no arquivo \n/src/styles.css\n, que j\u00e1 foi criado automaticamente para a gente l\u00e1 no come\u00e7o dos exerc\u00edcios, quando criamos a aplica\u00e7\u00e3o usando o Angular CLI.\n\n\nDefina ent\u00e3o o conte\u00fado do arquivo \nstyles.css\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n/* Master Styles */\n\n\nh1\n \n{\n\n  \ncolor\n:\n \n#369\n;\n\n  \nfont-family\n:\n \nArial\n,\n \nHelvetica\n,\n \nsans-serif\n;\n\n  \nfont-size\n:\n \n250\n%\n;\n\n\n}\n\n\nh2\n,\n \nh3\n \n{\n\n  \ncolor\n:\n \n#444\n;\n\n  \nfont-family\n:\n \nArial\n,\n \nHelvetica\n,\n \nsans-serif\n;\n\n  \nfont-weight\n:\n \nlighter\n;\n\n\n}\n\n\nbody\n \n{\n\n  \nmargin\n:\n \n2\nem\n;\n\n\n}\n\n\nbody\n,\n \ninput\n[\ntext\n],\n \nbutton\n \n{\n\n  \ncolor\n:\n \n#888\n;\n\n  \nfont-family\n:\n \nCambria\n,\n \nGeorgia\n;\n\n\n}\n\n\na\n \n{\n\n  \ncursor\n:\n \npointer\n;\n\n  \ncursor\n:\n \nhand\n;\n\n\n}\n\n\nbutton\n \n{\n\n  \nfont-family\n:\n \nArial\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder\n:\n \nnone\n;\n\n  \npadding\n:\n \n5\npx\n \n10\npx\n;\n\n  \nborder-radius\n:\n \n4\npx\n;\n\n  \ncursor\n:\n \npointer\n;\n\n  \ncursor\n:\n \nhand\n;\n\n\n}\n\n\nbutton\n:\nhover\n \n{\n\n  \nbackground-color\n:\n \n#cfd8dc\n;\n\n\n}\n\n\nbutton\n:\ndisabled\n \n{\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \ncolor\n:\n \n#aaa\n;\n\n  \ncursor\n:\n \nauto\n;\n\n\n}\n\n\n\n/* Navigation link styles */\n\n\nnav\n \na\n \n{\n\n  \npadding\n:\n \n5\npx\n \n10\npx\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \nmargin-right\n:\n \n10\npx\n;\n\n  \nmargin-top\n:\n \n10\npx\n;\n\n  \ndisplay\n:\n \ninline-block\n;\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \nborder-radius\n:\n \n4\npx\n;\n\n\n}\n\n\nnav\n \na\n:\nvisited\n,\n \na\n:\nlink\n \n{\n\n  \ncolor\n:\n \n#607D8B\n;\n\n\n}\n\n\nnav\n \na\n:\nhover\n \n{\n\n  \ncolor\n:\n \n#039be5\n;\n\n  \nbackground-color\n:\n \n#CFD8DC\n;\n\n\n}\n\n\nnav\n \na\n.\nactive\n \n{\n\n  \ncolor\n:\n \n#039be5\n;\n\n\n}\n\n\n\n/* everywhere else */\n\n\n*\n \n{\n\n  \nfont-family\n:\n \nArial\n,\n \nHelvetica\n,\n \nsans-serif\n;\n\n\n}\n\n\n\n\n\n\n\nVeja que, agora, a aplica\u00e7\u00e3o est\u00e1 toda estilosa.\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nangular-tour-of-heroes/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 app/\n|   |   \u251c\u2500\u2500 dashboard/\n|   |   |   \u251c\u2500\u2500 dashboard.component.css\n|   |   |   \u251c\u2500\u2500 dashboard.component.html\n|   |   |   \u251c\u2500\u2500 dashboard.component.spec.ts\n|   |   |   \u2514\u2500\u2500 dashboard.component.ts\n|   |   \u251c\u2500\u2500 app.component.css\n|   |   \u251c\u2500\u2500 app.component.ts\n|   |   \u251c\u2500\u2500 app.module.ts\n|   |   \u251c\u2500\u2500 app-routing.module.ts\n|   |   \u251c\u2500\u2500 hero.service.ts\n|   |   \u251c\u2500\u2500 hero.ts\n|   |   \u251c\u2500\u2500 hero-detail.component.css\n|   |   \u251c\u2500\u2500 hero-detail.component.html\n|   |   \u251c\u2500\u2500 hero-detail.component.ts\n|   |   \u251c\u2500\u2500 heroes.component.css\n|   |   \u251c\u2500\u2500 heroes.component.html\n|   |   \u251c\u2500\u2500 heroes.component.ts\n|   |   \u251c\u2500\u2500 mock-heroes.ts\n|   \u251c\u2500\u2500 index.html\n|   \u251c\u2500\u2500 main.ts\n|   \u251c\u2500\u2500 styles.css\n|   \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 .angular-cli.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nAprendemos a usar o \nRouter\n para navegar entre diferentes componentes;\n\n\nAprendemos a usar links est\u00e1ticos e parametrizados;\n\n\nReutilizamos um servi\u00e7o entre v\u00e1rios componentes;\n\n\nRefatoramos os componentes para separar HTML e CSS;\n\n\nUsamos um pipe para formatar a sa\u00edda de dados.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 08",
            "title": "07 - Navega\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#exercicio-07",
            "text": "",
            "title": "Exerc\u00edcio 07"
        },
        {
            "location": "/exercicios/exercicio-07/#objetivos",
            "text": "Usar o componente de roteamento e aprender a navegar entre as vis\u00f5es",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-07/#duracao",
            "text": "60 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 6. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-06-services/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-07/#plano-de-acao",
            "text": "O  Tour of Heroes  est\u00e1 fazendo um enorme sucesso! E, com o sucesso, v\u00eam as mudan\u00e7as. Os  novos requisitos  para a nossa aplica\u00e7\u00e3o s\u00e3o:   Adicionar uma p\u00e1gina de  Dashboard , que deve mostrar os principais her\u00f3is do Tour of Heroes.  Deve ser poss\u00edvel navegar entre a vis\u00e3o da lista de her\u00f3is e o  Dashboard .  Ao se clicar no nome do her\u00f3i, devem ser exibidos os detalhes do her\u00f3i em uma nova vis\u00e3o.  Deve ser poss\u00edvel exibir a vis\u00e3o dos detalhes do her\u00f3i a partir de um  deep link .    Um  deep link  \u00e9 um link contextual que te leva diretamente a um conte\u00fado e que pode ser compartilhado via email, pode ser adicionado aos favoritos etc. Por exemplo: a URL \"http://localhost:4200/heroes/10\" \u00e9 um deep link que exibe os detalhes do her\u00f3i com id \"10\".   Quando finalizarmos, os usu\u00e1rios poder\u00e3o navegar pela aplica\u00e7\u00e3o como no diagrama abaixo:   Para implementar esses requisitos, vamos adicionar o  Router  do Angular \u00e0 aplica\u00e7\u00e3o.  O plano de a\u00e7\u00e3o, ent\u00e3o, \u00e9:   Transformar o  AppComponent  numa \"casca\" para lidar somente com a navega\u00e7\u00e3o da aplica\u00e7\u00e3o.  Mover a l\u00f3gica a respeito da listagem de her\u00f3is do  AppComponent  para um novo componente.  Adicionar navega\u00e7\u00e3o.  Criar um novo componente para o Dashboard.  Incluir o Dashboard na estrutura de navega\u00e7\u00e3o da aplica\u00e7\u00e3o.",
            "title": "Plano de a\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#dividindo-o-appcomponent",
            "text": "A vers\u00e3o atual da aplica\u00e7\u00e3o est\u00e1 carregando e exibindo imediamente a lista de her\u00f3is.  Na nova vers\u00e3o, o  AppComponent  deve ser somente uma \"casca\" que lida com a navega\u00e7\u00e3o da aplica\u00e7\u00e3o entre a lista de her\u00f3is e o Dashboard.  Para isso, vamos mover a l\u00f3gica da listagem de her\u00f3is para o seu pr\u00f3prio componente  HeroesComponent .",
            "title": "Dividindo o AppComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-o-componente-heroescomponent",
            "text": "Como o  AppComponent  j\u00e1 est\u00e1 dedicado \u00e0 exibi\u00e7\u00e3o da lista de her\u00f3is, para facilitar, vamos simplesmente renome\u00e1-lo para  HeroesComponent :   Renomeie o arquivo  app.component.ts  para  heroes.component.ts .  Renomeie o componente  AppComponent  para  HeroesComponent .  Renomeie o selector  app-root  para  app-heroes  Refatore os arquivos  app.component.{html,css,spec}  para  heroes.component.{html,css,spec} .   Com as mudan\u00e7as, o novo  HeroesComponent  deve ser como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 // ... (imports omitidos)  @ Component ({ \n   selector :   'app-heroes' , \n   templateUrl :   './heroes.component.html' , \n   styleUrls :   [ './heroes.component.css' ]  })  export   class   HeroesComponent   implements   OnInit   { \n   title   =   'Tour of Heroes' ; \n   selectedHero :   Hero ; \n   heroes :   Hero []; \n\n   // ... (construtor e m\u00e9todo omitidos)  }",
            "title": "Criando o componente HeroesComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#recriando-o-componente-appcomponent",
            "text": "O novo  AppComponent  ser\u00e1 a casca da aplica\u00e7\u00e3o. Ele deve mostrar os links de navega\u00e7\u00e3o no topo da p\u00e1gina e, abaixo, ter\u00e1 uma \u00e1rea de exibi\u00e7\u00e3o para os componentes filhos.  Siga os seguintes passos:   Crie o arquivo  src/app/app.component.ts .  Defina a classe  AppComponent  (lembre-se de export\u00e1-la).  Adicione o decorador  @Component  com o selector  app-root .  Mova os seguintes trechos do  HeroesComponent  para o novo  AppComponent :  A propriedade  title .  O trecho do template com o  <h1> .  Adicione uma tag  <app-heroes>  no template, logo abaixo do  <h1> .  Adicione o  HeroesComponent  ao array  declarations  do  AppModule . Dessa forma, o Angular reconhece a tag  <app-heroes>  em qualquer vis\u00e3o.  Lembre-se de incluir as express\u00f5es import necess\u00e1rias no  AppComponent .   Agora, o  app.component.ts  deve estar como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-root' , \n   template :   `      <h1>{{title}}</h1>      <app-heroes></app-heroes>    `  })  export   class   AppComponent   { \n   title   =   'Tour of Heroes' ;  }    E o  app.module.ts :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   {   NgModule   }   from   '@angular/core' ;  import   {   FormsModule   }   from   '@angular/forms' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   HeroDetailComponent   }   from   './hero-detail.component' ;  import   {   HeroesComponent   }   from   './heroes.component' ;  @ NgModule ({ \n   declarations :   [ AppComponent ,   HeroesComponent ,   HeroDetailComponent ], \n   imports :   [ BrowserModule ,   FormsModule ], \n   providers :   [], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {}    Volte para o navegador e veja que a aplica\u00e7\u00e3o ainda est\u00e1 rodando e exibindo a lista de her\u00f3is.",
            "title": "Recriando o componente AppComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#adicionando-navegacao",
            "text": "Seguindo os nossos requisitos, o usu\u00e1rio deve poder navegar para a vis\u00e3o da lista de her\u00f3is a partir das outras vis\u00f5es que vamos construir.  Para configurar as  rotas  do  Tour of Heroes , vamos usar o  RouterModule , um m\u00f3dulo que prov\u00ea servi\u00e7os, diretivas e configura\u00e7\u00f5es relacionadas \u00e0 navega\u00e7\u00e3o da aplica\u00e7\u00e3o.",
            "title": "Adicionando navega\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#elemento-base-href",
            "text": "Antes de configurar as rotas, abra o arquivo  index.html  e verifique se existe o elemento  <base href>  dentro da tag  head :  1\n2\n3\n4\n5 < head > \n  ...\n   < base   href = \"/\" > \n  ... </ head >    Esse elemento \u00e9 usado como prefixo nas URLs relativas (para referenciar recursos como CSS, scripts e imagens).",
            "title": "Elemento &lt;base href&gt;"
        },
        {
            "location": "/exercicios/exercicio-07/#configurando-as-rotas",
            "text": "Uma  rota  determina qual \u00e9 a vis\u00e3o da aplica\u00e7\u00e3o que deve ser exibida quando um usu\u00e1rio clica num link ou quando o usu\u00e1rio digita (ou cola) a URL na barra de navega\u00e7\u00e3o do navegador.  Para definir uma rota da aplica\u00e7\u00e3o, vamos seguir a seguinte configura\u00e7\u00e3o:  1\n2\n3\n4\n5\n6\n7\n8 import   {   RouterModule   }     from   '@angular/router' ;  RouterModule . forRoot ([ \n   { \n     path :   'heroes' , \n     component :   HeroesComponent \n   }  ])    As rotas da aplica\u00e7\u00e3o s\u00e3o definidas em um array, em que cada elemento possui as seguintes propriedades:   path : o router checa esse caminho com a URL na barra de navega\u00e7\u00e3o do browser.  component : define o componente que deve ser criado quando se navega para essa rota.",
            "title": "Configurando as rotas"
        },
        {
            "location": "/exercicios/exercicio-07/#configurando-o-routermodule",
            "text": "O  RouterModule  \u00e9 um m\u00f3dulo Angular opcional e, por isso, deve ser importado para poder ser utilizado.  Configure o  app.module.ts  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   {   NgModule   }         from   '@angular/core' ;  import   {   BrowserModule   }    from   '@angular/platform-browser' ;  import   {   FormsModule   }      from   '@angular/forms' ;  import   {   RouterModule   }     from   '@angular/router' ;   // (1) <-- importe o s\u00edmbolo \"RouterModule\"  import   {   AppComponent   }          from   './app.component' ;  import   {   HeroDetailComponent   }   from   './hero-detail.component' ;  import   {   HeroesComponent   }       from   './heroes.component' ;  @ NgModule ({ \n   imports :   [ \n     BrowserModule , \n     FormsModule , \n     RouterModule . forRoot ([            // <-- (2) importe o \"RouterModule\" na nossa aplica\u00e7\u00e3o \n       {                               // <-- (2.1) e configure a nossa primeira rota \n         path :   'heroes' ,              \n         component :   HeroesComponent   \n       }                              \n     ])                               \n   ], \n   declarations :   [ \n     AppComponent , \n     HeroDetailComponent , \n     HeroesComponent \n   ], \n   providers :   [], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {  }",
            "title": "Configurando o RouterModule"
        },
        {
            "location": "/exercicios/exercicio-07/#router-outlet",
            "text": "Se voc\u00ea colar o caminho \"/heroes\" ao final da URL na barra de endere\u00e7o do navegador, o router deve identificar que essa URL se refere \u00e0 rota que configuramos anteriormente e deve exibir o  HeroesComponent . No entanto, voc\u00ea precisa dizer ao router onde o componente deve ser exibido na p\u00e1gina.  Para isso, vamos adicionar um elemento  <router-outlet>  ao final do template do  AppComponent .  \u00c9 imediatamente abaixo do  <router-outlet>  que o router exibe cada componente \u00e0 medida em que o usu\u00e1rio navega pela aplica\u00e7\u00e3o.  O elemento  <router-outlet>  refere-se \u00e0 diretiva  RouterOutlet  do  RouterModule . N\u00f3s conseguimos utiliz\u00e1-lo nos templates dos nossos componentes porque j\u00e1 importamos o m\u00f3dulo  RouterModule  na aplica\u00e7\u00e3o anteriormente.",
            "title": "Router outlet"
        },
        {
            "location": "/exercicios/exercicio-07/#router-links",
            "text": "Para navegar entre as vis\u00f5es, os usu\u00e1rios n\u00e3o deveriam ter que colar a URL na barra de navega\u00e7\u00e3o. Ao inv\u00e9s disso, vamos adicionar elementos  <a>  para que, quando clicados, disparem a navega\u00e7\u00e3o.  Reescreva o template do  AppComponent  como abaixo:  1\n2\n3\n4\n5 template :   `     <h1>{{title}}</h1>     <a routerLink=\"/heroes\">Heroes</a>     <router-outlet></router-outlet>   `    Note que adicionamos ao elemento  <a>  a propriedade  routerLink . A diretiva  RouterLink  (outra diretiva do  RouterModule ) recebe como valor a string que diz ao router para onde ele deve navegar quando o usu\u00e1rio clica no link.  Olhando na nossa configura\u00e7\u00e3o, podemos confirmar que o caminho '/heroes' refere-se \u00e0 rota para o componente  HeroesComponent .  Recarregue o navegador. Verifique que a lista de her\u00f3is n\u00e3o \u00e9 mais exibida quando a aplica\u00e7\u00e3o \u00e9 carregada. Voc\u00ea s\u00f3 deve ver o t\u00edtulo da aplica\u00e7\u00e3o e o link para a lista de her\u00f3is.  Clique no link \"Heroes\". A barra de navega\u00e7\u00e3o muda para \"/heroes\" e a lista de her\u00f3is \u00e9 exibida.  Revise o conte\u00fado do  AppComponent , que deve estar como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-root' , \n   template :   `        <h1>{{title}}</h1>        <a routerLink=\"/heroes\">Heroes</a>        <router-outlet></router-outlet>      `  })  export   class   AppComponent   { \n   title   =   'Tour of Heroes' ;  }",
            "title": "Router links"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-o-dashboardcomponent",
            "text": "Navega\u00e7\u00e3o s\u00f3 faz sentido se tivermos mais de uma vis\u00e3o.  Vamos, ent\u00e3o, adicionar um novo componente para a vis\u00e3o do Dashboard.  Vamos utilizar o Angular CLI para gerar nosso componente:  1 ng generate component dashboard   O resultado no console deve ser algo como:  1\n2\n3\n4\n5 CREATE src/app/dashboard/dashboard.component.css  ( 0  bytes ) \nCREATE src/app/dashboard/dashboard.component.html  ( 28  bytes ) \nCREATE src/app/dashboard/dashboard.component.spec.ts  ( 649  bytes ) \nCREATE src/app/dashboard/dashboard.component.ts  ( 281  bytes ) \nUPDATE src/app/app.module.ts  ( 771  bytes )    Tornaremos o componente mais \u00fatil depois.",
            "title": "Criando o DashboardComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#configurando-a-rota-do-dashboard",
            "text": "Para ensinar ao  app.module.ts  como navegar para a vis\u00e3o do Dashboard, adicione o objeto de configura\u00e7\u00e3o ao array de rotas da aplica\u00e7\u00e3o:  1\n2\n3\n4 { \n   path :   'dashboard' , \n   component :   DashboardComponent  },    N\u00e3o esque\u00e7a de declarar o  DashboardComponent  no m\u00f3dulo  AppModule  (se j\u00e1 n\u00e3o estiver declarado):  1\n2\n3\n4\n5\n6 declarations :   [ \n   AppComponent , \n   HeroDetailComponent , \n   HeroesComponent , \n   DashboardComponent   // (!) <-- adicione o DashboardComponent ao array declarations  ],",
            "title": "Configurando a rota do Dashboard"
        },
        {
            "location": "/exercicios/exercicio-07/#redirecionando-rotas",
            "text": "Nesse momento, n\u00e3o h\u00e1 nenhuma rota configurada para o caminho \"/\", e, quando o navegador carrega a aplica\u00e7\u00e3o, nenhum dos nossos componentes ( HeroesComponent  ou  DashboardComponent ) ser\u00e1 exibido.  Para redirecionar o caminho \"/\" para o caminho \"/dashboard\" e, portanto, exibir o componente  DashboardComponent  por padr\u00e3o quando a aplica\u00e7\u00e3o \u00e9 carregada, vamos usar uma rota de  redirecionamento .  Para isso, adicione uma nova defini\u00e7\u00e3o de rota como abaixo:  1\n2\n3\n4\n5 { \n   path :   '' , \n   redirectTo :   '/dashboard' , \n   pathMatch :   'full'  },",
            "title": "Redirecionando rotas"
        },
        {
            "location": "/exercicios/exercicio-07/#adicionando-um-link-de-navegacao-para-o-dashboard",
            "text": "Atualize o template do  AppComponent , adicionando um link para o Dashboard logo acima do link para a lista de her\u00f3is:  1\n2\n3\n4\n5\n6\n7\n8 template :   `     <h1>{{title}}</h1>     <nav>       <a routerLink=\"/dashboard\">Dashboard</a>       <a routerLink=\"/heroes\">Heroes</a>     </nav>     <router-outlet></router-outlet>   `    Perceba que tamb\u00e9m adicionamos a tag  <nav> . Nesse momento, ela n\u00e3o faz nada, mas ela ser\u00e1 \u00fatil mais tarde para criar regras de estilo CSS.  No seu navegador, v\u00e1 para a raiz da aplica\u00e7\u00e3o (/) e recarregue a p\u00e1gina. A aplica\u00e7\u00e3o exibe o Dashboard e voc\u00ea pode navegar entre as vis\u00f5es usando os links de navega\u00e7\u00e3o.",
            "title": "Adicionando um link de navega\u00e7\u00e3o para o Dashboard"
        },
        {
            "location": "/exercicios/exercicio-07/#adicionando-herois-ao-dashboard",
            "text": "Vamos agora implementar de fato o Dashboard, que deve apresentar os 4 principais her\u00f3is do Tour of Heroes.  Altere o arquivo  dashboard.component.html  na pasta  src/app/dashboard  com o conte\u00fado abaixo  1\n2\n3\n4\n5\n6\n7\n8 < h3 > Top Heroes </ h3 >  < div   class = \"grid grid-pad\" > \n   < div   * ngFor = \"let hero of heroes\"   class = \"col-1-4\" > \n     < div   class = \"module hero\" > \n       < h4 > {{hero.name}} </ h4 > \n     </ div > \n   </ div >  </ div >    A diretiva  *ngFor  \u00e9 usada novamente para iterar sobre a lista de her\u00f3is e exibir seus nomes. Os elementos  <div>  extras ser\u00e3o \u00fateis para os estilos CSS mais tarde.",
            "title": "Adicionando her\u00f3is ao Dashboard"
        },
        {
            "location": "/exercicios/exercicio-07/#compartilhando-o-servico-heroservice",
            "text": "Para popular o array de her\u00f3is do  DashboardComponent , vamos reutilizar o  HeroService .  No arquivo  dashboard.component.ts , adicione os \"import\"s necess\u00e1rios:  1\n2\n3\n4 import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   Hero   }   from   '../hero' ;  import   {   HeroService   }   from   '../hero.service' ;    Reescreva a classe  DashboardComponent  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 export   class   DashboardComponent   implements   OnInit   { \n\n   heroes :   Hero []   =   []; \n\n   constructor ( private   heroService :   HeroService )   {   } \n\n   ngOnInit () :   void   { \n     this . heroService . getTopHeroes () \n       . then ( heroes   =>   this . heroes   =   heroes ); \n   }  }   \nAdicioneo o m\u00e9todo  getTopHeroes  no  HeroService  1\n2\n3 getTopHeroes () :   Promise < Hero [] >   { \n   return   Promise . resolve ( HEROES . slice ( 0 ,   4 ));  }    Se voc\u00ea olhar com cuidado, ver\u00e1 que estamos usando a mesma estrutura do  HeroesComponent :   Definimos uma propriedade  heroes  do tipo array de  Hero .  Injetamos o  HeroService  no construtor da classe, guardando a inst\u00e2ncia numa propriedade privada  heroService .  Chamamos o servi\u00e7o para recuperar a lista dos her\u00f3is tops no m\u00e9todo  ngOnInit() .   Recarregue o navegador e veja que os nomes dos 4 her\u00f3is no novo Dashboard.",
            "title": "Compartilhando o servi\u00e7o HeroService"
        },
        {
            "location": "/exercicios/exercicio-07/#navegando-para-os-detalhes-do-heroi",
            "text": "Nesse momento, quando o usu\u00e1rio seleciona um her\u00f3i da lista do componente  HeroesComponent , os detalhes do her\u00f3i selecionado s\u00e3o exibidos ao final da p\u00e1gina.  No entanto, o usu\u00e1rio deveria poder visualizar os detalhes do her\u00f3i de outras maneiras. Isto \u00e9, tamb\u00e9m deveria ser poss\u00edvel navegar para o componente  HeroDetailComponent  nas seguintes formas:   A partir do top 4 her\u00f3is do  DashboardComponent ;  A partir da lista de her\u00f3is do  HeroesComponent ;  A partir de um  deep link  digitado na barra de endere\u00e7o do navegador.   Vamos, ent\u00e3o, configurar uma nova rota para o  HeroDetailComponent .",
            "title": "Navegando para os detalhes do her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-07/#configurando-a-rota-do-herodetailcomponent",
            "text": "Para configurar a rota para o componente  HeroDetailComponent , vamos adicionar mais um item ao array de rotas configuradas no  app.module.ts .  A configura\u00e7\u00e3o da nova rota \u00e9 um pouco diferente das rotas que j\u00e1 configuramos porque, agora, precisamos dizer ao  HeroDetailComponent  qual \u00e9 o her\u00f3i que deve ser exibido. Nas outras rotas (seja para o  DashboardComponent , seja para o  HeroesComponent ), n\u00e3o foi preciso dizer nada.  Nesse momento, para exibir os detalhes do her\u00f3i no  HeroDetailComponent , o componente pai  HeroesComponent  est\u00e1 fazendo um binding da propriedade  hero :  1 < hero-detail   [ hero ]=\" selectedHero \" ></ hero-detail >    No entanto, esse binding n\u00e3o ir\u00e1 funcionar para a navega\u00e7\u00e3o.\nPara navega\u00e7\u00e3o, usamos as  rotas parametrizadas .",
            "title": "Configurando a rota do HeroDetailComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#rota-parametrizada",
            "text": "Para indicar qual \u00e9 o her\u00f3i que deve ser exibido, vamos adicionar um par\u00e2metro \u00e0 URL:  id  do her\u00f3i.  Por exemplo, quando quisermos navegar para o her\u00f3i de  id   11 , a URL esperada seria algo como:  /detail/11  A parte  /detail  da URL \u00e9 constante. O sufixo num\u00e9rico que corresponde ao id muda de her\u00f3i para her\u00f3i.  Vamos, ent\u00e3o, representar essa parte vari\u00e1vel como um  par\u00e2metro  da rota.",
            "title": "Rota parametrizada"
        },
        {
            "location": "/exercicios/exercicio-07/#configurando-uma-rota-parametrizada",
            "text": "Adicione a seguinte defini\u00e7\u00e3o ao array de rotas no arquivo  app.module.ts :  1\n2\n3\n4 ,   { \n   path :   'detail/:id' , \n   component :   HeroDetailComponent  }    Os dois-pontos ( : ) no  path  indicam que o  :id  \u00e9 um par\u00e2metro da navega\u00e7\u00e3o para o componente  HeroDetailComponent .  Finalizamos as configura\u00e7\u00f5es de rota. Agora, vamos revisar o componente  HeroDetailComponent  para que ele esteja pronto para a rota parametrizada.",
            "title": "Configurando uma rota parametrizada"
        },
        {
            "location": "/exercicios/exercicio-07/#revisando-o-herodetailcomponent",
            "text": "Essa \u00e9 a implementa\u00e7\u00e3o atual do componente  HeroDetailComponent :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   Hero   }   from   './hero' ;  @ Component ({ \n   selector :   'hero-detail' , \n   templateUrl :   './hero-detail.component.html'  })  export   class   HeroDetailComponent   { \n   @ Input ()   hero :   Hero ;  }    N\u00e3o iremos mudar nada no template (html), pois a forma de exibir os dados do her\u00f3i ir\u00e1 continuar a mesma. A mudan\u00e7a ser\u00e1 quanto \u00e0 forma de recuperar os dados do her\u00f3i.  N\u00e3o iremos mais receber o her\u00f3i a partir de um binding de um componente pai. Nessa nova forma de navega\u00e7\u00e3o, iremos receber o  id  do her\u00f3i a ser exibido como par\u00e2metro da rota e vamos usar o  HeroService  para recuperar o her\u00f3i com esse  id .  Para isso, adicione os seguintes imports no arquivo  hero-detail.component.ts :  1\n2\n3\n4\n5\n6\n7\n8 // Pode manter o import do Input por enquanto... voc\u00ea remover\u00e1 ele futuramente:  import   {   Component ,   Input ,   OnInit   }   from   '@angular/core' ;  import   {   ActivatedRoute ,   ParamMap   }   from   '@angular/router' ;  import   {   Location   }   from   '@angular/common' ;  import   {   switchMap   }   from   'rxjs/operators' ;  import   {   HeroService   }   from   './hero.service' ;  import   {   Hero   }   from   './hero' ;    Em seguida, injete os servi\u00e7os  ActivatedRoute ,  HeroService , e  Location  em par\u00e2metros privados no construtor:  1\n2\n3\n4\n5 constructor ( \n   private   heroService :   HeroService , \n   private   route :   ActivatedRoute , \n   private   location :   Location  )   {}    Adicione a interface  OnInit  na assinatura da classe:  1 export   class   HeroDetailComponent   implements   OnInit   {    No m\u00e9todo  ngOnInit() , use o  paramMap  do servi\u00e7o  ActivatedRoute  para extrair o valor do par\u00e2metro  id  e use o servi\u00e7o  HeroService  para recuperar o her\u00f3i com esse  id :  1\n2\n3\n4\n5\n6\n7 ngOnInit () :   void   { \n   this . route . paramMap \n     . pipe ( \n       switchMap (( params :   ParamMap )   =>   this . heroService . getHero ( + params . get ( 'id' ))) \n     ) \n     . subscribe ( hero   =>   this . hero   =   hero );  }    O operador  switchMap  mapeia o par\u00e2metro  id  da rota (um  Observable ) em um resultado da chamada ao m\u00e9todo  HeroService.getHero()  (outro  Observable ).  Se o usu\u00e1rio navegar para este componente enquanto a requisi\u00e7\u00e3o ao  getHero  ainda estiver processando, o  switchMap  cancela a requisi\u00e7\u00e3o anterior e faz uma nova chamada ao m\u00e9todo  HeroService.getHero() .  O operador JavaScript  +  converte o par\u00e2metro da rota (que \u00e9 uma String) em um n\u00famero.  O operador  subscribe  registra uma fun\u00e7\u00e3o callback que ser\u00e1 executada automaticamente ap\u00f3s o resultado do m\u00e9todo  HeroService.getHero() .",
            "title": "Revisando o HeroDetailComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#e-preciso-fazer-o-unsubscribe",
            "text": "Normalmente, em se tratando de  Observables , sempre que criamos uma \"assinatura\" (isto \u00e9, sempre que invocamos o m\u00e9todo  subscribe  de um  Observable ), \u00e9 importante registrar tamb\u00e9m o cancelamento da assinatura em um momento apropriado.  Essa boa pr\u00e1tica evita problemas de  memory leak , que pode degradar o desempenho da aplica\u00e7\u00e3o de forma \"silenciosa\".  No entanto, o  Router  \u00e9 capaz de gerenciar seus pr\u00f3prios  Observables  e localizar as suas assinaturas, limpando-as automaticamente quando o componente \u00e9 destru\u00eddo.  Dessa forma, voc\u00ea n\u00e3o precisa fazer o  unsubscribe  dos par\u00e2metros no  paramMap .",
            "title": "\u00c9 preciso fazer o unsubscribe?"
        },
        {
            "location": "/exercicios/exercicio-07/#adicionando-o-metodo-heroservicegethero",
            "text": "No trecho de c\u00f3digo anterior, n\u00f3s inclu\u00edmos uma chamada ao m\u00e9todo  getHero()  do servi\u00e7o  HeroService . No entanto, n\u00f3s ainda n\u00e3o implementamos esse m\u00e9todo.  Por isso, adicione o m\u00e9todo  getHero()  ao arquivo  hero.service.ts  como abaixo:  1\n2\n3\n4 getHero ( id :  number ) :   Promise < Hero >   { \n   return   this . getHeroes () \n              . then ( heroes   =>   heroes . find ( hero   =>   hero . id   ===   id ));  }    Estamos reusando o m\u00e9todo  getHeroes()  e filtrando o resultado para achar o her\u00f3i com o  id  informado.",
            "title": "Adicionando o m\u00e9todo HeroService.getHero()"
        },
        {
            "location": "/exercicios/exercicio-07/#achando-o-caminho-de-volta",
            "text": "Como j\u00e1 vimos, o usu\u00e1rio ter\u00e1 v\u00e1rias formas de navegar para o  HeroDetailComponent .  Para retornar um passo no hist\u00f3rico de navega\u00e7\u00e3o, implemente o m\u00e9todo  goBack() , que usa o servi\u00e7o  Location  que injetamos anteriormente:  1\n2\n3 goBack () :   void   { \n   this . location . back ();  }    Esse m\u00e9todo ser\u00e1 chamado a partir do clique no bot\u00e3o \"Voltar\" na p\u00e1gina:  1 < button   type = \"button\"   ( click )=\" goBack ()\" > Voltar </ button >    Vamos ent\u00e3o, migrar o template do componente  HeroDetailComponent  para o seu pr\u00f3prio arquivo  hero-detail.component.html :  1\n2\n3\n4\n5\n6\n7\n8\n9 < div   * ngIf = \"hero\" > \n     < h2 > {{hero.name}} details! </ h2 > \n     < div > id: {{hero.id}} </ div > \n     < div > \n         < label   for = \"hero-name\" > Nome: </ label > \n         < input   id = \"hero-name\"   [( ngModel )]=\" hero . name \"   placeholder = \"Nome do her\u00f3i\" > \n     </ div > \n     < button   type = \"button\"   ( click )=\" goBack ()\" > Voltar </ button >  </ div >    Lembre-se de atualizar os metadados do componente para referenciar o novo arquivo na propriedade  templateUrl  (se ainda n\u00e3o estiver atualizado):  1\n2\n3\n4 @ Component ({ \n   selector :   'hero-detail' , \n   templateUrl :   './hero-detail.component.html' ,  })    Recarregue o navegador e verifique os resultados.",
            "title": "Achando o caminho de volta"
        },
        {
            "location": "/exercicios/exercicio-07/#selecionando-um-heroi-a-partir-do-dashboard",
            "text": "Quando um usu\u00e1rio clica em um her\u00f3i no Dashboard, a aplica\u00e7\u00e3o deveria navegar para o  HeroDetailComponent  para a exibi\u00e7\u00e3o dos detalhes do her\u00f3i selecionado.  Apesar de os her\u00f3is do Dashboard terem a apar\u00eancia de bot\u00f5es, eles devem se comportar como links de navega\u00e7\u00e3o. Quando o usu\u00e1rio passar o mouse por cima de um her\u00f3i, a URL dos detalhes desse her\u00f3i deveria aparecer na barra de status do navegador.  Para fazer isso, reabra o arquivo  dashboard.component.html  e troque a tag  <div *ngFor...>  pela tag  <a> . O resultado esperado \u00e9:  1 < a   * ngFor = \"let hero of heroes\"    [ routerLink ]=\"['/ detail ',   hero . id ]\"    class = \"col-1-4\" >    Perceba como fizemos o binding com a propriedade  routerLink . Dessa vez, estamos fazendo um binding com um array de par\u00e2metros. Esse array tem duas partes:   O caminho para a rota de destino; e  O par\u00e2metro da rota (nesse caso, o  id  do her\u00f3i).   Os dois itens desse array est\u00e3o \"alinhados\" com o caminho e o par\u00e2metro da defini\u00e7\u00e3o da rota que adicionamos anteriormente ao  app.module.ts :  1\n2\n3\n4 { \n   path :   'detail/:id' , \n   component :   HeroDetailComponent  },    Recarregue o navegador e selecione um her\u00f3i a partir do Dashboard. A aplica\u00e7\u00e3o deve navegar para os detalhes do her\u00f3i selecionado.",
            "title": "Selecionando um her\u00f3i a partir do Dashboard"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-um-modulo-de-navegacao",
            "text": "Se voc\u00ea olhar agora o c\u00f3digo do arquivo  app.module.ts , vai ver que quase 20 linhas est\u00e3o dedicadas \u00e0 configura\u00e7\u00e3o das rotas.  A maioria das aplica\u00e7\u00f5es possuem muito mais rotas que, al\u00e9m disso, podem conter configura\u00e7\u00f5es que previnem o acesso indesejado ou n\u00e3o autorizado.  As configura\u00e7\u00f5es de navega\u00e7\u00e3o podem rapidamente dominar o  AppModule , obscurecendo seu prop\u00f3sito inicial, que \u00e9 estabelecer os principais fatos sobre a aplica\u00e7\u00e3o como um todo para o compilador Angular.  \u00c9 uma boa ideia, ent\u00e3o, refatorar essas configura\u00e7\u00f5es para sua pr\u00f3pria classe, que \u00e9 conhecido como um  m\u00f3dulo de navega\u00e7\u00e3o .  Por conven\u00e7\u00e3o, o nome do m\u00f3dulo de navega\u00e7\u00e3o deve conter a palavra  Routing  e estar alinhado com o nome do m\u00f3dulo que declara seus componentes naveg\u00e1veis.  Crie, ent\u00e3o, o arquivo  app-routing.module.ts  na pasta  src/app  (isto \u00e9, no mesmo n\u00edvel do  app-module.ts ), com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   NgModule   }   from   '@angular/core' ;  import   {   RouterModule ,   Routes   }   from   '@angular/router' ;  import   {   DashboardComponent   }   from   './dashboard/dashboard.component' ;  import   {   HeroDetailComponent   }   from   './hero-detail.component' ;  import   {   HeroesComponent   }   from   './heroes.component' ;  const   routes :   Routes   =   [ \n   {   path :   '' ,   redirectTo :   '/dashboard' ,   pathMatch :   'full'   }, \n   {   path :   'dashboard' ,   component :   DashboardComponent   }, \n   {   path :   'detail/:id' ,   component :   HeroDetailComponent   }, \n   {   path :   'heroes' ,   component :   HeroesComponent   }  ];  @ NgModule ({ \n   imports :   [ RouterModule . forRoot ( routes )], \n   exports :   [ RouterModule ]  })  export   class   AppRoutingModule   {}    As seguintes caracter\u00edsticas s\u00e3o comuns em m\u00f3dulos de navega\u00e7\u00e3o:   As configura\u00e7\u00f5es das rotas s\u00e3o definidas em uma vari\u00e1vel, podendo ser exportadas e utilizadas por outras classes;  O m\u00f3dulo adiciona o  RouterModule.forRoot(routes)  no  imports ;  O m\u00f3dulo adiciona o  RouterModule  no  exports , para que os componentes do m\u00f3dulo original tenham acesso \u00e0s diretivas e servi\u00e7os do  RouterModule  (como o  RouterLink  e o  RouterOutlet );  N\u00e3o h\u00e1 um array de  declarations , pois isso \u00e9 de responsabilidade do m\u00f3dulo original;  Se a aplica\u00e7\u00e3o implementa um controle de autoriza\u00e7\u00e3o de rotas, o m\u00f3dulo adiciona os servi\u00e7os necess\u00e1rios (conhecidos como servi\u00e7os de  route guards ) no array  providers .",
            "title": "Criando um m\u00f3dulo de navega\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#atualizando-o-appmodule",
            "text": "Volte ao  app-module.ts , apague a configura\u00e7\u00e3o de rotas e importe o  AppRoutingModule .  Essa \u00e9 a vers\u00e3o revisada do  AppModule :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 import   {   NgModule   }   from   '@angular/core' ;  import   {   FormsModule   }   from   '@angular/forms' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   HeroDetailComponent   }   from   './hero-detail.component' ;  import   {   HeroesComponent   }   from   './heroes.component' ;  import   {   DashboardComponent   }   from   './dashboard/dashboard.component' ;  import   {   AppRoutingModule   }   from   './app-routing.module' ;  @ NgModule ({ \n   declarations :   [ \n     AppComponent , \n     HeroesComponent , \n     HeroDetailComponent , \n     DashboardComponent \n   ], \n   imports :   [ \n     BrowserModule , \n     FormsModule , \n     AppRoutingModule \n   ], \n   providers :   [], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {}    Essa vers\u00e3o revisada \u00e9 focada em identificar os peda\u00e7os importantes da aplica\u00e7\u00e3o, delegando a navega\u00e7\u00e3o para o m\u00f3dulo de navega\u00e7\u00e3o  AppRoutingModule .",
            "title": "Atualizando o AppModule"
        },
        {
            "location": "/exercicios/exercicio-07/#selecionando-um-heroio-no-heroescomponent",
            "text": "No componente  HeroesComponent , o template (html) atual implementa o padr\u00e3o mestre/detalhe, exibindo uma lista de her\u00f3is no topo da p\u00e1gina e o her\u00f3i selecionado abaixo dela.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 < h2 > Meus her\u00f3is </ h2 >  < ul   class = \"heroes\" > \n   < li   * ngFor = \"let hero of heroes\" \n     [ class . selected ]=\" hero  = ==   selectedHero \" \n     ( click )=\" onSelect ( hero )\" > \n     < span   class = \"badge\" > {{hero.id}} </ span >  {{hero.name}}\n   </ li >  </ ul >  < hero-detail   [ hero ]=\" selectedHero \" ></ hero-detail >    Apague tamb\u00e9m a \u00faltima linha do template, que cont\u00e9m o elemento  <hero-detail> .  N\u00e3o vamos mais exibir os detalhes completos do her\u00f3i selecionado. Ao inv\u00e9s disso, vamos criar uma navega\u00e7\u00e3o para o componente  HeroDetailComponent .  No entanto, quando o usu\u00e1rio selecionar um her\u00f3i da lista, n\u00e3o vamos navegar diretamente para a p\u00e1gina de detalhes. Antes disso, vamos mostrar uma se\u00e7\u00e3o resumida dos detalhes do her\u00f3i junto com um bot\u00e3o de navega\u00e7\u00e3o. Quando esse bot\u00e3o for clicado, a\u00ed sim, ser\u00e1 disparada a navega\u00e7\u00e3o para a p\u00e1gina dos detalhes completos do her\u00f3i.",
            "title": "Selecionando um her\u00f3io no HeroesComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#adicionando-a-secao-de-detalhes-resumidos",
            "text": "Adicione o seguinte fragmento HTML ao final do template ( heroes.component.html ), onde antes estava o elemento  <hero-detail> :  1\n2\n3\n4\n5\n6 < div   * ngIf = \"selectedHero\" > \n   < h2 > \n    {{selectedHero.name | uppercase}} is my hero\n   </ h2 > \n   < button   ( click )=\" gotoDetail ()\" > View Details </ button >  </ div >    Agora, ao clicar em um her\u00f3i da lista, o usu\u00e1rio dever\u00e1 ver algo como:",
            "title": "Adicionando a se\u00e7\u00e3o de detalhes resumidos"
        },
        {
            "location": "/exercicios/exercicio-07/#o-pipe-uppercase",
            "text": "Perceba que o nome do her\u00f3i selecionado est\u00e1 sendo exibido em letras mai\u00fasculas.  Isso acontece porque o pipe  uppercase  foi inclu\u00eddo \u00e0 interpola\u00e7\u00e3o, logo ap\u00f3s o operador pipe ( | ).  1 {{selectedHero.name | uppercase}} is my hero   Os pipes s\u00e3o \u00fateis para formatar strings, valores monet\u00e1rios, datas e outros tipos de dados para exibi\u00e7\u00e3o na tela. O Angular j\u00e1 fornece alguns pipes padr\u00f5es, mas voc\u00ea tamb\u00e9m pode escrever seus pr\u00f3prios pipes.",
            "title": "O pipe uppercase"
        },
        {
            "location": "/exercicios/exercicio-07/#atualizando-o-heroescomponent",
            "text": "O componente  HeroesComponent  navega para o  HeroDetailComponent  em resposta a um clique de bot\u00e3o. O evento do clique do bot\u00e3o faz um binding com o m\u00e9todo  gotoDetail() , que diz ao  Router  para onde a aplica\u00e7\u00e3o deve navegar.  Para esssa abordagem, voc\u00ea deve:   Importar o s\u00edmbolo  Router  da biblioteca router do Angular;  Injetar o servi\u00e7o  Router  no construtor, junto com o  HeroService ;  Implementar o m\u00e9todo  gotoDetail()  para chamar o m\u00e9todo  navigate()  do  Router .   1\n2\n3 gotoDetail () :   void   { \n   this . router . navigate ([ '/detail' ,   this . selectedHero . id ]);  }    Perceba que estamos passando um array com dois elementos (um caminho e um par\u00e2metro de rota) para o m\u00e9todo  navigate() , da mesma forma que fizemos com o binding  [routerLink]  no componente  DashboardComponent .  Essa \u00e9 a vers\u00e3o revisada da classe  HeroesComponent :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 export   class   HeroesComponent   implements   OnInit   { \n   selectedHero :   Hero ; \n   heroes :   Hero []; \n\n   constructor ( private   router :   Router ,   private   heroService :   HeroService )   {} \n\n   ngOnInit ()   { \n     this . getHeroes (); \n   } \n\n   onSelect ( hero :   Hero ) :   void   { \n     this . selectedHero   =   hero ; \n   } \n\n   getHeroes () :   void   { \n     this . heroService . getHeroes (). then ( heroes   =>   ( this . heroes   =   heroes )); \n   } \n\n   gotoDetail () :   void   { \n     this . router . navigate ([ '/detail' ,   this . selectedHero . id ]); \n   }  }    Recarregue o navegador e comece a clicar!  Agora, o usu\u00e1rio pode navegar por toda a aplica\u00e7\u00e3o: a partir do Dashboard para os detalhes do her\u00f3i e de volta; a partir da lista de her\u00f3is para os detalhes resumidos, e da\u00ed para os detalhes completos, e de novo para a lista de her\u00f3is.  Nesse ponto, implementamos todas os requisitos de navega\u00e7\u00e3o da aplica\u00e7\u00e3o.",
            "title": "Atualizando o HeroesComponent"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-estilos-para-a-aplicacao",
            "text": "A aplica\u00e7\u00e3o est\u00e1 funcionando, mas est\u00e1 precisando um pouco mais de estilo!  Com esse prop\u00f3sito, o designer da equipe criou 60 linhas de c\u00f3digo CSS para voc\u00ea incluir \u00e0 p\u00e1gina do Dashboard.  Como j\u00e1 aprendemos, n\u00e3o vamos mais adicionar as regras de estilo ao  styles  do decorador  @Component , pois ir\u00edamos obscurecer a l\u00f3gica do componente. Ao inv\u00e9s disso, vamos criar um arquivo  .css  pr\u00f3prio (ou editar o j\u00e1 existente) para esse fim.  Crie, ent\u00e3o, um arquivo  dashboard.component.css  \u00e0 pasta  /src/app , referenciando-o na propriedade  styleUrls  do  DashboardComponent :  1 styleUrls :   [   './dashboard.component.css'   ]    O conte\u00fado do arquivo  dashboard.component.css  \u00e9 o seguinte:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61 [ class *= 'col-' ]   { \n   float :   left ; \n   padding-right :   20 px ; \n   padding-bottom :   20 px ;  }  [ class *= 'col-' ] : last-of-type   { \n   padding-right :   0 ;  }  a   { \n   text-decoration :   none ;  }  *,   * : after ,   * : before   { \n   -webkit- box-sizing :   border-box ; \n   -moz- box-sizing :   border-box ; \n   box-sizing :   border-box ;  }  h3   { \n   text-align :   center ;   margin-bottom :   0 ;  }  h4   { \n   position :   relative ;  }  . grid   { \n   margin :   0 ;  }  . col-1-4   { \n   width :   25 % ;  }  . module   { \n   padding :   20 px ; \n   text-align :   center ; \n   color :   #eee ; \n   max-height :   120 px ; \n   min-width :   120 px ; \n   background-color :   #607D8B ; \n   border-radius :   2 px ;  }  . module : hover   { \n   background-color :   #EEE ; \n   cursor :   pointer ; \n   color :   #607d8b ;  }  . grid-pad   { \n   padding :   10 px   0 ;  }  . grid-pad   >   [ class *= 'col-' ] : last-of-type   { \n   padding-right :   20 px ;  }  @ media   ( max-width :   600px )   { \n   . module   { \n     font-size :   10 px ; \n     max-height :   75 px ;   }  }  @ media   ( max-width :   1024px )   { \n   . grid   { \n     margin :   0 ; \n   } \n   . module   { \n     min-width :   60 px ; \n   }  }",
            "title": "Criando estilos para a aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-estilos-para-os-detalhes-do-heroi",
            "text": "O designer se empolgou e tamb\u00e9m escreveu regras de estilo CSS para o componente  HeroDetailComponent .  Crie o arquivo  hero-detail.component.css  \u00e0 pasta  /src/app , referenciando-o no  styleUrls  do  HeroDetailComponent , com o conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 label   { \n   display :   inline-block ; \n   width :   3 em ; \n   margin :   .5 em   0 ; \n   color :   #607D8B ; \n   font-weight :   bold ;  }  input   { \n   height :   2 em ; \n   font-size :   1 em ; \n   padding-left :   .4 em ;  }  button   { \n   margin-top :   20 px ; \n   font-family :   Arial ; \n   background-color :   #eee ; \n   border :   none ; \n   padding :   5 px   10 px ; \n   border-radius :   4 px ; \n   cursor :   pointer ;   cursor :   hand ;  }  button : hover   { \n   background-color :   #cfd8dc ;  }  button : disabled   { \n   background-color :   #eee ; \n   color :   #ccc ;  \n   cursor :   auto ;  }    Ainda, no  hero-detail.component.ts , j\u00e1 \u00e9 poss\u00edvel remover o decorador  @Input  (e o seu import), pois j\u00e1 n\u00e3o s\u00e3o mais utilzados.",
            "title": "Criando estilos para os detalhes do her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-07/#criando-estilos-para-os-links-de-navegacao",
            "text": "Crie agora o arquivo  app.component.css  na pasta  /src/app , com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 h1   { \n   font-size :   1.2 em ; \n   color :   #999 ; \n   margin-bottom :   0 ;  }  h2   { \n   font-size :   2 em ; \n   margin-top :   0 ; \n   padding-top :   0 ;  }  nav   a   { \n   padding :   5 px   10 px ; \n   text-decoration :   none ; \n   margin-top :   10 px ; \n   display :   inline-block ; \n   background-color :   #eee ; \n   border-radius :   4 px ;  }  nav   a : visited ,   a : link   { \n   color :   #607D8B ;  }  nav   a : hover   { \n   color :   #039be5 ; \n   background-color :   #CFD8DC ;  }  nav   a . active   { \n   color :   #039be5 ;  }",
            "title": "Criando estilos para os links de navega\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#marcando-um-elemento-de-uma-rota-como-ativa",
            "text": "O roteador do Angular prov\u00ea a diretiva  routerLinkActive  para que voc\u00ea possa adicionar uma classe CSS ao elemento HTML quando a rota referenciada pelo elemento estiver ativa.  No nosso caso, queremos destacar o elemento  <a>  ativo com a classe  active . Para isso, modifique o template do  AppComponent  como abaixo:  1\n2\n3\n4\n5\n6\n7\n8 template :   `    <h1>{{title}}</h1>    <nav>      <a routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard</a>      <a routerLink=\"/heroes\" routerLinkActive=\"active\">Heroes</a>    </nav>    <router-outlet></router-outlet>  ` ,    Inclua a propriedade  styleUrls  ao componente  AppComponent  para referenciar o novo arquivo CSS:  1 styleUrls :   [ './app.component.css' ],",
            "title": "Marcando um elemento de uma rota como \"ativa\""
        },
        {
            "location": "/exercicios/exercicio-07/#estilos-globais",
            "text": "Quando adicionamos regras de estilo CSS a um componente, estamos juntando tudo o que o componente precisa - HTML, CSS e c\u00f3digo - em um \u00fanico lugar. Assim, \u00e9 mais f\u00e1cil empacot\u00e1-lo e reutiliz\u00e1-lo em outros lugares.  No entanto, tamb\u00e9m \u00e9 poss\u00edvel criar estilos no n\u00edvel de aplica\u00e7\u00e3o, isto \u00e9, estilos n\u00e3o relacionados somente a um componente espec\u00edfico.  Essas regras de estilos globais devem ser definidas no arquivo  /src/styles.css , que j\u00e1 foi criado automaticamente para a gente l\u00e1 no come\u00e7o dos exerc\u00edcios, quando criamos a aplica\u00e7\u00e3o usando o Angular CLI.  Defina ent\u00e3o o conte\u00fado do arquivo  styles.css  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65 /* Master Styles */  h1   { \n   color :   #369 ; \n   font-family :   Arial ,   Helvetica ,   sans-serif ; \n   font-size :   250 % ;  }  h2 ,   h3   { \n   color :   #444 ; \n   font-family :   Arial ,   Helvetica ,   sans-serif ; \n   font-weight :   lighter ;  }  body   { \n   margin :   2 em ;  }  body ,   input [ text ],   button   { \n   color :   #888 ; \n   font-family :   Cambria ,   Georgia ;  }  a   { \n   cursor :   pointer ; \n   cursor :   hand ;  }  button   { \n   font-family :   Arial ; \n   background-color :   #eee ; \n   border :   none ; \n   padding :   5 px   10 px ; \n   border-radius :   4 px ; \n   cursor :   pointer ; \n   cursor :   hand ;  }  button : hover   { \n   background-color :   #cfd8dc ;  }  button : disabled   { \n   background-color :   #eee ; \n   color :   #aaa ; \n   cursor :   auto ;  }  /* Navigation link styles */  nav   a   { \n   padding :   5 px   10 px ; \n   text-decoration :   none ; \n   margin-right :   10 px ; \n   margin-top :   10 px ; \n   display :   inline-block ; \n   background-color :   #eee ; \n   border-radius :   4 px ;  }  nav   a : visited ,   a : link   { \n   color :   #607D8B ;  }  nav   a : hover   { \n   color :   #039be5 ; \n   background-color :   #CFD8DC ;  }  nav   a . active   { \n   color :   #039be5 ;  }  /* everywhere else */  *   { \n   font-family :   Arial ,   Helvetica ,   sans-serif ;  }    Veja que, agora, a aplica\u00e7\u00e3o est\u00e1 toda estilosa.",
            "title": "Estilos globais"
        },
        {
            "location": "/exercicios/exercicio-07/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 angular-tour-of-heroes/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 src/\n|   \u251c\u2500\u2500 app/\n|   |   \u251c\u2500\u2500 dashboard/\n|   |   |   \u251c\u2500\u2500 dashboard.component.css\n|   |   |   \u251c\u2500\u2500 dashboard.component.html\n|   |   |   \u251c\u2500\u2500 dashboard.component.spec.ts\n|   |   |   \u2514\u2500\u2500 dashboard.component.ts\n|   |   \u251c\u2500\u2500 app.component.css\n|   |   \u251c\u2500\u2500 app.component.ts\n|   |   \u251c\u2500\u2500 app.module.ts\n|   |   \u251c\u2500\u2500 app-routing.module.ts\n|   |   \u251c\u2500\u2500 hero.service.ts\n|   |   \u251c\u2500\u2500 hero.ts\n|   |   \u251c\u2500\u2500 hero-detail.component.css\n|   |   \u251c\u2500\u2500 hero-detail.component.html\n|   |   \u251c\u2500\u2500 hero-detail.component.ts\n|   |   \u251c\u2500\u2500 heroes.component.css\n|   |   \u251c\u2500\u2500 heroes.component.html\n|   |   \u251c\u2500\u2500 heroes.component.ts\n|   |   \u251c\u2500\u2500 mock-heroes.ts\n|   \u251c\u2500\u2500 index.html\n|   \u251c\u2500\u2500 main.ts\n|   \u251c\u2500\u2500 styles.css\n|   \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 .angular-cli.json\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-07/#resumo",
            "text": "Aprendemos a usar o  Router  para navegar entre diferentes componentes;  Aprendemos a usar links est\u00e1ticos e parametrizados;  Reutilizamos um servi\u00e7o entre v\u00e1rios componentes;  Refatoramos os componentes para separar HTML e CSS;  Usamos um pipe para formatar a sa\u00edda de dados.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-07/#proximo-passo",
            "text": "Exerc\u00edcio 08",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-08/",
            "text": "Exerc\u00edcio 08\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nRefatorar a aplica\u00e7\u00e3o para recuperar (e salvar) dados de um servidor remoto.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n60 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\n\n\nEsse exerc\u00edcio evolui o Exerc\u00edcio 7. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta \n./workspace/exercicio-07-routing/\n\n\nSe estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a:\n\n1\ngit reset && git checkout -- .\n\n\n\n\n\n\n\nDeixe a aplica\u00e7\u00e3o rodando:\n\n\n1\n2\ncd\n app-exemplo\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nProvendo servi\u00e7os HTTP\n\u00b6\n\n\nAprendemos bastante at\u00e9 aqui e j\u00e1 temos as funda\u00e7\u00f5es para construir uma aplica\u00e7\u00e3o Angular. No entanto, ainda estamos trabalhando com dados mock de her\u00f3is.\n\n\nVamos, agora, substituir esses mocks por dados recuperados a partir de um API fazendo requisi\u00e7\u00f5es HTTP a um servidor remoto.\n\n\nPara realizar requisi\u00e7\u00f5es HTTP, vamos usar o m\u00f3dulo \nHttpClientModule\n.\n\n\nO m\u00f3dulo \nHttpClientModule\n \u00e9 opcional e \u00e9 implementado em uma biblioteca chamada \n@angular/common/http\n, externa ao m\u00f3dulo core do Angular. Por isso, para usar os servi\u00e7os HTTP, precisamos incluir a biblioteca \n@angular/common/http\n no \npackage.json\n, e declarar o m\u00f3dulo \nHttpClientModule\n no array de \nimports\n da nossa aplica\u00e7\u00e3o Angular.\n\n\nComo n\u00f3s criamos a nossa aplica\u00e7\u00e3o com o Angular CLI, a biblioteca \n@angular/common/http\n j\u00e1 est\u00e1 definida no \npackage.json\n e j\u00e1 estamos prontos para importar o m\u00f3dulo \nHttpClientModule\n na nossa aplica\u00e7\u00e3o Angular.\n\n\nImportando o \nHttpClientModule\n\u00b6\n\n\nPara permitir o acesso aos servi\u00e7os HTTP a partir de qualquer lugar na aplica\u00e7\u00e3o, inclua o m\u00f3dulo \nHttpClientModule\n ao array \nimports\n do \nAppModule\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \n{\n \nNgModule\n \n}\n      \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n   \nfrom\n \n'@angular/forms'\n;\n\n\nimport\n \n{\n \nHttpClientModule\n \n}\n \nfrom\n \n'@angular/common/http'\n;\n\n\n\nimport\n \n{\n \nAppRoutingModule\n \n}\n \nfrom\n \n'./app-routing.module'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n         \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nDashboardComponent\n \n}\n   \nfrom\n \n'./dashboard.component'\n;\n\n\nimport\n \n{\n \nHeroesComponent\n \n}\n      \nfrom\n \n'./heroes.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n  \nfrom\n \n'./hero-detail.component'\n;\n\n\nimport\n \n{\n \nHeroService\n \n}\n          \nfrom\n \n'./hero.service'\n;\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nFormsModule\n,\n\n    \nHttpClientModule\n,\n \n// <-- inclua o m\u00f3dulo \"HttpClientModule\" no imports\n\n    \nAppRoutingModule\n\n  \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nDashboardComponent\n,\n\n    \nHeroDetailComponent\n,\n\n    \nHeroesComponent\n,\n\n  \n],\n\n  \nproviders\n:\n \n[\n \nHeroService\n \n],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nSimulando a API\n\u00b6\n\n\nNa vida real, a aplica\u00e7\u00e3o ir\u00e1 utilizar o m\u00f3dulo \nHttpModule\n para se comunicar com um servidor web remoto.\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nPara simularmos a exist\u00eancia de uma api para prover os dados vamos usar o \nJson Server\n, voc\u00ea pode instal\u00e1-lo executando o comando:\n\n\nnpm install -g json-server\n\n\nOs dados ser\u00e3o colocados em um arquivo que o servidor fica monitorando.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\necho '{ \n  \"heroes\": \n  [\n    { \"id\": 0,  \"name\": \"Zero\" }, \n    { \"id\": 11, \"name\": \"Mr. Nice\" },\n    { \"id\": 12, \"name\": \"Narco\" },\n    { \"id\": 13, \"name\": \"Bombasto\" },\n    { \"id\": 14, \"name\": \"Celeritas\" },\n    { \"id\": 15, \"name\": \"Magneta\" },\n    { \"id\": 16, \"name\": \"RubberMan\" },\n    { \"id\": 17, \"name\": \"Dynama\" },\n    { \"id\": 18, \"name\": \"Dr IQ\" },\n    { \"id\": 19, \"name\": \"Magma\" },\n    { \"id\": 20, \"name\": \"Tornado\" }\n  ]\n}' > db.json\n\n\n\n\n\n\nNote que o Her\u00f3i \nZero\n n\u00e3o existia antes!\n\n\nPara simular um contexto para a aplica\u00e7\u00e3o api vamos definir uma rota customizada com o nome de '/api'\n\n1\n2\n3\necho '{\n  \"/api/*\": \"/$1\"\n}' > routes.json\n\n\n\n\n\nPara executar o servidor execute o comando:\n\n\n1\njson-server --watch --routes routes.json db.json\n\n\n\n\n\n\nAp\u00f3s a subida do servidor, pode-se fazer requisi\u00e7\u00f5es do tipo:\n\n\nGET /api/heroes\n\n\n\n\nIr\u00e1 mostrar todos os her\u00f3is\n\n\n\n\nGET /api/heroes/19\n\n\n\n\nIr\u00e1 mostrar os dados do her\u00f3i com \"id\" igual a 19\n\n\n\n\n1\ncurl http://localhost:3000/api/heroes\n\n\n\n\n\n\n1\ncurl http://localhost:3000/api/heroes/19\n\n\n\n\n\n\nEsse arquivo substitui o arquivo \nmock-heroes.ts\n, que pode ser removido com seguran\u00e7a.\n\n\nO uso do \nJson Server\n s\u00f3 \u00e9 \u00fatil no inic\u00edo do processo de desenvolvimento, para prototipagem e demonstra\u00e7\u00f5es (como \u00e9 o caso do Tour of Heroes). Poder\u00edamos at\u00e9 pular esse passo se tiv\u00e9ssemos uma API real.\n\n\nHer\u00f3is e HTTP\n\u00b6\n\n\nNa vers\u00e3o atual do \nHeroService\n, uma \nPromise\n com os her\u00f3is mock \u00e9 retornada:\n\n\n1\n2\n3\ngetHeroes\n()\n:\n \nPromise\n<\nHero\n[]\n>\n \n{\n\n  \nreturn\n \nPromise\n.\nresolve\n(\nHEROES\n);\n\n\n}\n\n\n\n\n\n\n\nIsso foi feito j\u00e1 para antecipar a ideia de que  a recupera\u00e7\u00e3o dos her\u00f3is \u00e9 feita com um cliente HTTP, que \u00e9 uma opera\u00e7\u00e3o ass\u00edncrona.\n\n\nConverta, ent\u00e3o, o m\u00e9todo \ngetHeroes()\n para usar HTTP:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n  \nprivate\n \nbaseUrl\n \n=\n \n'http://localhost:3000/api/heroes'\n;\n  \n// URL to web api\n\n\n  \nconstructor\n(\nprivate\n \nhttp\n:\n \nHttpClient\n)\n \n{\n \n}\n\n\n  \ngetHeroes\n()\n:\n \nPromise\n<\nHero\n[]\n>\n \n{\n\n    \nconst\n \nurl\n \n=\n \nthis\n.\nbaseUrl\n;\n\n    \nreturn\n \nthis\n.\nhttp\n.\nget\n<\nHero\n[]\n>\n(\nurl\n).\ntoPromise\n().\ncatch\n(\nthis\n.\nhandleError\n);\n\n  \n}\n\n\n  \nprivate\n \nhandleError\n(\nerror\n:\n \nany\n)\n:\n \nPromise\n<\nany\n>\n \n{\n\n    \nconsole\n.\nerror\n(\n'An error occurred'\n,\n \nerror\n);\n \n// for demo purposes only\n\n    \nreturn\n \nPromise\n.\nreject\n(\nerror\n.\nmessage\n \n||\n \nerror\n);\n\n  \n}\n\n\n\n\n\n\n\nAdicione os imports:\n\n\n1\nimport\n \n{\n \nHttpClient\n \n}\n \nfrom\n \n'@angular/common/http'\n;\n\n\n\n\n\n\n\nAjuste o m\u00e9todo \ngetTopHeroes()\n para utilizar os dados vindos do servidor:\n\n\n1\n2\n3\n4\n5\ngetTopHeroes\n()\n:\n \nPromise\n<\nHero\n[]\n>\n \n{\n\n    \nreturn\n \nthis\n.\ngetHeroes\n().\nthen\n(\nheroes\n \n=>\n \n{\n\n      \nreturn\n \nheroes\n.\nslice\n(\n0\n,\n \n4\n);\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\nRecarregue o navegador. A lista de her\u00f3is agora foi recuperada a partir da API provida pelo Json Server.\n\n\nHTTP \nPromise\n\u00b6\n\n\nO m\u00e9todo \nhttp.get\n retorna um \nObservable\n da biblioteca RxJS.\n\n\nOs \nObservables\n s\u00e3o uma forma poderorsa de gerenciar fluxos de dados ass\u00edncronos. Vamos falar mais sobre \nObservables\n no decorrer desse exerc\u00edcio. Por enquanto, \u00e9 suficiente entender que convertermos o \nObservable\n em um \nPromise\n usando o m\u00e9todo \ntoPromise()\n:\n\n\n1\n.toPromise\n()\n\n\n\n\n\n\n\nA partir do RxJS 6 \ntoPromise\n n\u00e3o \u00e9 mais um operador, e sim faz parte da classe \nObservables\n.\nOs operadores RxJS acrescentam funcionalidades aos \nObservables\n. Para usar essas funcionalidades, voc\u00ea tem que adicionar esses operadores. Para fazer isso, basta import\u00e1-los da biblioteca RxJS:\n\n\n1\nimport\n \n{\n \nmap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\n\n\n\n\nExtraindo os dados no callback\n\u00b6\n\n\nHttpClient.get\n retorna o corpo da resposta como um objeto JSON n\u00e3o tipado por default. Aplicando o especificador de tipos opcional, \n<Hero[]>\n, nos d\u00e1 como resultado um objeto tipado: Nosso array de her\u00f3is.\n\n\nA forma do dados JSON \u00e9 dada pela API servidora de dados, no nosso caso o \nJson Server\n. Na vida real, a resposta da sua API pode ter um formato diferente, e voc\u00ea dever\u00e1 usar as propriedades definidas no contrato dessa API.\n\n\nTratamento de erros\n\u00b6\n\n\nAo final do m\u00e9todo \ngetHeroes()\n, os poss\u00edveis erros est\u00e3o sendo capturados no m\u00e9todo \ncatch()\n, e eles s\u00e3o repassados para o m\u00e9todo \nhandleError\n:\n\n\n1\n.\ncatch\n(\nthis\n.\nhandleError\n);\n\n\n\n\n\n\n\nEssa \u00e9 uma parte cr\u00edtica da aplica\u00e7\u00e3o. Voc\u00ea deve se preparar para as falhas HTTP, pois elas acontecem frequentemente e por raz\u00f5es fora do nosso controle.\n\n\n1\n2\n3\n4\nprivate\n \nhandleError\n(\nerror\n:\n \nany\n)\n:\n \nPromise\n<\nany\n>\n \n{\n\n  \nconsole\n.\nerror\n(\n'An error occurred'\n,\n \nerror\n);\n \n// for demo purposes only\n\n  \nreturn\n \nPromise\n.\nreject\n(\nerror\n.\nmessage\n \n||\n \nerror\n);\n\n\n}\n\n\n\n\n\n\n\nO nosso servi\u00e7o simplesmente registra um log de erro no console do navegador. Na vida real, os erros devem ser tratados conforme a necessidade da aplica\u00e7\u00e3o.\n\n\nO c\u00f3digo tamb\u00e9m devolve o erro na forma de uma \nPromise\n rejeitada. Dessa forma, o componente que chamou o servi\u00e7o tem a chance de agir e exibir uma mensagem de erro para o usu\u00e1rio, por exemplo.\n\n\nRecuperando o her\u00f3i pelo id\n\u00b6\n\n\nAinda no \nHeroService\n, perceba que a implementa\u00e7\u00e3o atual do m\u00e9todo \ngetHero\n est\u00e1 reutilizando o m\u00e9todo \ngetHeroes\n para filtrar o her\u00f3i procurado.\n\n\nIsso at\u00e9 pode funcionar em simula\u00e7\u00f5es. Na vida real, no entanto, \u00e9 ineficiente solicitar a um servidor a lista de todos os her\u00f3is, quando s\u00f3 se quer um \u00fanico her\u00f3i.\n\n\nA maioria das APIs suportam uma requisi\u00e7\u00e3o \nget-by-id\n na forma: \n/api/heroes/:id\n.\n\n\nAtualize, ent\u00e3o, o m\u00e9todo \nHeroService.getHero()\n para fazer uma requisi\u00e7\u00e3o get-by-id:\n\n\n1\n2\n3\n4\ngetHero\n(\nid\n:\n \nnumber\n)\n:\n \nPromise\n<\nHero\n>\n \n{\n\n  \nconst\n \nurl\n \n=\n \n`\n${\nthis\n.\nbaseUrl\n}\n/\n${\nid\n}\n`\n;\n\n  \nreturn\n \nthis\n.\nhttp\n.\nget\n<\nHero\n>\n(\nurl\n).\ntoPromise\n().\ncatch\n(\nthis\n.\nhandleError\n);\n\n \n}\n\n\n\n\n\n\n\nA requisi\u00e7\u00e3o \u00e9 quase a mesma que implementamos em \ngetHeroes()\n. A \u00fanica diferen\u00e7a \u00e9 que, aqui, o \nid\n na URL identifica qual \u00e9 o her\u00f3i que o servidor deve recuperar. Al\u00e9m disso, a resposta \u00e9 um objeto \u00fanico do tipo \nHero\n (e n\u00e3o um array).\n\n\nAPI inalterada\n\u00b6\n\n\nApesar de termos feitos v\u00e1rias mudan\u00e7as no servi\u00e7o \nHeroService\n, as altera\u00e7\u00f5es modificaram somente a implementa\u00e7\u00e3o interna dos m\u00e9todos \ngetHeroes()\n e \ngetHero()\n, e as assinaturas dos m\u00e9todos n\u00e3o sofreram mudan\u00e7as. Por isso, n\u00e3o ser\u00e1 necess\u00e1rio alterar nenhum componente que usa o servi\u00e7o.\n\n\nAtualizando os detalhes do her\u00f3i\n\u00b6\n\n\nVolte ao navegador e tente editar o nome de um her\u00f3i qualquer na p\u00e1gina de detalhes.\n\n\nNa medida que voc\u00ea digita, o nome do her\u00f3i no cabe\u00e7alho \u00e9 atualizado. Por\u00e9m, se voc\u00ea clicar no bot\u00e3o de voltar, as atualiza\u00e7\u00f5es s\u00e3o perdidas.\n\n\nO que mudou?\n\n\nAntes, est\u00e1vamos usando uma lista de mocks compartilhada por toda a aplica\u00e7\u00e3o, e as atualiza\u00e7\u00f5es eram aplicadas diretamente \u00e0 lista de mocks.\n\n\nAgora, estamos recuperando a lista a partir de um servidor remoto, e se quisermos persistir as atualiza\u00e7\u00f5es, temos que envi\u00e1-las de volta ao servidor.\n\n\nPersistindo as altera\u00e7\u00f5es dos detalhes do her\u00f3i\n\u00b6\n\n\nPara persistir as altera\u00e7\u00f5es feitas aos detalhes de um her\u00f3i, adicione um bot\u00e3o ao final do template do \nHeroDetailComponent\n:\n\n\n1\n<\nbutton\n \n(\nclick\n)=\"\nsave\n()\"\n>\nSave\n</\nbutton\n>\n\n\n\n\n\n\n\nO bot\u00e3o faz um binding de evento de clique de forma que, ao ser clicado, ir\u00e1 invocar o novo m\u00e9todo \nsave()\n do componente.\n\n\nInclua, ent\u00e3o, o m\u00e9todo \nsave()\n no \nHeroDetailComponent\n. O m\u00e9todo ir\u00e1 persistir as altera\u00e7\u00f5es no nome do her\u00f3i ao chamar o m\u00e9todo \nupdate()\n do \nHeroService\n e, ent\u00e3o, ir\u00e1 navegar para a vis\u00e3o anterior:\n\n\n1\n2\n3\n4\nsave\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroService\n.\nupdate\n(\nthis\n.\nhero\n)\n\n    \n.\nthen\n(()\n \n=>\n \nthis\n.\ngoBack\n());\n\n\n}\n\n\n\n\n\n\n\nAdicionando o m\u00e9todo \nHeroService.update()\n\u00b6\n\n\nA estrutura geral do m\u00e9todo \nupdate()\n \u00e9 semelhante \u00e0 estrutura do \ngetHeroes()\n, com algumas mudan\u00e7as:\n\n\n\n\n\u00c9 usado o m\u00e9todo \nput()\n ao inv\u00e9s do m\u00e9todo \nget()\n;\n\n\nPara identificar qual her\u00f3i deve ser atualizado, o \nid\n \u00e9 parametrizado na URL;\n\n\nO corpo da requisi\u00e7\u00e3o, o her\u00f3i informado, \u00e9 passado como o segundo argumento do m\u00e9todo \nput\n;\n\n\n\n\n1\n2\n3\n4\n5\nupdate\n(\nhero\n:\n \nHero\n)\n:\n \nPromise\n<\nHero\n>\n \n{\n\n  \nconst\n \nurl\n \n=\n \n`\n${\nthis\n.\nbaseUrl\n}\n/\n${\nhero\n.\nid\n}\n`\n;\n\n  \nconst\n \nbody\n \n=\n \nhero\n;\n\n  \nreturn\n \nthis\n.\nhttp\n.\nput\n<\nHero\n>\n(\nurl\n,\n \nbody\n).\ntoPromise\n().\ncatch\n(\nthis\n.\nhandleError\n);\n\n\n}\n\n\n\n\n\n\n\nVolte ao navegador e teste a edi\u00e7\u00e3o. Agora, as mudan\u00e7as est\u00e3o sendo persistidas no lado servidor.\n\n\nAdicionando her\u00f3is\n\u00b6\n\n\nPara criar um novo her\u00f3i, precisamos de um formul\u00e1rio com uma caixa de texto para o nome do her\u00f3i e com um bot\u00e3o para comandar a inclus\u00e3o do novo her\u00f3i.\n\n\nInclua o seguinte trecho HTML no template do \nHeroesComponent\n logo abaixo de \n<h2>My Heroes</h2>\n:\n\n\n1\n2\n3\n4\n<\ndiv\n>\n\n  \n<\nlabel\n>\nHero name:\n</\nlabel\n>\n \n<\ninput\n \n#\nheroName\n \n/>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\nadd\n(\nheroName\n.\nvalue\n);\n \nheroName\n.\nvalue\n=\n''\n\"\n>\nAdd\n</\nbutton\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nEm resposta ao evento de clique do bot\u00e3o, o template chama o m\u00e9todo \nadd()\n do componente e limpa a caixa de texto, preparando-a para um pr\u00f3ximo nome.\n\n\nO novo m\u00e9todo \nadd()\n do \nHeroesComponent\n deve ter o seguinte conte\u00fado:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nadd\n(\nname\n:\n \nstring\n)\n:\n \nvoid\n \n{\n\n  \nname\n \n=\n \nname\n.\ntrim\n();\n\n  \nif\n \n(\n!\nname\n)\n \n{\n \nreturn\n;\n \n}\n\n  \nthis\n.\nheroService\n.\ncreate\n(\nname\n)\n\n    \n.\nthen\n(\nhero\n \n=>\n \n{\n\n      \nthis\n.\nheroes\n.\npush\n(\nhero\n);\n\n      \nthis\n.\nselectedHero\n \n=\n \nnull\n;\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\nQuando o nome n\u00e3o \u00e9 vazio, o m\u00e9todo delega a cria\u00e7\u00e3o do her\u00f3i ao \nHeroService\n, e ent\u00e3o adiciona o novo her\u00f3i ao array.\n\n\nInclua o novo m\u00e9todo \ncreate()\n ao \nHeroService\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ncreate\n(\nname\n:\n \nstring\n)\n:\n \nPromise\n<\nHero\n>\n \n{\n\n  \nconst\n \nurl\n \n=\n \nthis\n.\nbaseUrl\n;\n\n  \nconst\n \nbody\n:\n \nHero\n \n=\n \n{\n\n    \nid\n:\n \nundefined\n,\n\n    \nname\n:\n \nname\n\n  \n};\n\n  \nreturn\n \nthis\n.\nhttp\n.\npost\n<\nHero\n>\n(\nurl\n,\n \nbody\n).\ntoPromise\n().\ncatch\n(\nthis\n.\nhandleError\n);\n\n\n}\n\n\n\n\n\n\n\nRecarregue o navegador e crie alguns her\u00f3is.\n\n\nDeletando her\u00f3is\n\u00b6\n\n\nAssociado a cada her\u00f3i na p\u00e1gina de listagem, deve existir um bot\u00e3o de \ndelete\n, para permitir a exclus\u00e3o dos her\u00f3is.\n\n\nPara isso, adicione um elemento \n<button>\n ao template do \nHeroesComponent\n como abaixo:\n\n\n1\n2\n<\nbutton\n \nclass\n=\n\"delete\"\n\n  \n(\nclick\n)=\"\ndelete\n(\nhero\n);\n \n$\nevent\n.\nstopPropagation\n()\"\n>\nx\n</\nbutton\n>\n\n\n\n\n\n\n\nO elemento \n<li>\n, ent\u00e3o, deve estar como a seguir:\n\n\n1\n2\n3\n4\n5\n6\n7\n<\nli\n \n*\nngFor\n=\n\"let hero of heroes\"\n \n(\nclick\n)=\"\nonSelect\n(\nhero\n)\"\n\n    \n[\nclass\n.\nselected\n]=\"\nhero \n=\n==\n \nselectedHero\n\"\n>\n\n  \n<\nspan\n \nclass\n=\n\"badge\"\n>\n{{hero.id}}\n</\nspan\n>\n\n  \n<\nspan\n>\n{{hero.name}}\n</\nspan\n>\n\n  \n<\nbutton\n \nclass\n=\n\"delete\"\n\n    \n(\nclick\n)=\"\ndelete\n(\nhero\n);\n \n$\nevent\n.\nstopPropagation\n()\"\n>\nx\n</\nbutton\n>\n\n\n</\nli\n>\n\n\n\n\n\n\n\nAp\u00f3s chamar o m\u00e9todo \ndelete()\n do componente, o bot\u00e3o de delete interrompe a propaga\u00e7\u00e3o do evento de clique ao chamar o \n$event.stopPropagation()\n. Isso impede que o \nclick handler\n do elemento \n<li>\n seja disparado tamb\u00e9m (o que selecionaria o usu\u00e1rio a ser deletado).\n\n\nO m\u00e9todo \ndelete()\n do componente \nHeroesComponent\n tem uma l\u00f3gica um pouco mais complicada:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ndelete\n(\nhero\n:\n \nHero\n)\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroService\n\n      \n.\ndelete\n(\nhero\n.\nid\n)\n\n      \n.\nthen\n(()\n \n=>\n \n{\n\n        \nthis\n.\nheroes\n \n=\n \nthis\n.\nheroes\n.\nfilter\n(\nh\n \n=>\n \nh\n \n!==\n \nhero\n);\n\n        \nif\n \n(\nthis\n.\nselectedHero\n \n===\n \nhero\n)\n \n{\n \nthis\n.\nselectedHero\n \n=\n \nnull\n;\n \n}\n\n      \n});\n\n\n}\n\n\n\n\n\n\n\nAl\u00e9m de delegar a exclus\u00e3o do her\u00f3i para o \nHeroService\n, o m\u00e9todo \ndelete()\n tamb\u00e9m deve remover o her\u00f3i deletado do array de her\u00f3is e resetar o her\u00f3i selecionado, se for necess\u00e1rio.\n\n\nPara alinhar o bot\u00e3o de delete \u00e0 direita, adicione o seguinte CSS ao \nheroes.component.css\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nbutton\n.\ndelete\n \n{\n\n  \nfloat\n:\nright\n;\n\n  \nmargin-top\n:\n \n-2\npx\n;\n\n  \nmargin-right\n:\n \n.8\nem\n;\n\n  \nbackground-color\n:\n \ngray\n \n!important\n;\n\n  \ncolor\n:\nwhite\n;\n\n\n}\n\n\n\n\n\n\n\nAdicionando o m\u00e9todo \nHeroService.delete()\n\u00b6\n\n\nAdicione o seguinte m\u00e9todo \ndelete()\n ao \nHeroService\n, que usa o m\u00e9todo HTTP \ndelete()\n para excluir o her\u00f3i no servidor:\n\n\n1\n2\n3\n4\ndelete\n(\nid\n:\n \nnumber\n)\n:\n \nPromise\n<\nvoid\n>\n \n{\n\n  \nconst\n \nurl\n \n=\n \n`\n${\nthis\n.\nbaseUrl\n}\n/\n${\nid\n}\n`\n;\n\n  \nreturn\n \nthis\n.\nhttp\n.\ndelete\n<\nvoid\n>\n(\nurl\n).\ntoPromise\n().\ncatch\n(\nthis\n.\nhandleError\n);\n\n\n}\n\n\n\n\n\n\n\nRecarregue o navegador e teste a nova funcionalidade de exclus\u00e3o de her\u00f3is.\n\n\nObservables\n\u00b6\n\n\nSe voc\u00ea prestar aten\u00e7\u00e3o, ir\u00e1 perceber que os m\u00e9todos do servi\u00e7o \nHttp\n sempre retornam um \nObservable\n de objetos do tipo \nResponse\n.\n\n\nO \nHeroService\n est\u00e1 convertendo esse \nObservable\n em um \nPromise\n, devolvendo-o para o componente chamador.\n\n\nVamos agora entender como, quando e porque retornar o \nObservable\n diretamente.\n\n\nBackground\n\u00b6\n\n\nPromises\n processam um \u00fanico evento ass\u00edncrono, de forma que a fun\u00e7\u00e3o callback \u00e9 chamada uma \u00fanica vez.\n\n\nObservables\n, por usa vez, processam um fluxo de eventos ass\u00edncronos, chamando a fun\u00e7\u00e3o callback uma vez para cada resultado desses eventos.\n\n\nO Angular tem um suporte b\u00e1sico para \nObservables\n, mas os desenvolvedores podem adicionar operadores e extens\u00f5es da biblioteca \nRxJS\n para incluir novas funcionalidades.\n\n\nNo \nHeroService\n, usamos a fun\u00e7\u00e3o \ntoPromise()\n aos resultados dos m\u00e9todos do servi\u00e7o \nHttp\n para converter o \nObservable\n em um \nPromise\n.\n\n\nEssa convers\u00e3o geralmente \u00e9 uma boa op\u00e7\u00e3o, pois, tipicamente, n\u00f3s chamamos o m\u00e9todo \nhttp.get()\n para recuperar informa\u00e7\u00f5es de um servidor remoto de uma \u00fanica vez.\n\n\nNo entanto, nem sempre as requisi\u00e7\u00f5es s\u00e3o feitas uma \u00fanica vez. Voc\u00ea pode iniciar uma requisi\u00e7\u00e3o e ela pode ser cancelada, antes mesmo que o servidor responda, dando lugar a uma nova requisi\u00e7\u00e3o.\n\n\nEssa sequ\u00eancia \nrequest-cancel-new-request\n \u00e9 dif\u00edcil de se implementar com \nPromises\n, mas \u00e9 f\u00e1cil com \nObservables\n.\n\n\nPesquisando her\u00f3is pelo nome\n\u00b6\n\n\nVamos adicionar uma nova funcionalidade ao Tour of Heroes: a pesquisa de her\u00f3is.\n\n\nNessa funcionalidade, vamos adicionar uma caixa de texto onde o usu\u00e1rio ir\u00e1 digitar o nome do her\u00f3i. Na medida em que o usu\u00e1rio digita um nome, iremos enviar m\u00faltiplas requisi\u00e7\u00f5es HTTP para o servi\u00e7o de her\u00f3is, filtrando-os pelo nome digitado.\n\n\nVamos adicionar um novo m\u00e9todo ao \nHeroService\n:\n\n\n1\n2\n3\n4\n  \nsearch\n(\nterm\n:\n \nstring\n)\n:\n \nObservable\n<\nHero\n[]\n>\n \n{\n\n    \nconst\n \nurl\n \n=\n \n`\n${\nthis\n.\nbaseUrl\n}\n/?name_like=\n${\nterm\n}\n`\n;\n\n    \nreturn\n \nthis\n.\nhttp\n.\nget\n<\nHero\n[]\n>\n(\nurl\n);\n\n  \n}\n\n\n\n\n\n\n\nAtualize os imports...\n\n\n1\n2\nimport\n \n{\n \nObservable\n \n}\n     \nfrom\n \n'rxjs'\n;\n\n\nimport\n \n{\n \nmap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\n\n\n\n\nA chamada ao m\u00e9todo \nhttp.get()\n \u00e9 semelhante \u00e0 que fizemos anteriormente, s\u00f3 que aqui introduzimos um par\u00e2metro \nname\n na query string da URL e usamos o sufixo \n_like\n que \u00e9 como o \nJson Server\n especifica como fazer um filtro usando uma express\u00e3o, inclusive, uma express\u00e3o regular.\n\n\nO mais importante a notar, no entanto, \u00e9 que agora n\u00e3o estamos mais convertendo o resultado do \nhttp.get()\n para o tipo \nPromise\n. Ao inv\u00e9s disso, estamos devolvendo o tipo \nObservable\n diretamente.\n\n\nCriando o componente \nHeroSearchComponent\n\u00b6\n\n\nPara consumir o novo m\u00e9todo, vamos criar o componente \nHeroSearchComponent\n.\n\n\nCrie, ent\u00e3o, o arquivo \nhero-search.component.html\n com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n<\ndiv\n \nid\n=\n\"search-component\"\n>\n\n  \n<\nh4\n>\nHero Search\n</\nh4\n>\n\n  \n<\ninput\n \n#\nsearchBox\n \nid\n=\n\"search-box\"\n \n(\nkeyup\n)=\"\nsearch\n(\nsearchBox\n.\nvalue\n)\"\n \n/>\n\n  \n<\ndiv\n>\n\n    \n<\ndiv\n \n*\nngFor\n=\n\"let hero of heroes | async\"\n\n         \n(\nclick\n)=\"\ngotoDetail\n(\nhero\n)\"\n \nclass\n=\n\"search-result\"\n \n>\n\n      {{hero.name}}\n    \n</\ndiv\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nO template do novo componente \u00e9 simples: cont\u00e9m uma caixa de texto e uma lista com os resultados da pesquisa.\n\n\nVamos tamb\u00e9m adicionar estilos CSS para o novo componente. Crie, ent\u00e3o, o arquivo \nhero-search.component.css\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n.\nsearch-result\n{\n\n  \nborder-bottom\n:\n \n1\npx\n \nsolid\n \ngray\n;\n\n  \nborder-left\n:\n \n1\npx\n \nsolid\n \ngray\n;\n\n  \nborder-right\n:\n \n1\npx\n \nsolid\n \ngray\n;\n\n  \nwidth\n:\n195\npx\n;\n\n  \nheight\n:\n \n16\npx\n;\n\n  \npadding\n:\n \n5\npx\n;\n\n  \nbackground-color\n:\n \nwhite\n;\n\n  \ncursor\n:\n \npointer\n;\n\n\n}\n\n\n\n.\nsearch-result\n:\nhover\n \n{\n\n  \ncolor\n:\n \n#eee\n;\n\n  \nbackground-color\n:\n \n#607D8B\n;\n\n\n}\n\n\n\n#\nsearch-box\n{\n\n  \nwidth\n:\n \n200\npx\n;\n\n  \nheight\n:\n \n20\npx\n;\n\n\n}\n\n\n\n\n\n\n\nNa medida em que o usu\u00e1rio digita, um binding de evento \nkeyup\n chama o m\u00e9todo \nsearch()\n passando como par\u00e2metro o novo valor da caixa de texto.\n\n\nComo esperado, o \n*ngFor\n cria um la\u00e7o de repeti\u00e7\u00e3o para cada item da propriedade \nheroes\n. No entanto, essa propriedade n\u00e3o mais \u00e9 um array de her\u00f3is, mas sim um \nObservable\n de array de her\u00f3is.\n\n\nComo o \n*ngFor\n n\u00e3o trabalha com \nObservables\n, temos que usar o pipe \nasync\n, que traduz o \nObservable\n no array de her\u00f3is esperado pelo \n*ngFor\n.\n\n\nCrie agora o arquivo \nhero-search.component.ts\n com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nRouter\n \n}\n            \nfrom\n \n'@angular/router'\n;\n\n\n\nimport\n \n{\n \nObservable\n,\n \nSubject\n,\n \nof\n \n}\n  \nfrom\n \n'rxjs'\n;\n\n\n\n// Observable operators\n\n\nimport\n \n{\n \ncatchError\n,\n \ndebounceTime\n,\n \ndistinctUntilChanged\n,\n \nswitchMap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\nimport\n \n{\n \nHeroService\n \n}\n \nfrom\n \n'./hero.service'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-search'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-search.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n \n'./hero-search.component.css'\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nHeroSearchComponent\n \nimplements\n \nOnInit\n \n{\n\n  \nheroes\n:\n \nObservable\n<\nHero\n[]\n>\n;\n\n  \nprivate\n \nsearchTerms\n \n=\n \nnew\n \nSubject\n<\nstring\n>\n();\n\n\n  \nconstructor\n(\n\n    \nprivate\n \nheroService\n:\n \nHeroService\n,\n\n    \nprivate\n \nrouter\n:\n \nRouter\n)\n \n{}\n\n\n  \n// Push a search term into the observable stream.\n\n  \nsearch\n(\nterm\n:\n \nstring\n)\n:\n \nvoid\n \n{\n\n    \nthis\n.\nsearchTerms\n.\nnext\n(\nterm\n);\n\n  \n}\n\n\n  \nngOnInit\n()\n:\n \nvoid\n \n{\n\n    \nthis\n.\nheroes\n \n=\n \nthis\n.\nsearchTerms\n\n      \n.\npipe\n(\n\n        \ndebounceTime\n(\n300\n),\n        \n// wait 300ms after each keystroke before considering the term\n\n        \ndistinctUntilChanged\n(),\n   \n// ignore if next search term is same as previous\n\n        \nswitchMap\n(\nterm\n \n=>\n \nterm\n   \n// switch to new observable each time the term changes\n\n          \n// return the http search observable\n\n          \n?\n \nthis\n.\nheroService\n.\nsearch\n(\nterm\n)\n\n          \n// or the observable of empty heroes if there was no search term\n\n          \n:\n \nof\n<\nHero\n[]\n>\n([])),\n\n        \ncatchError\n(\nerror\n \n=>\n \n{\n\n          \n// TODO: add real error handling\n\n          \nconsole\n.\nlog\n(\nerror\n);\n\n          \nreturn\n \nof\n<\nHero\n[]\n>\n([]);\n\n        \n})\n\n      \n);\n\n  \n}\n\n\n  \ngotoDetail\n(\nhero\n:\n \nHero\n)\n:\n \nvoid\n \n{\n\n    \nconst\n \nlink\n \n=\n \n[\n'/detail'\n,\n \nhero\n.\nid\n];\n\n    \nthis\n.\nrouter\n.\nnavigate\n(\nlink\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nVamos manter o foco agora no \nsearchTerms\n:\n\n\n1\n2\n3\n4\n5\n6\nprivate\n \nsearchTerms\n \n=\n \nnew\n \nSubject\n<\nstring\n>\n();\n\n\n\n// Push a search term into the observable stream.\n\n\nsearch\n(\nterm\n:\n \nstring\n)\n:\n \nvoid\n \n{\n\n  \nthis\n.\nsearchTerms\n.\nnext\n(\nterm\n);\n\n\n}\n\n\n\n\n\n\n\nUm \nSubject\n \u00e9 um produtor de um fluxo de eventos observ\u00e1veis, de forma que \nsearchTerms\n produz um \nObservable\n de strings. \u00c9, ent\u00e3o, o crit\u00e9rio de pesquisa para a consulta de her\u00f3is.\n\n\nCada chamada ao m\u00e9todo \nsearch()\n coloca uma nova string no fluxo de eventos ao chamar o m\u00e9todo \nnext()\n.\n\n\nTemos agora que converter esse fluxo de strings (\nsearchTerms\n) em um fluxo de array de her\u00f3is (\nheroes\n).\n\n\nVamos colocar nossa aten\u00e7\u00e3o, ent\u00e3o, para o seguinte trecho:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nheroes\n:\n \nObservable\n<\nHero\n[]\n>\n;\n\n\n\nngOnInit\n()\n:\n \nvoid\n \n{\n\n  \nthis\n.\nheroes\n \n=\n \nthis\n.\nsearchTerms\n\n    \n.\npipe\n(\n\n      \ndebounceTime\n(\n300\n),\n        \n// espera 300ms antes de criar um novo evento\n\n      \ndistinctUntilChanged\n(),\n   \n// ignora o evento se o termo de pesquisa \u00e9 o mesmo do evento anterior\n\n      \nswitchMap\n(\nterm\n \n=>\n \nterm\n   \n// muda para o novo observable toda vez que o termo de pesquisa mudar, descartando os eventos anteriores\n\n        \n// devolve o observable do m\u00e9todo http\n\n        \n?\n \nthis\n.\nheroService\n.\nsearch\n(\nterm\n)\n\n        \n// ou um observable vazio, caso nenhum termo de pesquisa tenha sido informado\n\n        \n:\n \nof\n<\nHero\n[]\n>\n([])),\n\n      \ncatchError\n(\nerror\n \n=>\n \n{\n\n        \n// TODO: adicionar tratamento de erro\n\n        \nconsole\n.\nlog\n(\nerror\n);\n\n        \nreturn\n \nof\n<\nHero\n[]\n>\n([]);\n\n      \n})\n\n    \n);\n\n\n}\n\n\n\n\n\n\n\nPara diminuir a quantidade de requisi\u00e7\u00f5es HTTP, usamos alguns operadores do \nObservable\n:\n\n\n\n\ndebounceTime\n: espera pelo fluxo pausar por um tempo determinado, antes de criar um novo evento.  No nosso caso, nunca iremos criar requisi\u00e7\u00f5es mais frequentes do que 300ms.\n\n\ndistinctUntilChanged\n: s\u00f3 envia uma nova requisi\u00e7\u00e3o caso o filtro tenha de fato mudado.\n\n\nswitchMap\n: chama o servi\u00e7o de pesquisa para cada evento do fluxo, e retorna somente o \nObservable\n mais recente, cancelando e descartando os anteriores.\n\n\ncatchError\n: intercepta um \nObservable\n que tenha falhado. Em uma aplica\u00e7\u00e3o real, poder\u00edamos ter um tratamento mais adequado.\n\n\n\n\nImportando os operadores RxJS\n\u00b6\n\n\nA maioria dos operadores RxJS n\u00e3o est\u00e3o inclu\u00eddos no Angular por padr\u00e3o. S\u00f3 est\u00e1 inclu\u00eddo o que o Angular usa de fato.\n\n\nQuando voc\u00ea precisa de funcionalidades adicionais, voc\u00ea deve extender o \nObservable\n, importando as bibliotecas que definem os operadores que voc\u00ea deseja.\n\n\nEsses s\u00e3o os imports que o componente \nHeroSearchComponent\n usa:\n\n\n1\n2\n3\n4\nimport\n \n{\n \nObservable\n,\n \nSubject\n,\n \nof\n \n}\n   \nfrom\n \n'rxjs'\n;\n\n\n\n// Observable operators\n\n\nimport\n \n{\n \ncatchError\n,\n \ndebounceTime\n,\n \ndistinctUntilChanged\n,\n \nswitchMap\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\n\n\n\n\nAdicionando o componente de pesquisa ao Dashboard\n\u00b6\n\n\nAdicione, ent\u00e3o, o componente \nHeroSearchComponent\n ao final do template do \nDashboardComponent\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<\nh3\n>\nTop Heroes\n</\nh3\n>\n\n\n<\ndiv\n \nclass\n=\n\"grid grid-pad\"\n>\n\n  \n<\na\n \n*\nngFor\n=\n\"let hero of heroes\"\n  \n[\nrouterLink\n]=\"['/\ndetail\n',\n \nhero\n.\nid\n]\"\n  \nclass\n=\n\"col-1-4\"\n>\n\n    \n<\ndiv\n \nclass\n=\n\"module hero\"\n>\n\n      \n<\nh4\n>\n{{hero.name}}\n</\nh4\n>\n\n    \n</\ndiv\n>\n\n  \n</\na\n>\n\n\n</\ndiv\n>\n\n\n<\napp-hero-search\n></\napp-hero-search\n>\n\n\n\n\n\n\n\nPor fim, inclua o \nHeroSearchComponent\n ao array \ndeclarations\n do \nAppModule\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \n{\n \nHeroSearchComponent\n \n}\n \nfrom\n \n'./hero-search.component'\n;\n\n\n\n//...\n\n\n\ndeclarations\n:\n \n[\n\n  \n//...\n\n  \nHeroSearchComponent\n\n\n],\n\n\n\n\n\n\n\nExecute a aplica\u00e7\u00e3o novamente e verifique o comportamento da pesquisa no Dashboard. Voc\u00ea dever\u00e1 ver algo como:\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nangular-tour-of-heroes/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.css\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- app-routing.module.ts\n|  |  |-- dashboard.component.css\n|  |  |-- dashboard.component.html\n|  |  |-- dashboard.component.ts\n|  |  |-- hero.service.ts\n|  |  |-- hero.ts\n|  |  |-- hero-detail.component.css\n|  |  |-- hero-detail.component.html\n|  |  |-- hero-detail.component.ts\n|  |  |-- hero-search.component.css\n|  |  |-- hero-search.component.html\n|  |  |-- hero-search.component.ts\n|  |  |-- heroes.component.css\n|  |  |-- heroes.component.html\n|  |  |-- heroes.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nAdicionamos as depend\u00eancias necess\u00e1rias para usar HTTP.\n\n\nRefatoramos o \nHeroService\n para recuperar os her\u00f3is a partir de uma API.\n\n\nAdicionamos os m\u00e9todos \npost()\n, \nput()\n e \ndelete()\n ao \nHeroService\n.\n\n\nAtualizamos os componentes para permitir a cria\u00e7\u00e3o, edi\u00e7\u00e3o e dele\u00e7\u00e3o de her\u00f3is.\n\n\nConfiguramos uma API usnado o \nJson Service\n.\n\n\nAprendemos a usar \nObservables\n.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 09",
            "title": "08 - HTTP"
        },
        {
            "location": "/exercicios/exercicio-08/#exercicio-08",
            "text": "",
            "title": "Exerc\u00edcio 08"
        },
        {
            "location": "/exercicios/exercicio-08/#objetivos",
            "text": "Refatorar a aplica\u00e7\u00e3o para recuperar (e salvar) dados de um servidor remoto.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-08/#duracao",
            "text": "60 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-08/#preparando-o-ambiente",
            "text": "Esse exerc\u00edcio evolui o Exerc\u00edcio 7. Se n\u00e3o conseguiu termin\u00e1-lo, use a vers\u00e3o que est\u00e1 na pasta  ./workspace/exercicio-07-routing/  Se estiver usando o GIT, para descartar alguma altera\u00e7\u00e3o local fa\u00e7a: 1 git reset && git checkout -- .    Deixe a aplica\u00e7\u00e3o rodando:  1\n2 cd  app-exemplo\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-08/#provendo-servicos-http",
            "text": "Aprendemos bastante at\u00e9 aqui e j\u00e1 temos as funda\u00e7\u00f5es para construir uma aplica\u00e7\u00e3o Angular. No entanto, ainda estamos trabalhando com dados mock de her\u00f3is.  Vamos, agora, substituir esses mocks por dados recuperados a partir de um API fazendo requisi\u00e7\u00f5es HTTP a um servidor remoto.  Para realizar requisi\u00e7\u00f5es HTTP, vamos usar o m\u00f3dulo  HttpClientModule .  O m\u00f3dulo  HttpClientModule  \u00e9 opcional e \u00e9 implementado em uma biblioteca chamada  @angular/common/http , externa ao m\u00f3dulo core do Angular. Por isso, para usar os servi\u00e7os HTTP, precisamos incluir a biblioteca  @angular/common/http  no  package.json , e declarar o m\u00f3dulo  HttpClientModule  no array de  imports  da nossa aplica\u00e7\u00e3o Angular.  Como n\u00f3s criamos a nossa aplica\u00e7\u00e3o com o Angular CLI, a biblioteca  @angular/common/http  j\u00e1 est\u00e1 definida no  package.json  e j\u00e1 estamos prontos para importar o m\u00f3dulo  HttpClientModule  na nossa aplica\u00e7\u00e3o Angular.",
            "title": "Provendo servi\u00e7os HTTP"
        },
        {
            "location": "/exercicios/exercicio-08/#importando-o-httpclientmodule",
            "text": "Para permitir o acesso aos servi\u00e7os HTTP a partir de qualquer lugar na aplica\u00e7\u00e3o, inclua o m\u00f3dulo  HttpClientModule  ao array  imports  do  AppModule :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   {   NgModule   }        from   '@angular/core' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   FormsModule   }     from   '@angular/forms' ;  import   {   HttpClientModule   }   from   '@angular/common/http' ;  import   {   AppRoutingModule   }   from   './app-routing.module' ;  import   {   AppComponent   }           from   './app.component' ;  import   {   DashboardComponent   }     from   './dashboard.component' ;  import   {   HeroesComponent   }        from   './heroes.component' ;  import   {   HeroDetailComponent   }    from   './hero-detail.component' ;  import   {   HeroService   }            from   './hero.service' ;  @ NgModule ({ \n   imports :   [ \n     BrowserModule , \n     FormsModule , \n     HttpClientModule ,   // <-- inclua o m\u00f3dulo \"HttpClientModule\" no imports \n     AppRoutingModule \n   ], \n   declarations :   [ \n     AppComponent , \n     DashboardComponent , \n     HeroDetailComponent , \n     HeroesComponent , \n   ], \n   providers :   [   HeroService   ], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {   }",
            "title": "Importando o HttpClientModule"
        },
        {
            "location": "/exercicios/exercicio-08/#simulando-a-api",
            "text": "Na vida real, a aplica\u00e7\u00e3o ir\u00e1 utilizar o m\u00f3dulo  HttpModule  para se comunicar com um servidor web remoto.   Observa\u00e7\u00e3o :  Para simularmos a exist\u00eancia de uma api para prover os dados vamos usar o  Json Server , voc\u00ea pode instal\u00e1-lo executando o comando:  npm install -g json-server  Os dados ser\u00e3o colocados em um arquivo que o servidor fica monitorando.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 echo '{ \n  \"heroes\": \n  [\n    { \"id\": 0,  \"name\": \"Zero\" }, \n    { \"id\": 11, \"name\": \"Mr. Nice\" },\n    { \"id\": 12, \"name\": \"Narco\" },\n    { \"id\": 13, \"name\": \"Bombasto\" },\n    { \"id\": 14, \"name\": \"Celeritas\" },\n    { \"id\": 15, \"name\": \"Magneta\" },\n    { \"id\": 16, \"name\": \"RubberMan\" },\n    { \"id\": 17, \"name\": \"Dynama\" },\n    { \"id\": 18, \"name\": \"Dr IQ\" },\n    { \"id\": 19, \"name\": \"Magma\" },\n    { \"id\": 20, \"name\": \"Tornado\" }\n  ]\n}' > db.json   Note que o Her\u00f3i  Zero  n\u00e3o existia antes!  Para simular um contexto para a aplica\u00e7\u00e3o api vamos definir uma rota customizada com o nome de '/api' 1\n2\n3 echo '{\n  \"/api/*\": \"/$1\"\n}' > routes.json   Para executar o servidor execute o comando:  1 json-server --watch --routes routes.json db.json   Ap\u00f3s a subida do servidor, pode-se fazer requisi\u00e7\u00f5es do tipo:  GET /api/heroes   Ir\u00e1 mostrar todos os her\u00f3is   GET /api/heroes/19   Ir\u00e1 mostrar os dados do her\u00f3i com \"id\" igual a 19   1 curl http://localhost:3000/api/heroes   1 curl http://localhost:3000/api/heroes/19   Esse arquivo substitui o arquivo  mock-heroes.ts , que pode ser removido com seguran\u00e7a.  O uso do  Json Server  s\u00f3 \u00e9 \u00fatil no inic\u00edo do processo de desenvolvimento, para prototipagem e demonstra\u00e7\u00f5es (como \u00e9 o caso do Tour of Heroes). Poder\u00edamos at\u00e9 pular esse passo se tiv\u00e9ssemos uma API real.",
            "title": "Simulando a API"
        },
        {
            "location": "/exercicios/exercicio-08/#herois-e-http",
            "text": "Na vers\u00e3o atual do  HeroService , uma  Promise  com os her\u00f3is mock \u00e9 retornada:  1\n2\n3 getHeroes () :   Promise < Hero [] >   { \n   return   Promise . resolve ( HEROES );  }    Isso foi feito j\u00e1 para antecipar a ideia de que  a recupera\u00e7\u00e3o dos her\u00f3is \u00e9 feita com um cliente HTTP, que \u00e9 uma opera\u00e7\u00e3o ass\u00edncrona.  Converta, ent\u00e3o, o m\u00e9todo  getHeroes()  para usar HTTP:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    private   baseUrl   =   'http://localhost:3000/api/heroes' ;    // URL to web api \n\n   constructor ( private   http :   HttpClient )   {   } \n\n   getHeroes () :   Promise < Hero [] >   { \n     const   url   =   this . baseUrl ; \n     return   this . http . get < Hero [] > ( url ). toPromise (). catch ( this . handleError ); \n   } \n\n   private   handleError ( error :   any ) :   Promise < any >   { \n     console . error ( 'An error occurred' ,   error );   // for demo purposes only \n     return   Promise . reject ( error . message   ||   error ); \n   }    Adicione os imports:  1 import   {   HttpClient   }   from   '@angular/common/http' ;    Ajuste o m\u00e9todo  getTopHeroes()  para utilizar os dados vindos do servidor:  1\n2\n3\n4\n5 getTopHeroes () :   Promise < Hero [] >   { \n     return   this . getHeroes (). then ( heroes   =>   { \n       return   heroes . slice ( 0 ,   4 ); \n     });  }    Recarregue o navegador. A lista de her\u00f3is agora foi recuperada a partir da API provida pelo Json Server.",
            "title": "Her\u00f3is e HTTP"
        },
        {
            "location": "/exercicios/exercicio-08/#http-promise",
            "text": "O m\u00e9todo  http.get  retorna um  Observable  da biblioteca RxJS.  Os  Observables  s\u00e3o uma forma poderorsa de gerenciar fluxos de dados ass\u00edncronos. Vamos falar mais sobre  Observables  no decorrer desse exerc\u00edcio. Por enquanto, \u00e9 suficiente entender que convertermos o  Observable  em um  Promise  usando o m\u00e9todo  toPromise() :  1 .toPromise ()    A partir do RxJS 6  toPromise  n\u00e3o \u00e9 mais um operador, e sim faz parte da classe  Observables .\nOs operadores RxJS acrescentam funcionalidades aos  Observables . Para usar essas funcionalidades, voc\u00ea tem que adicionar esses operadores. Para fazer isso, basta import\u00e1-los da biblioteca RxJS:  1 import   {   map   }   from   'rxjs/operators' ;",
            "title": "HTTP Promise"
        },
        {
            "location": "/exercicios/exercicio-08/#extraindo-os-dados-no-callback",
            "text": "HttpClient.get  retorna o corpo da resposta como um objeto JSON n\u00e3o tipado por default. Aplicando o especificador de tipos opcional,  <Hero[]> , nos d\u00e1 como resultado um objeto tipado: Nosso array de her\u00f3is.  A forma do dados JSON \u00e9 dada pela API servidora de dados, no nosso caso o  Json Server . Na vida real, a resposta da sua API pode ter um formato diferente, e voc\u00ea dever\u00e1 usar as propriedades definidas no contrato dessa API.",
            "title": "Extraindo os dados no callback"
        },
        {
            "location": "/exercicios/exercicio-08/#tratamento-de-erros",
            "text": "Ao final do m\u00e9todo  getHeroes() , os poss\u00edveis erros est\u00e3o sendo capturados no m\u00e9todo  catch() , e eles s\u00e3o repassados para o m\u00e9todo  handleError :  1 . catch ( this . handleError );    Essa \u00e9 uma parte cr\u00edtica da aplica\u00e7\u00e3o. Voc\u00ea deve se preparar para as falhas HTTP, pois elas acontecem frequentemente e por raz\u00f5es fora do nosso controle.  1\n2\n3\n4 private   handleError ( error :   any ) :   Promise < any >   { \n   console . error ( 'An error occurred' ,   error );   // for demo purposes only \n   return   Promise . reject ( error . message   ||   error );  }    O nosso servi\u00e7o simplesmente registra um log de erro no console do navegador. Na vida real, os erros devem ser tratados conforme a necessidade da aplica\u00e7\u00e3o.  O c\u00f3digo tamb\u00e9m devolve o erro na forma de uma  Promise  rejeitada. Dessa forma, o componente que chamou o servi\u00e7o tem a chance de agir e exibir uma mensagem de erro para o usu\u00e1rio, por exemplo.",
            "title": "Tratamento de erros"
        },
        {
            "location": "/exercicios/exercicio-08/#recuperando-o-heroi-pelo-id",
            "text": "Ainda no  HeroService , perceba que a implementa\u00e7\u00e3o atual do m\u00e9todo  getHero  est\u00e1 reutilizando o m\u00e9todo  getHeroes  para filtrar o her\u00f3i procurado.  Isso at\u00e9 pode funcionar em simula\u00e7\u00f5es. Na vida real, no entanto, \u00e9 ineficiente solicitar a um servidor a lista de todos os her\u00f3is, quando s\u00f3 se quer um \u00fanico her\u00f3i.  A maioria das APIs suportam uma requisi\u00e7\u00e3o  get-by-id  na forma:  /api/heroes/:id .  Atualize, ent\u00e3o, o m\u00e9todo  HeroService.getHero()  para fazer uma requisi\u00e7\u00e3o get-by-id:  1\n2\n3\n4 getHero ( id :   number ) :   Promise < Hero >   { \n   const   url   =   ` ${ this . baseUrl } / ${ id } ` ; \n   return   this . http . get < Hero > ( url ). toPromise (). catch ( this . handleError ); \n  }    A requisi\u00e7\u00e3o \u00e9 quase a mesma que implementamos em  getHeroes() . A \u00fanica diferen\u00e7a \u00e9 que, aqui, o  id  na URL identifica qual \u00e9 o her\u00f3i que o servidor deve recuperar. Al\u00e9m disso, a resposta \u00e9 um objeto \u00fanico do tipo  Hero  (e n\u00e3o um array).",
            "title": "Recuperando o her\u00f3i pelo id"
        },
        {
            "location": "/exercicios/exercicio-08/#api-inalterada",
            "text": "Apesar de termos feitos v\u00e1rias mudan\u00e7as no servi\u00e7o  HeroService , as altera\u00e7\u00f5es modificaram somente a implementa\u00e7\u00e3o interna dos m\u00e9todos  getHeroes()  e  getHero() , e as assinaturas dos m\u00e9todos n\u00e3o sofreram mudan\u00e7as. Por isso, n\u00e3o ser\u00e1 necess\u00e1rio alterar nenhum componente que usa o servi\u00e7o.",
            "title": "API inalterada"
        },
        {
            "location": "/exercicios/exercicio-08/#atualizando-os-detalhes-do-heroi",
            "text": "Volte ao navegador e tente editar o nome de um her\u00f3i qualquer na p\u00e1gina de detalhes.  Na medida que voc\u00ea digita, o nome do her\u00f3i no cabe\u00e7alho \u00e9 atualizado. Por\u00e9m, se voc\u00ea clicar no bot\u00e3o de voltar, as atualiza\u00e7\u00f5es s\u00e3o perdidas.  O que mudou?  Antes, est\u00e1vamos usando uma lista de mocks compartilhada por toda a aplica\u00e7\u00e3o, e as atualiza\u00e7\u00f5es eram aplicadas diretamente \u00e0 lista de mocks.  Agora, estamos recuperando a lista a partir de um servidor remoto, e se quisermos persistir as atualiza\u00e7\u00f5es, temos que envi\u00e1-las de volta ao servidor.",
            "title": "Atualizando os detalhes do her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-08/#persistindo-as-alteracoes-dos-detalhes-do-heroi",
            "text": "Para persistir as altera\u00e7\u00f5es feitas aos detalhes de um her\u00f3i, adicione um bot\u00e3o ao final do template do  HeroDetailComponent :  1 < button   ( click )=\" save ()\" > Save </ button >    O bot\u00e3o faz um binding de evento de clique de forma que, ao ser clicado, ir\u00e1 invocar o novo m\u00e9todo  save()  do componente.  Inclua, ent\u00e3o, o m\u00e9todo  save()  no  HeroDetailComponent . O m\u00e9todo ir\u00e1 persistir as altera\u00e7\u00f5es no nome do her\u00f3i ao chamar o m\u00e9todo  update()  do  HeroService  e, ent\u00e3o, ir\u00e1 navegar para a vis\u00e3o anterior:  1\n2\n3\n4 save () :   void   { \n   this . heroService . update ( this . hero ) \n     . then (()   =>   this . goBack ());  }",
            "title": "Persistindo as altera\u00e7\u00f5es dos detalhes do her\u00f3i"
        },
        {
            "location": "/exercicios/exercicio-08/#adicionando-o-metodo-heroserviceupdate",
            "text": "A estrutura geral do m\u00e9todo  update()  \u00e9 semelhante \u00e0 estrutura do  getHeroes() , com algumas mudan\u00e7as:   \u00c9 usado o m\u00e9todo  put()  ao inv\u00e9s do m\u00e9todo  get() ;  Para identificar qual her\u00f3i deve ser atualizado, o  id  \u00e9 parametrizado na URL;  O corpo da requisi\u00e7\u00e3o, o her\u00f3i informado, \u00e9 passado como o segundo argumento do m\u00e9todo  put ;   1\n2\n3\n4\n5 update ( hero :   Hero ) :   Promise < Hero >   { \n   const   url   =   ` ${ this . baseUrl } / ${ hero . id } ` ; \n   const   body   =   hero ; \n   return   this . http . put < Hero > ( url ,   body ). toPromise (). catch ( this . handleError );  }    Volte ao navegador e teste a edi\u00e7\u00e3o. Agora, as mudan\u00e7as est\u00e3o sendo persistidas no lado servidor.",
            "title": "Adicionando o m\u00e9todo HeroService.update()"
        },
        {
            "location": "/exercicios/exercicio-08/#adicionando-herois",
            "text": "Para criar um novo her\u00f3i, precisamos de um formul\u00e1rio com uma caixa de texto para o nome do her\u00f3i e com um bot\u00e3o para comandar a inclus\u00e3o do novo her\u00f3i.  Inclua o seguinte trecho HTML no template do  HeroesComponent  logo abaixo de  <h2>My Heroes</h2> :  1\n2\n3\n4 < div > \n   < label > Hero name: </ label >   < input   # heroName   /> \n   < button   ( click )=\" add ( heroName . value );   heroName . value = '' \" > Add </ button >  </ div >    Em resposta ao evento de clique do bot\u00e3o, o template chama o m\u00e9todo  add()  do componente e limpa a caixa de texto, preparando-a para um pr\u00f3ximo nome.  O novo m\u00e9todo  add()  do  HeroesComponent  deve ter o seguinte conte\u00fado:  1\n2\n3\n4\n5\n6\n7\n8\n9 add ( name :   string ) :   void   { \n   name   =   name . trim (); \n   if   ( ! name )   {   return ;   } \n   this . heroService . create ( name ) \n     . then ( hero   =>   { \n       this . heroes . push ( hero ); \n       this . selectedHero   =   null ; \n     });  }    Quando o nome n\u00e3o \u00e9 vazio, o m\u00e9todo delega a cria\u00e7\u00e3o do her\u00f3i ao  HeroService , e ent\u00e3o adiciona o novo her\u00f3i ao array.  Inclua o novo m\u00e9todo  create()  ao  HeroService :  1\n2\n3\n4\n5\n6\n7\n8 create ( name :   string ) :   Promise < Hero >   { \n   const   url   =   this . baseUrl ; \n   const   body :   Hero   =   { \n     id :   undefined , \n     name :   name \n   }; \n   return   this . http . post < Hero > ( url ,   body ). toPromise (). catch ( this . handleError );  }    Recarregue o navegador e crie alguns her\u00f3is.",
            "title": "Adicionando her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-08/#deletando-herois",
            "text": "Associado a cada her\u00f3i na p\u00e1gina de listagem, deve existir um bot\u00e3o de  delete , para permitir a exclus\u00e3o dos her\u00f3is.  Para isso, adicione um elemento  <button>  ao template do  HeroesComponent  como abaixo:  1\n2 < button   class = \"delete\" \n   ( click )=\" delete ( hero );   $ event . stopPropagation ()\" > x </ button >    O elemento  <li> , ent\u00e3o, deve estar como a seguir:  1\n2\n3\n4\n5\n6\n7 < li   * ngFor = \"let hero of heroes\"   ( click )=\" onSelect ( hero )\" \n     [ class . selected ]=\" hero  = ==   selectedHero \" > \n   < span   class = \"badge\" > {{hero.id}} </ span > \n   < span > {{hero.name}} </ span > \n   < button   class = \"delete\" \n     ( click )=\" delete ( hero );   $ event . stopPropagation ()\" > x </ button >  </ li >    Ap\u00f3s chamar o m\u00e9todo  delete()  do componente, o bot\u00e3o de delete interrompe a propaga\u00e7\u00e3o do evento de clique ao chamar o  $event.stopPropagation() . Isso impede que o  click handler  do elemento  <li>  seja disparado tamb\u00e9m (o que selecionaria o usu\u00e1rio a ser deletado).  O m\u00e9todo  delete()  do componente  HeroesComponent  tem uma l\u00f3gica um pouco mais complicada:  1\n2\n3\n4\n5\n6\n7\n8 delete ( hero :   Hero ) :   void   { \n   this . heroService \n       . delete ( hero . id ) \n       . then (()   =>   { \n         this . heroes   =   this . heroes . filter ( h   =>   h   !==   hero ); \n         if   ( this . selectedHero   ===   hero )   {   this . selectedHero   =   null ;   } \n       });  }    Al\u00e9m de delegar a exclus\u00e3o do her\u00f3i para o  HeroService , o m\u00e9todo  delete()  tamb\u00e9m deve remover o her\u00f3i deletado do array de her\u00f3is e resetar o her\u00f3i selecionado, se for necess\u00e1rio.  Para alinhar o bot\u00e3o de delete \u00e0 direita, adicione o seguinte CSS ao  heroes.component.css :  1\n2\n3\n4\n5\n6\n7 button . delete   { \n   float : right ; \n   margin-top :   -2 px ; \n   margin-right :   .8 em ; \n   background-color :   gray   !important ; \n   color : white ;  }",
            "title": "Deletando her\u00f3is"
        },
        {
            "location": "/exercicios/exercicio-08/#adicionando-o-metodo-heroservicedelete",
            "text": "Adicione o seguinte m\u00e9todo  delete()  ao  HeroService , que usa o m\u00e9todo HTTP  delete()  para excluir o her\u00f3i no servidor:  1\n2\n3\n4 delete ( id :   number ) :   Promise < void >   { \n   const   url   =   ` ${ this . baseUrl } / ${ id } ` ; \n   return   this . http . delete < void > ( url ). toPromise (). catch ( this . handleError );  }    Recarregue o navegador e teste a nova funcionalidade de exclus\u00e3o de her\u00f3is.",
            "title": "Adicionando o m\u00e9todo HeroService.delete()"
        },
        {
            "location": "/exercicios/exercicio-08/#observables",
            "text": "Se voc\u00ea prestar aten\u00e7\u00e3o, ir\u00e1 perceber que os m\u00e9todos do servi\u00e7o  Http  sempre retornam um  Observable  de objetos do tipo  Response .  O  HeroService  est\u00e1 convertendo esse  Observable  em um  Promise , devolvendo-o para o componente chamador.  Vamos agora entender como, quando e porque retornar o  Observable  diretamente.",
            "title": "Observables"
        },
        {
            "location": "/exercicios/exercicio-08/#background",
            "text": "Promises  processam um \u00fanico evento ass\u00edncrono, de forma que a fun\u00e7\u00e3o callback \u00e9 chamada uma \u00fanica vez.  Observables , por usa vez, processam um fluxo de eventos ass\u00edncronos, chamando a fun\u00e7\u00e3o callback uma vez para cada resultado desses eventos.  O Angular tem um suporte b\u00e1sico para  Observables , mas os desenvolvedores podem adicionar operadores e extens\u00f5es da biblioteca  RxJS  para incluir novas funcionalidades.  No  HeroService , usamos a fun\u00e7\u00e3o  toPromise()  aos resultados dos m\u00e9todos do servi\u00e7o  Http  para converter o  Observable  em um  Promise .  Essa convers\u00e3o geralmente \u00e9 uma boa op\u00e7\u00e3o, pois, tipicamente, n\u00f3s chamamos o m\u00e9todo  http.get()  para recuperar informa\u00e7\u00f5es de um servidor remoto de uma \u00fanica vez.  No entanto, nem sempre as requisi\u00e7\u00f5es s\u00e3o feitas uma \u00fanica vez. Voc\u00ea pode iniciar uma requisi\u00e7\u00e3o e ela pode ser cancelada, antes mesmo que o servidor responda, dando lugar a uma nova requisi\u00e7\u00e3o.  Essa sequ\u00eancia  request-cancel-new-request  \u00e9 dif\u00edcil de se implementar com  Promises , mas \u00e9 f\u00e1cil com  Observables .",
            "title": "Background"
        },
        {
            "location": "/exercicios/exercicio-08/#pesquisando-herois-pelo-nome",
            "text": "Vamos adicionar uma nova funcionalidade ao Tour of Heroes: a pesquisa de her\u00f3is.  Nessa funcionalidade, vamos adicionar uma caixa de texto onde o usu\u00e1rio ir\u00e1 digitar o nome do her\u00f3i. Na medida em que o usu\u00e1rio digita um nome, iremos enviar m\u00faltiplas requisi\u00e7\u00f5es HTTP para o servi\u00e7o de her\u00f3is, filtrando-os pelo nome digitado.  Vamos adicionar um novo m\u00e9todo ao  HeroService :  1\n2\n3\n4    search ( term :   string ) :   Observable < Hero [] >   { \n     const   url   =   ` ${ this . baseUrl } /?name_like= ${ term } ` ; \n     return   this . http . get < Hero [] > ( url ); \n   }    Atualize os imports...  1\n2 import   {   Observable   }       from   'rxjs' ;  import   {   map   }   from   'rxjs/operators' ;    A chamada ao m\u00e9todo  http.get()  \u00e9 semelhante \u00e0 que fizemos anteriormente, s\u00f3 que aqui introduzimos um par\u00e2metro  name  na query string da URL e usamos o sufixo  _like  que \u00e9 como o  Json Server  especifica como fazer um filtro usando uma express\u00e3o, inclusive, uma express\u00e3o regular.  O mais importante a notar, no entanto, \u00e9 que agora n\u00e3o estamos mais convertendo o resultado do  http.get()  para o tipo  Promise . Ao inv\u00e9s disso, estamos devolvendo o tipo  Observable  diretamente.",
            "title": "Pesquisando her\u00f3is pelo nome"
        },
        {
            "location": "/exercicios/exercicio-08/#criando-o-componente-herosearchcomponent",
            "text": "Para consumir o novo m\u00e9todo, vamos criar o componente  HeroSearchComponent .  Crie, ent\u00e3o, o arquivo  hero-search.component.html  com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 < div   id = \"search-component\" > \n   < h4 > Hero Search </ h4 > \n   < input   # searchBox   id = \"search-box\"   ( keyup )=\" search ( searchBox . value )\"   /> \n   < div > \n     < div   * ngFor = \"let hero of heroes | async\" \n          ( click )=\" gotoDetail ( hero )\"   class = \"search-result\"   > \n      {{hero.name}}\n     </ div > \n   </ div >  </ div >    O template do novo componente \u00e9 simples: cont\u00e9m uma caixa de texto e uma lista com os resultados da pesquisa.  Vamos tamb\u00e9m adicionar estilos CSS para o novo componente. Crie, ent\u00e3o, o arquivo  hero-search.component.css :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 . search-result { \n   border-bottom :   1 px   solid   gray ; \n   border-left :   1 px   solid   gray ; \n   border-right :   1 px   solid   gray ; \n   width : 195 px ; \n   height :   16 px ; \n   padding :   5 px ; \n   background-color :   white ; \n   cursor :   pointer ;  }  . search-result : hover   { \n   color :   #eee ; \n   background-color :   #607D8B ;  }  # search-box { \n   width :   200 px ; \n   height :   20 px ;  }    Na medida em que o usu\u00e1rio digita, um binding de evento  keyup  chama o m\u00e9todo  search()  passando como par\u00e2metro o novo valor da caixa de texto.  Como esperado, o  *ngFor  cria um la\u00e7o de repeti\u00e7\u00e3o para cada item da propriedade  heroes . No entanto, essa propriedade n\u00e3o mais \u00e9 um array de her\u00f3is, mas sim um  Observable  de array de her\u00f3is.  Como o  *ngFor  n\u00e3o trabalha com  Observables , temos que usar o pipe  async , que traduz o  Observable  no array de her\u00f3is esperado pelo  *ngFor .  Crie agora o arquivo  hero-search.component.ts  com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52 import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   Router   }              from   '@angular/router' ;  import   {   Observable ,   Subject ,   of   }    from   'rxjs' ;  // Observable operators  import   {   catchError ,   debounceTime ,   distinctUntilChanged ,   switchMap   }   from   'rxjs/operators' ;  import   {   HeroService   }   from   './hero.service' ;  import   {   Hero   }   from   './hero' ;  @ Component ({ \n   selector :   'app-hero-search' , \n   templateUrl :   './hero-search.component.html' , \n   styleUrls :   [   './hero-search.component.css'   ]  })  export   class   HeroSearchComponent   implements   OnInit   { \n   heroes :   Observable < Hero [] > ; \n   private   searchTerms   =   new   Subject < string > (); \n\n   constructor ( \n     private   heroService :   HeroService , \n     private   router :   Router )   {} \n\n   // Push a search term into the observable stream. \n   search ( term :   string ) :   void   { \n     this . searchTerms . next ( term ); \n   } \n\n   ngOnInit () :   void   { \n     this . heroes   =   this . searchTerms \n       . pipe ( \n         debounceTime ( 300 ),          // wait 300ms after each keystroke before considering the term \n         distinctUntilChanged (),     // ignore if next search term is same as previous \n         switchMap ( term   =>   term     // switch to new observable each time the term changes \n           // return the http search observable \n           ?   this . heroService . search ( term ) \n           // or the observable of empty heroes if there was no search term \n           :   of < Hero [] > ([])), \n         catchError ( error   =>   { \n           // TODO: add real error handling \n           console . log ( error ); \n           return   of < Hero [] > ([]); \n         }) \n       ); \n   } \n\n   gotoDetail ( hero :   Hero ) :   void   { \n     const   link   =   [ '/detail' ,   hero . id ]; \n     this . router . navigate ( link ); \n   }  }    Vamos manter o foco agora no  searchTerms :  1\n2\n3\n4\n5\n6 private   searchTerms   =   new   Subject < string > ();  // Push a search term into the observable stream.  search ( term :   string ) :   void   { \n   this . searchTerms . next ( term );  }    Um  Subject  \u00e9 um produtor de um fluxo de eventos observ\u00e1veis, de forma que  searchTerms  produz um  Observable  de strings. \u00c9, ent\u00e3o, o crit\u00e9rio de pesquisa para a consulta de her\u00f3is.  Cada chamada ao m\u00e9todo  search()  coloca uma nova string no fluxo de eventos ao chamar o m\u00e9todo  next() .  Temos agora que converter esse fluxo de strings ( searchTerms ) em um fluxo de array de her\u00f3is ( heroes ).  Vamos colocar nossa aten\u00e7\u00e3o, ent\u00e3o, para o seguinte trecho:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 heroes :   Observable < Hero [] > ;  ngOnInit () :   void   { \n   this . heroes   =   this . searchTerms \n     . pipe ( \n       debounceTime ( 300 ),          // espera 300ms antes de criar um novo evento \n       distinctUntilChanged (),     // ignora o evento se o termo de pesquisa \u00e9 o mesmo do evento anterior \n       switchMap ( term   =>   term     // muda para o novo observable toda vez que o termo de pesquisa mudar, descartando os eventos anteriores \n         // devolve o observable do m\u00e9todo http \n         ?   this . heroService . search ( term ) \n         // ou um observable vazio, caso nenhum termo de pesquisa tenha sido informado \n         :   of < Hero [] > ([])), \n       catchError ( error   =>   { \n         // TODO: adicionar tratamento de erro \n         console . log ( error ); \n         return   of < Hero [] > ([]); \n       }) \n     );  }    Para diminuir a quantidade de requisi\u00e7\u00f5es HTTP, usamos alguns operadores do  Observable :   debounceTime : espera pelo fluxo pausar por um tempo determinado, antes de criar um novo evento.  No nosso caso, nunca iremos criar requisi\u00e7\u00f5es mais frequentes do que 300ms.  distinctUntilChanged : s\u00f3 envia uma nova requisi\u00e7\u00e3o caso o filtro tenha de fato mudado.  switchMap : chama o servi\u00e7o de pesquisa para cada evento do fluxo, e retorna somente o  Observable  mais recente, cancelando e descartando os anteriores.  catchError : intercepta um  Observable  que tenha falhado. Em uma aplica\u00e7\u00e3o real, poder\u00edamos ter um tratamento mais adequado.",
            "title": "Criando o componente HeroSearchComponent"
        },
        {
            "location": "/exercicios/exercicio-08/#importando-os-operadores-rxjs",
            "text": "A maioria dos operadores RxJS n\u00e3o est\u00e3o inclu\u00eddos no Angular por padr\u00e3o. S\u00f3 est\u00e1 inclu\u00eddo o que o Angular usa de fato.  Quando voc\u00ea precisa de funcionalidades adicionais, voc\u00ea deve extender o  Observable , importando as bibliotecas que definem os operadores que voc\u00ea deseja.  Esses s\u00e3o os imports que o componente  HeroSearchComponent  usa:  1\n2\n3\n4 import   {   Observable ,   Subject ,   of   }     from   'rxjs' ;  // Observable operators  import   {   catchError ,   debounceTime ,   distinctUntilChanged ,   switchMap   }   from   'rxjs/operators' ;",
            "title": "Importando os operadores RxJS"
        },
        {
            "location": "/exercicios/exercicio-08/#adicionando-o-componente-de-pesquisa-ao-dashboard",
            "text": "Adicione, ent\u00e3o, o componente  HeroSearchComponent  ao final do template do  DashboardComponent :  1\n2\n3\n4\n5\n6\n7\n8\n9 < h3 > Top Heroes </ h3 >  < div   class = \"grid grid-pad\" > \n   < a   * ngFor = \"let hero of heroes\"    [ routerLink ]=\"['/ detail ',   hero . id ]\"    class = \"col-1-4\" > \n     < div   class = \"module hero\" > \n       < h4 > {{hero.name}} </ h4 > \n     </ div > \n   </ a >  </ div >  < app-hero-search ></ app-hero-search >    Por fim, inclua o  HeroSearchComponent  ao array  declarations  do  AppModule :  1\n2\n3\n4\n5\n6\n7\n8 import   {   HeroSearchComponent   }   from   './hero-search.component' ;  //...  declarations :   [ \n   //... \n   HeroSearchComponent  ],    Execute a aplica\u00e7\u00e3o novamente e verifique o comportamento da pesquisa no Dashboard. Voc\u00ea dever\u00e1 ver algo como:",
            "title": "Adicionando o componente de pesquisa ao Dashboard"
        },
        {
            "location": "/exercicios/exercicio-08/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 angular-tour-of-heroes/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.css\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- app-routing.module.ts\n|  |  |-- dashboard.component.css\n|  |  |-- dashboard.component.html\n|  |  |-- dashboard.component.ts\n|  |  |-- hero.service.ts\n|  |  |-- hero.ts\n|  |  |-- hero-detail.component.css\n|  |  |-- hero-detail.component.html\n|  |  |-- hero-detail.component.ts\n|  |  |-- hero-search.component.css\n|  |  |-- hero-search.component.html\n|  |  |-- hero-search.component.ts\n|  |  |-- heroes.component.css\n|  |  |-- heroes.component.html\n|  |  |-- heroes.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-08/#resumo",
            "text": "Adicionamos as depend\u00eancias necess\u00e1rias para usar HTTP.  Refatoramos o  HeroService  para recuperar os her\u00f3is a partir de uma API.  Adicionamos os m\u00e9todos  post() ,  put()  e  delete()  ao  HeroService .  Atualizamos os componentes para permitir a cria\u00e7\u00e3o, edi\u00e7\u00e3o e dele\u00e7\u00e3o de her\u00f3is.  Configuramos uma API usnado o  Json Service .  Aprendemos a usar  Observables .",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-08/#proximo-passo",
            "text": "Exerc\u00edcio 09",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-09/",
            "text": "Exerc\u00edcio 09\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nDemonstrar o uso dos lifecycle hooks em uma s\u00e9rie de exerc\u00edcios.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n30 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-09-lifecycle-hooks\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-09-lifecycle-hooks\n\ncd\n exercicio-09-lifecycle-hooks\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nIntrodu\u00e7\u00e3o\n\u00b6\n\n\nNesse exerc\u00edcio, iremos demonstrar os lifecycle hooks em uma s\u00e9rie de exerc\u00edcios.\n\n\nCada exerc\u00edcio segue um padr\u00e3o comum: um \ncomponente pai\n serve como um teste para um \ncomponente filho\n que ilustra um (ou mais de um) m\u00e9todo do lifecycle hook.\n\n\nAqui est\u00e1 uma breve descri\u00e7\u00e3o de cada um dos exerc\u00edcios:\n\n\n\n\n\n\n\n\nComponente\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nPeek-a-boo\n\n\nDemonstra todos os lifecycle hooks. Cada m\u00e9todo hook escreve um registro de log na tela.\n\n\n\n\n\n\nSpy\n\n\nDiretivas tamb\u00e9m possuem lifecycle hooks. Vamos escrever uma \nSpyDirective\n para criar registros de log para quando o componente associado \u00e9 criado ou destru\u00eddo.\n\n\n\n\n\n\nOnChanges\n\n\nVamos ver como o Angular chama o m\u00e9todo \nngOnChanges()\n toda vez que uma das propriedades de input de um componente \u00e9 alterada.\n\n\n\n\n\n\nDoCheck\n\n\nImplementa o m\u00e9todo \nngDoCheck()\n com uma detec\u00e7\u00e3o de mudan\u00e7as customizada.\n\n\n\n\n\n\nAfterView\n\n\nMostra o que o Angular entende por \nview\n. Demostra os m\u00e9todos \nngAfterViewInit()\n e \nngAfterViewChecked()\n.\n\n\n\n\n\n\nAfterContent\n\n\nMostra como projetar um conte\u00fado dentro de um componente. Demonstra os m\u00e9todo \nngAfterContentInit()\n e \nngAfterContentChecked()\n.\n\n\n\n\n\n\n\n\nPeek-a-boo\n\u00b6\n\n\nO componente \nPeekABooComponent\n demonstra todos os lifecycle hooks em um \u00fanico componente.\n\n\nVoc\u00ea raramente (ou nunca) vai implementar todos as interfaces desse jeito; mas esse exerc\u00edcio \u00e9 \u00fatil para mostrar a ordem em que os m\u00e9todos hooks s\u00e3o chamados.\n\n\nCriando o servi\u00e7o \nLoggerService\n\u00b6\n\n\nO nosso objetivo \u00e9 criar registros de log em cada um dos m\u00e9todos hook do nosso componente.\n\n\nVamos, ent\u00e3o, criar o servi\u00e7o \nLoggerService\n para que o componente possa registrar esses logs (que eventualmente ser\u00e3o exibidos na tela).\n\n\nPara isso, crie o servi\u00e7o \nLoggerService\n na pasta \nsrc/app\n com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nInjectable\n()\n\n\nexport\n \nclass\n \nLoggerService\n \n{\n\n  \nlogs\n:\n \nstring\n[]\n \n=\n \n[];\n\n  \nprevMsg\n \n=\n \n''\n;\n\n  \nprevMsgCount\n \n=\n \n1\n;\n\n\n  \nlog\n(\nmsg\n:\n \nstring\n)\n  \n{\n\n    \nif\n \n(\nmsg\n \n===\n \nthis\n.\nprevMsg\n)\n \n{\n\n      \n// Repeat message; update last log entry with count.\n\n      \nthis\n.\nlogs\n[\nthis\n.\nlogs\n.\nlength\n \n-\n \n1\n]\n \n=\n \nmsg\n \n+\n \n` (\n${\nthis\n.\nprevMsgCount\n \n+=\n \n1\n}\nx)`\n;\n\n    \n}\n \nelse\n \n{\n\n      \n// New message; log it.\n\n      \nthis\n.\nprevMsg\n \n=\n \nmsg\n;\n\n      \nthis\n.\nprevMsgCount\n \n=\n \n1\n;\n\n      \nthis\n.\nlogs\n.\npush\n(\nmsg\n);\n\n    \n}\n\n  \n}\n\n\n  \nclear\n()\n \n{\n \nthis\n.\nlogs\n.\nlength\n \n=\n \n0\n;\n \n}\n\n\n  \n// schedules a view refresh to ensure display catches up\n\n  \ntick\n()\n \n{\n  \nthis\n.\ntick_then\n(()\n \n=>\n \n{\n \n});\n \n}\n\n  \ntick_then\n(\nfn\n:\n \n()\n \n=>\n \nany\n)\n \n{\n \nsetTimeout\n(\nfn\n,\n \n0\n);\n \n}\n\n\n}\n\n\n\n\n\n\n\nO servi\u00e7o mant\u00e9m os registros de log no array de strings \nlogs\n. Esse array \u00e9 uma propriedade p\u00fablica e, portanto, pode ser acessada pelos componentes que usam esse servi\u00e7o. \u00c9 assim que, eventualmente, iremos exibir os registros de log na tela.\n\n\nO servi\u00e7o tamb\u00e9m disponibiliza o m\u00e9todo \nlog()\n, que ser\u00e1 chamado pelo componente para registrar as mensagens de logs, incluindo-a na propriedade p\u00fablica \nlogs\n.\n\n\nO servi\u00e7o tamb\u00e9m faz um controle para evitar o registro de mensagens repetidas. Ao inv\u00e9s disso, \u00e9 criado um sufixo indicando a quantidade de repeti\u00e7\u00f5es, como, por exemplo: \nAfterContentChecked (3x)\n.\n\n\nAl\u00e9m disso, o servi\u00e7o tamb\u00e9m disponibiliza o m\u00e9todo \nclear()\n para limpar os registros de logs.\n\n\nCriando o componente \nPeekABooComponent\n\u00b6\n\n\nCrie, agora, o arquivo \npeek-a-boo.component.ts\n na pasta \nsrc/app\n com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nLoggerService\n \n}\n    \nfrom\n \n'./logger.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'peek-a-boo'\n,\n\n  \ntemplate\n:\n \n'<p>Now you see my hero, {{name}}</p>'\n\n\n})\n\n\nexport\n \nclass\n \nPeekABooComponent\n \n{\n\n  \n@\nInput\n()\n  \nname\n:\n \nstring\n;\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{}\n  \n\n}\n\n\n\n\n\n\n\nAt\u00e9 a\u00ed, n\u00e3o h\u00e1 novidades. Criamos a estrutura b\u00e1sica do componente \nPeekABooComponent\n, com uma propriedade de input e uma inje\u00e7\u00e3o de depend\u00eancia.\n\n\nEventualmente, a propriedade \nname\n ser\u00e1 alvo de um \nbinding\n de propriedade, e o seu valor ser\u00e1 definido por outro componente (lembre-se que, no nosso padr\u00e3o, sempre teremos um componente pai para testar o nosso componente filho).\n\n\nNote tamb\u00e9m que estamos injetando o servi\u00e7o \nLoggerService\n no construtor do componente. Ele ser\u00e1 utilizado logo mais para o registro dos logs.\n\n\nImplementando os \nlifecycle hooks\n\u00b6\n\n\nPara interceptar cada um dos momentos do lifecycle hooks, o Angular disponibiliza, na biblioteca \n@angular/core\n, as interfaces do \nlifecycle hooks\n. Inclua, ent\u00e3o, todas essas interfaces na assinatura do \nPeekABooComponent\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nimport\n \n{\n\n  \nAfterContentChecked\n,\n\n  \nAfterContentInit\n,\n\n  \nAfterViewChecked\n,\n\n  \nAfterViewInit\n,\n\n  \nDoCheck\n,\n\n  \nOnChanges\n,\n\n  \nOnDestroy\n,\n\n  \nOnInit\n,\n\n  \nSimpleChanges\n\n\n}\n \nfrom\n \n'@angular/core'\n;\n \n// <-- n\u00e3o esque\u00e7a de incluir os imports\n\n\n\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nLoggerService\n \n}\n    \nfrom\n \n'./logger.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'peek-a-boo'\n,\n\n  \ntemplate\n:\n \n'<p>Now you see my hero, {{name}}</p>'\n\n\n})\n\n\nexport\n \nclass\n \nPeekABooComponent\n \nimplements\n  \n             \nOnChanges\n,\n \nOnInit\n,\n \nDoCheck\n,\n\n             \nAfterContentInit\n,\n \nAfterContentChecked\n,\n\n             \nAfterViewInit\n,\n \nAfterViewChecked\n,\n\n             \nOnDestroy\n \n{\n \n// <-- inclua as interfaces na assinatura da classe\n\n  \n@\nInput\n()\n  \nname\n:\n \nstring\n;\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{}\n  \n\n}\n\n\n\n\n\n\n\nNesse momento, o compilador TypeScript ir\u00e1 levantar erros do tipo:\n\n\n1\n2\nClass\n \n'PeekABooComponent'\n \nincorrectly\n \nimplements\n \ninterface\n \n'OnInit'\n.\n\n  \nProperty\n \n'ngOnInit'\n \nis\n \nmissing\n \nin\n \ntype\n \n'PeekABooComponent'\n.\n\n\n\n\n\n\n\nPara corrigir esse erro, vamos implementar o \nstub\n de cada um dos m\u00e9todos das interfaces.\n\n\nPor padr\u00e3o, o m\u00e9todo hook segue o nome da interface, com o sufixo \nng\n. Por exemplo, a interface \nOnInit\n define o m\u00e9todo \nngOnInit()\n.\n\n\nInclua, ent\u00e3o, os seguintes m\u00e9todos ao componente:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nngOnChanges\n(\nchanges\n:\n \nSimpleChanges\n)\n \n{}\n\n\n\nngOnInit\n()\n \n{\n \n}\n\n\n\nngDoCheck\n()\n \n{\n \n}\n\n\n\nngAfterContentInit\n()\n \n{\n \n}\n\n\n\nngAfterContentChecked\n()\n \n{\n \n}\n\n\n\nngAfterViewInit\n()\n \n{\n \n}\n\n\n\nngAfterViewChecked\n()\n \n{\n \n}\n\n\n\nngOnDestroy\n()\n \n{\n \n}\n\n\n\n\n\n\n\nO \u00fanico m\u00e9todo que recebe um par\u00e2metro \u00e9 o \nngOnChanges\n. A cada mudan\u00e7a, esse par\u00e2metro guarda os valores atual e anterior de todas as propriedades de input que foram alteradas (note que j\u00e1 fizemos o import do s\u00edmbolo \nSimpleChanges\n junto com as interfaces anteriormente).\n\n\nRegistrando os logs\n\u00b6\n\n\nAgora que temos a estrutura b\u00e1sica dos m\u00e9todos, podemos finalmente incluir os registros de log no \nLoggerService\n. Crie, ent\u00e3o, o seguinte m\u00e9todo no \nPeekABooComponent\n:\n\n\n1\n2\n3\nlogIt\n(\nmsg\n:\n \nstring\n)\n \n{\n\n  \nthis\n.\nlogger\n.\nlog\n(\n`#\n${\nnextId\n++\n}\n \n${\nmsg\n}\n`\n);\n\n\n}\n\n\n\n\n\n\n\nO m\u00e9todo \nlogIt\n recebe como par\u00e2metro a mensagem de log e, antes de direcion\u00e1-la para o servi\u00e7o \nLoggerService\n, acrescenta um prefixo com um n\u00famero sequencial (a vari\u00e1vel \nnextId\n). Dessa forma, conseguiremos acompanhar a quantidade de logs registrados facilmente.\n\n\nInicialize a vari\u00e1vel \nnextId\n, incluindo-a no arquivo \npeek-a-boo.component.ts\n antes da defini\u00e7\u00e3o da classe \nPeekABooComponent\n:\n\n\n1\n2\n3\n4\nlet\n \nnextId\n \n=\n \n1\n;\n \n// <-- defina e inicialize a vari\u00e1vel FORA da classe PeekABooComponent\n\n\n\n@\nComponent\n({\n \n...\n \n})\n\n\nexport\n \nclass\n \nPeekABooComponent\n \n...\n\n\n\n\n\n\n\nModifique ent\u00e3o os m\u00e9todos hook para invocar o novo m\u00e9todo \nlogIt\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\nngOnChanges\n(\nchanges\n:\n \nSimpleChanges\n)\n \n{\n\n  \nlet\n \nchangesMsgs\n:\n \nstring\n[]\n \n=\n \n[];\n\n  \nfor\n \n(\nlet\n \npropName\n \nin\n \nchanges\n)\n \n{\n\n    \nif\n \n(\npropName\n \n===\n \n'name'\n)\n \n{\n\n      \nlet\n \nname\n \n=\n \nchanges\n[\n'name'\n].\ncurrentValue\n;\n\n      \nchangesMsgs\n.\npush\n(\n`name \n${\nthis\n.\nverb\n}\n to \"\n${\nname\n}\n\"`\n);\n\n    \n}\n \nelse\n \n{\n\n      \nchangesMsgs\n.\npush\n(\npropName\n \n+\n \n' '\n \n+\n \nthis\n.\nverb\n);\n\n    \n}\n\n  \n}\n\n  \nthis\n.\nlogIt\n(\n`OnChanges: \n${\nchangesMsgs\n.\njoin\n(\n'; '\n)\n}\n`\n);\n\n  \nthis\n.\nverb\n \n=\n \n'changed'\n;\n \n// next time it will be a change\n\n\n}\n\n\n\nngOnInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`OnInit`\n);\n \n}\n\n\n\nngDoCheck\n()\n \n{\n \nthis\n.\nlogIt\n(\n`DoCheck`\n);\n \n}\n\n\n\nngAfterContentInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterContentInit`\n);\n  \n}\n\n\n\nngAfterContentChecked\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterContentChecked`\n);\n \n}\n\n\n\nngAfterViewInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterViewInit`\n);\n \n}\n\n\n\nngAfterViewChecked\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterViewChecked`\n);\n \n}\n\n\n\nngOnDestroy\n()\n \n{\n \nthis\n.\nlogIt\n(\n`OnDestroy`\n);\n \n}\n\n\n\n\n\n\n\nCom exce\u00e7\u00e3o do m\u00e9todo \nngOnChanges()\n, todos os outros m\u00e9todos hook simplesmente invocam o m\u00e9todo \nlogIt()\n com o nome da interface do lifecycle hook associada.\n\n\nO m\u00e9todo \nngOnChanges()\n \u00e9 um pouco mais complexo.\n\n\nO par\u00e2metro \nchanges\n pode ser entendido como um mapa cujas \nchaves\n s\u00e3o os nomes das propriedades que sofreram mudan\u00e7as e os valores s\u00e3o inst\u00e2ncias do tipo \nSimpleChange\n, uma interface que representa uma mudan\u00e7a simples (guardando o valor anterior e o valor atual da propriedade).\n\n\nO m\u00e9todo, ent\u00e3o, percorre esse mapa criando um array com os registros das mudan\u00e7as que aconteceram nessa chamada ao \nngOnChanges()\n.\n\n\nA primeira vez que o m\u00e9todo \nngOnChanges()\n \u00e9 chamado antes do \nngOnInit()\n para inicializar as propriedades de input do componente. As chamadas seguintes ser\u00e3o feitas nas altera\u00e7\u00f5es a essas propriedades. Para diferenciar, ent\u00e3o, a inicializa\u00e7\u00e3o da propriedade \nname\n das mudan\u00e7as subsequentes, o m\u00e9todo \nngOnChanges()\n faz uso de uma nova propriedade \nverb\n do \nPeekABooComponent\n. Inclua essa nova propriedade entre antes do m\u00e9todo construtor:\n\n\n1\nprivate\n \nverb\n \n=\n \n'initialized'\n;\n\n\n\n\n\n\n\nO resultado final do \nPeekABooComponent\n \u00e9 como a seguir:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\nimport\n \n{\n\n  \nAfterContentChecked\n,\n\n  \nAfterContentInit\n,\n\n  \nAfterViewChecked\n,\n\n  \nAfterViewInit\n,\n\n  \nDoCheck\n,\n\n  \nOnChanges\n,\n\n  \nOnDestroy\n,\n\n  \nOnInit\n,\n\n  \nSimpleChanges\n\n\n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nComponent\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nLoggerService\n \n}\n    \nfrom\n \n'./logger.service'\n;\n\n\n\nlet\n \nnextId\n \n=\n \n1\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'peek-a-boo'\n,\n\n  \ntemplate\n:\n \n'<p>Now you see my hero, {{name}}</p>'\n\n\n})\n\n\n// Don't HAVE to mention the Lifecycle Hook interfaces\n\n\n// unless we want typing and tool support.\n\n\nexport\n \nclass\n \nPeekABooComponent\n \nimplements\n\n             \nOnChanges\n,\n \nOnInit\n,\n \nDoCheck\n,\n\n             \nAfterContentInit\n,\n \nAfterContentChecked\n,\n\n             \nAfterViewInit\n,\n \nAfterViewChecked\n,\n\n             \nOnDestroy\n \n{\n\n  \n@\nInput\n()\n  \nname\n:\n \nstring\n;\n\n\n  \nprivate\n \nverb\n \n=\n \n'initialized'\n;\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{\n\n    \nlet\n \nis\n \n=\n \nthis\n.\nname\n \n?\n \n'is'\n \n:\n \n'is not'\n;\n\n    \nthis\n.\nlogIt\n(\n`name \n${\nis\n}\n known at construction`\n);\n\n  \n}\n\n\n  \nlogIt\n(\nmsg\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nlogger\n.\nlog\n(\n`#\n${\nnextId\n++\n}\n \n${\nmsg\n}\n`\n);\n\n  \n}\n\n\n  \n// only called for/if there is an @input variable set by parent.\n\n  \nngOnChanges\n(\nchanges\n:\n \nSimpleChanges\n)\n \n{\n\n    \nlet\n \nchangesMsgs\n:\n \nstring\n[]\n \n=\n \n[];\n\n    \nfor\n \n(\nlet\n \npropName\n \nin\n \nchanges\n)\n \n{\n\n      \nif\n \n(\npropName\n \n===\n \n'name'\n)\n \n{\n\n        \nlet\n \nname\n \n=\n \nchanges\n[\n'name'\n].\ncurrentValue\n;\n\n        \nchangesMsgs\n.\npush\n(\n`name \n${\nthis\n.\nverb\n}\n to \"\n${\nname\n}\n\"`\n);\n\n      \n}\n \nelse\n \n{\n\n        \nchangesMsgs\n.\npush\n(\npropName\n \n+\n \n' '\n \n+\n \nthis\n.\nverb\n);\n\n      \n}\n\n    \n}\n\n    \nthis\n.\nlogIt\n(\n`OnChanges: \n${\nchangesMsgs\n.\njoin\n(\n'; '\n)\n}\n`\n);\n\n    \nthis\n.\nverb\n \n=\n \n'changed'\n;\n \n// next time it will be a change\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`OnInit`\n);\n \n}\n\n\n  \n// Beware! Called frequently!\n\n  \n// Called in every change detection cycle anywhere on the page\n\n  \nngDoCheck\n()\n \n{\n \nthis\n.\nlogIt\n(\n`DoCheck`\n);\n \n}\n\n\n  \nngAfterContentInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterContentInit`\n);\n  \n}\n\n\n  \n// Beware! Called frequently!\n\n  \n// Called in every change detection cycle anywhere on the page\n\n  \nngAfterContentChecked\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterContentChecked`\n);\n \n}\n\n\n  \nngAfterViewInit\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterViewInit`\n);\n \n}\n\n\n  \n// Beware! Called frequently!\n\n  \n// Called in every change detection cycle anywhere on the page\n\n  \nngAfterViewChecked\n()\n \n{\n \nthis\n.\nlogIt\n(\n`AfterViewChecked`\n);\n \n}\n\n\n  \nngOnDestroy\n()\n \n{\n \nthis\n.\nlogIt\n(\n`OnDestroy`\n);\n \n}\n\n\n}\n\n\n\n\n\n\n\nCriando o componente \nPeekABooParentComponent\n\u00b6\n\n\nPara demonstrar o componente \nPeekABooComponent\n, vamos criar o componente pai \nPeekABooParentComponent\n.\n\n\nO componente pai ser\u00e1 respons\u00e1vel por controlar a exibi\u00e7\u00e3o do componente filho e dos registros de log na tela.\n\n\nCrie, ent\u00e3o, o arquivo \npeek-a-boo-parent.component.ts\n na pasta \nsrc/app\n com o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nLoggerService\n \n}\n \nfrom\n \n'./logger.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'peek-a-boo-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n  <div class=\"parent\">\n\n\n    <button (click)=\"toggleChild()\">\n\n\n      {{hasChild ? 'Destroy' : 'Create'}} PeekABooComponent\n\n\n    </button>\n\n\n    <button (click)=\"updateHero()\" [hidden]=\"!hasChild\">Update Hero</button>\n\n\n\n    <peek-a-boo *ngIf=\"hasChild\" [name]=\"heroName\">\n\n\n    </peek-a-boo>\n\n\n\n    <h4>-- Lifecycle Hook Log --</h4>\n\n\n    <div *ngFor=\"let msg of hookLog\">{{msg}}</div>\n\n\n  </div>\n\n\n  `\n,\n\n  \nproviders\n:\n  \n[\n \nLoggerService\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nPeekABooParentComponent\n \n{\n\n\n  \nhasChild\n \n=\n \nfalse\n;\n\n  \nhookLog\n:\n \nstring\n[];\n\n\n  \nheroName\n \n=\n \n'Windstorm'\n;\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{\n\n    \nthis\n.\nhookLog\n \n=\n \nlogger\n.\nlogs\n;\n\n  \n}\n\n\n  \ntoggleChild\n()\n \n{\n\n    \nthis\n.\nhasChild\n \n=\n \n!\nthis\n.\nhasChild\n;\n\n    \nif\n \n(\nthis\n.\nhasChild\n)\n \n{\n\n      \nthis\n.\nheroName\n \n=\n \n'Windstorm'\n;\n\n      \nthis\n.\nlogger\n.\nclear\n();\n \n// clear log on create\n\n    \n}\n\n    \nthis\n.\nlogger\n.\ntick\n();\n\n  \n}\n\n\n  \nupdateHero\n()\n \n{\n\n    \nthis\n.\nheroName\n \n+=\n \n'!'\n;\n\n    \nthis\n.\nlogger\n.\ntick\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nNote as seguintes caracter\u00edsticas do componente \nPeekABooParentComponent\n:\n\n\n\n\nO servi\u00e7o \nLoggerService\n \u00e9 injetado no construtor do componente. A propriedade p\u00fablica \nlogs\n do servi\u00e7o \u00e9 referenciada na propriedade \nhookLog\n, que por sua vez \u00e9 utilizada no template para a exibi\u00e7\u00e3o dos registros de log.\n\n\nA exibi\u00e7\u00e3o do componente filho \nPeekABooComponent\n \u00e9 controlada pela diretiva \n*ngIf\n e pela propriedade \nhasChild\n do componente \nPeekABooParentComponent\n. Sempre que o valor da propriedade \nhasChild\n mudar de \nfalse\n para \ntrue\n, o Angular ir\u00e1 incluir o componente \n<peek-a-boo>\n no DOM, criando uma nova inst\u00e2ncia do componente \nPeekABooComponent\n.\n\n\nO \nPeekABooParentComponent\n passa o valor do nome do her\u00f3i para o componente filho atrav\u00e9s do binding de propriedade \n[name]=\"heroName\"\n.\n\n\nO template do \nPeekABooParentComponent\n exibe dois bot\u00f5es:\n\n\nUm bot\u00e3o para criar (ou destruir) o componente filho \nPeekABooComponent\n.\n\n\nUm bot\u00e3o para alterar o nome do her\u00f3i.\n\n\nAo final do template, todas as mensagens de log s\u00e3o exibidas na itera\u00e7\u00e3o da diretiva \n*ngFor\n.\n\n\n\n\nRegistrando os componentes\n\u00b6\n\n\nPara vermos tudo em a\u00e7\u00e3o, vamos incluir os componentes \nPeekABooParentComponent\n e \nPeekABooComponent\n no m\u00f3dulo \nAppModule\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nCommonModule\n \n}\n \nfrom\n \n'@angular/common'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\n\nimport\n \n{\n \nPeekABooParentComponent\n \n}\n \nfrom\n \n'./peek-a-boo-parent.component'\n;\n \n// <-- importe o s\u00edmbolo PeekABooComponent\n\n\nimport\n \n{\n \nPeekABooComponent\n \n}\n \nfrom\n \n'./peek-a-boo.component'\n;\n \n// <-- importe o s\u00edmbolo PeekABooComponent\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nCommonModule\n,\n\n    \nBrowserModule\n\n  \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nPeekABooParentComponent\n,\n \n// <-- declare o componente PeekABooParentComponent\n\n    \nPeekABooComponent\n,\n \n// <-- declare o componente PeekABooComponent\n\n  \n],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nPara separarmos na p\u00e1gina os v\u00e1rios exemplos dos \nLifecycle Hooks\n iremos criar cada exemplo numa se\u00e7\u00e3o separada.\nPara isso usaremos da biblioteca \nngx-bootstrap\n o \nAccordion\n\n\nPara instalar a biblioteca execute o comando:\n\n1\nnpm install ngx-bootstrap --save\n\n\n\n\n\nAdicione o c\u00f3digo abaixo no \nindex.html\n na tag \nhead\n\n\n1\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n\n\n\n\nAltere o \napp.module.ts\n com o objetivo de importar o m\u00f3dulo \nAccordion\n\n\n1\nimport\n \n{\n \nAccordionModule\n \n}\n \nfrom\n \n'ngx-bootstrap'\n;\n\n\n\n\n\n\n1\n2\nimports: [\n    AccordionModule.forRoot(),\n\n\n\n\n\n\nPor fim, modifique o arquivo \napp.component.html\n para incluir o novo elemento customizado \n<peek-a-boo-parent>\n:\n\n\n1\n2\n3\n4\n5\n6\n<\nh1\n>\nLifecycle Hooks\n</\nh1\n>\n\n\n<\naccordion\n>\n\n    \n<\naccordion-group\n \nheading\n=\n\"Peek-a-boo: (most) lifecycle hooks\"\n>\n\n        \n<\npeek-a-boo-parent\n></\npeek-a-boo-parent\n>\n\n    \n</\naccordion-group\n>\n\n\n</\naccordion\n>\n    \n\n\n\n\n\n\nAnalisando o Peek-a-boo\n\u00b6\n\n\nA figura abaixo reflete o estado do log depois que o usu\u00e1rio clicou no bot\u00e3o \nCreate...\n e ent\u00e3o no bot\u00e3o \nDestroy...\n.\n\n\n\n\nA sequ\u00eancia dos registros de log seguem a ordem de chamada prescrita para os m\u00e9todos do lifecycle hook: \nOnChanges\n, \nOnInit\n, \nDoCheck\n (3x), \nAfterContentInit\n, \nAfterContentChecked\n (3x), \nAfterViewInit\n, \nAfterViewChecked\n (3x) e \nOnDestroy\n.\n\n\nSe o usu\u00e1rio tivesse clicado no bot\u00e3o \nUpdate Hero\n, ter\u00edamos outro registro de \nOnChanges\n e mais duas chamadas ao trio \nDoCheck\n, \nAfterContentChecked\n e \nAfterViewChecked\n.\n\n\nPodemos concluir, ent\u00e3o, que esses tr\u00eas \u00faltimos hooks s\u00e3o chamados frequentemente. Por isso, mantenha a l\u00f3gica nesses hooks a mais limpa poss\u00edvel.\n\n\nSpy\n\u00b6\n\n\nO Angular chama os m\u00e9todos do lifecycle hook tamb\u00e9m para diretivas (e n\u00e3o s\u00f3 para componentes).\n\n\nVamos ent\u00e3o criar uma diretiva \nSpyDirective\n para \"espionar\" um objeto DOM que n\u00e3o podemos alterar diretamente.\n\n\nA diretiva \u00e9 simples, e consiste basicamente nos m\u00e9todos \nngOnInit()\n e \nngOnDestroy()\n que cria registros de logs usando o servi\u00e7o \nLoggerService\n.\n\n\nCrie, ent\u00e3o, a diretiva usando o Angular CLI:\n\n\n1\nng generate directive spy --no-spec\n\n\n\n\n\n\nO comando acima cria o arquivo \nspy.directive.ts\n e j\u00e1 registra a diretiva \nSpyDirective\n no m\u00f3dulo \nAppModule\n, tornando-a dispon\u00edvel para uso na nossa aplica\u00e7\u00e3o.\n\n\nModifique o conte\u00fado do arquivo \nspy.directive.ts\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nimport\n \n{\n \nDirective\n,\n \nOnInit\n,\n \nOnDestroy\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nLoggerService\n \n}\n \nfrom\n \n'./logger.service'\n;\n\n\n\nlet\n \nnextId\n \n=\n \n1\n;\n\n\n\n// Spy on any element to which it is applied.\n\n\n// Usage: <div appSpy>...</div>\n\n\n@\nDirective\n({\nselector\n:\n \n'[appSpy]'\n})\n\n\nexport\n \nclass\n \nSpyDirective\n \nimplements\n \nOnInit\n,\n \nOnDestroy\n \n{\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{\n \n}\n\n\n  \nngOnInit\n()\n    \n{\n \nthis\n.\nlogIt\n(\n`onInit`\n);\n \n}\n\n\n  \nngOnDestroy\n()\n \n{\n \nthis\n.\nlogIt\n(\n`onDestroy`\n);\n \n}\n\n\n  \nprivate\n \nlogIt\n(\nmsg\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nlogger\n.\nlog\n(\n`Spy #\n${\nnextId\n++\n}\n \n${\nmsg\n}\n`\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nVoc\u00ea pode utilizar a diretiva \nSpyDirective\n em qualquer elemento nativo ou customizado. A diretiva ser\u00e1 inicializada e destru\u00edda ao mesmo tempo que o elemento.\n\n\nNo exemplo abaixo, a diretiva est\u00e1 anexada a cada elemento \n<div>\n da itera\u00e7\u00e3o do \n*ngFor\n:\n\n\n1\n2\n3\n<\ndiv\n \n*\nngFor\n=\n\"let hero of heroes\"\n \nappSpy\n \nclass\n=\n\"heroes\"\n>\n\n  {{hero}}\n\n</\ndiv\n>\n\n\n\n\n\n\n\nCriando o componente \nSpyComponent\n\u00b6\n\n\nCrie, ent\u00e3o, o componente \nSpyComponent\n com o Angular CLI:\n\n\n1\nng generate component spy --no-spec --flat\n\n\n\n\n\n\nO comando acima cria os arquivos \nspy.component.css\n, \nspy.component.html\n e \nspy.component.ts\n, al\u00e9m de registrar o componente \nSpyComponent\n no m\u00f3dulo \nAppModule\n.\n\n\nModifique o conte\u00fado do arquivo \nspy.component.html\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n<\ndiv\n \nclass\n=\n\"parent\"\n>\n\n  \n<\nh2\n>\nSpy Directive\n</\nh2\n>\n\n\n  \n<\ninput\n \n[(\nngModel\n)]=\"\nnewName\n\"\n \n(\nkeyup\n.\nenter\n)=\"\naddHero\n()\"\n>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\naddHero\n()\"\n>\nAdd Hero\n</\nbutton\n>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\nreset\n()\"\n>\nReset Heroes\n</\nbutton\n>\n\n\n  \n<\np\n></\np\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let hero of heroes\"\n \nappSpy\n \nclass\n=\n\"heroes\"\n>\n\n    {{hero}}\n  \n</\ndiv\n>\n\n  \n<\nh4\n>\n-- Spy Lifecycle Hook Log --\n</\nh4\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let msg of spyLog\"\n>\n{{msg}}\n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nComo usamos a diretiva \nngModel\n, precisamos importar o \nFormsModule\n. Altere o AppModule\n\n1\n2\n3\n4\n5\n6\n7\nimport\n \n{\n \nFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\n//...\n\n\n\n@NgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nFormsModule\n\n\n\n\n\n\nOs conceitos por tr\u00e1s desse template s\u00e3o:\n\n\n\n\nFizemos um \ntwo-way data binding\n do elemento \n<input>\n com a propriedade \nnewName\n.\n\n\nUm binding do evento \nkeyup.enter\n (isto \u00e9, quando o usu\u00e1rio pressionar e soltar a tecla \n<ENTER>\n) do elemento \n<input>\n dispara o m\u00e9todo \naddHero()\n do componente.\n\n\nDois outros bindings de eventos s\u00e3o registrados no evento \nclick\n dos bot\u00f5es \"Add Hero\" e \"Reset Heroes\", que disparam os m\u00e9todos \naddHero()\n e \nreset()\n do componente, respectivamente.\n\n\nA diretiva \n*ngFor\n cria um \n<div>\n para cada elemento do array \nheroes\n, que exibe o nome do her\u00f3i.\n\n\n\u00c9 inclu\u00edda a diretiva \nappSpy\n, que definimos anteriormente, para espionar os eventos \nngOnInit\n e \nngOnDestroy\n de cada elemento \n<div>\n da itera\u00e7\u00e3o do \n*ngFor\n.\n\n\nAo final do template, inclu\u00edmos um \n<div>\n para exibir os logs da espionagem.\n\n\n\n\nPara completar o exemplo, substitua o conte\u00fado do arquivo \nspy.component.ts\n pelo conte\u00fado abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nLoggerService\n \n}\n  \nfrom\n \n'./logger.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-spy'\n,\n\n  \ntemplateUrl\n:\n \n'./spy.component.html'\n,\n\n  \nstyles\n:\n \n[\n\n      \n'.parent {background: khaki;}'\n,\n\n      \n'.heroes {background: LightYellow; padding: 0 8px}'\n\n    \n],\n  \n  \nproviders\n:\n  \n[\nLoggerService\n]\n\n\n})\n\n\nexport\n \nclass\n \nSpyComponent\n \n{\n\n  \nnewName\n \n=\n \n'Herbie'\n;\n\n  \nheroes\n:\n \nstring\n[]\n \n=\n \n[\n'Windstorm'\n,\n \n'Magneta'\n];\n\n  \nspyLog\n:\n \nstring\n[];\n\n\n  \nconstructor\n(\nprivate\n \nlogger\n:\n \nLoggerService\n)\n \n{\n\n    \nthis\n.\nspyLog\n \n=\n \nlogger\n.\nlogs\n;\n\n  \n}\n\n\n  \naddHero\n()\n \n{\n\n    \nif\n \n(\nthis\n.\nnewName\n.\ntrim\n())\n \n{\n\n      \nthis\n.\nheroes\n.\npush\n(\nthis\n.\nnewName\n.\ntrim\n());\n\n      \nthis\n.\nnewName\n \n=\n \n''\n;\n\n    \n}\n\n  \n}\n\n  \nreset\n()\n \n{\n\n    \nthis\n.\nlogger\n.\nlog\n(\n'-- reset --'\n);\n\n    \nthis\n.\nheroes\n.\nlength\n \n=\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nTire um momento para entender o componente:\n\n\n\n\nO decorador \n@Component\n n\u00e3o \u00e9 novidade; definimos o seletor (\napp-spy\n), a refer\u00eancia para o arquivo do template HTML (\ntemplateUrl\n). O servi\u00e7o \nLoggerService\n \u00e9 inclu\u00eddo tamb\u00e9m no array \nproviders\n do componente, pois queremos criar uma nova inst\u00e2ncia do servi\u00e7o de log para o nosso componente.\n\n\nAs propriedades \nnewName\n, \nheroes\n e \nspyLog\n s\u00e3o definidas e inicializadas. Essas propriedades s\u00e3o referenciadas com bindings no template do componente.\n\n\nO servi\u00e7o \nLoggerService\n \u00e9 injetado no construtor do componente. A propriedade p\u00fablica \nlogs\n do servi\u00e7o \u00e9 referenciada na propriedade \nspyLog\n, que por sua vez \u00e9 utilizada no template para a exibi\u00e7\u00e3o dos registros de log.\n\n\nSe o nome informado n\u00e3o estiver vazio, o m\u00e9todo \naddHero()\n inclui um novo her\u00f3i ao array \nheroes\n e reseta a propriedade \nname\n com uma string vazia, para uma nova inclus\u00e3o.\n\n\nO m\u00e9todo \nreset()\n limpa o array de her\u00f3is.\n\n\n\n\nPara testar o exemplo, modifique o arquivo \napp.component.html\n e inclua o novo elemento customizado \n<app-spy>\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<\nh1\n>\nLifecycle Hooks\n</\nh1\n>\n\n\n<\naccordion\n>\n\n    \n<\naccordion-group\n \nheading\n=\n\"Peek-a-boo: (most) lifecycle hooks\"\n>\n\n        \n<\npeek-a-boo-parent\n></\npeek-a-boo-parent\n>\n\n    \n</\naccordion-group\n>\n\n    \n<\naccordion-group\n \nheading\n=\n\"Spy: directive with OnInit & OnDestroy\"\n>\n\n        \n<\napp-spy\n></\napp-spy\n>\n\n    \n</\naccordion-group\n>\n    \n\n</\naccordion\n>\n  \n\n\n\n\n\n\nAnalisando o Spy\n\u00b6\n\n\nExecute a aplica\u00e7\u00e3o, inclua alguns her\u00f3is e, depois, clique no bot\u00e3o \"Reset Heroes\". O resultado esperado \u00e9 algo como:\n\n\n\n\nCada \"nascimento\" ou \"morte\" de uma \n<div>\n na itera\u00e7\u00e3o de her\u00f3is \u00e9 tamb\u00e9m um \"nascimento\" ou \"morte\" da diretiva \nSpyDirective\n.\n\n\nAdicionar um her\u00f3i (seja pelo clique do bot\u00e3o \"Add Hero\" , seja por pressionar e soltar o \n<ENTER>\n no \n<input>\n) tem como resultado a cria\u00e7\u00e3o de um novo \n<div>\n e, portanto, o m\u00e9todo \nngOnInit()\n da diretiva \nSpyDirective\n registra um log desse evento.\n\n\nO bot\u00e3o \"Reset Heroes\" limpa a lista de her\u00f3is. Como consequ\u00eancia, o Angular remove todos os elementos \n<div>\n da \u00e1rvore DOM, destruindo todos as diretivas espi\u00e3s ao mesmo tempo. O m\u00e9todo \nngOnDestroy()\n da diretiva \nSpyDirective\n reporta seus momentos finais.\n\n\nUm pouco mais sobre o \nngOnInit()\n\u00b6\n\n\nEm aplica\u00e7\u00f5es reais, o m\u00e9todo \nngOnInit\n desempenha um importante papel e \u00e9 usado por dois motivos principais:\n\n\n\n\nFazer inicializa\u00e7\u00f5es complexas logo ap\u00f3s a constru\u00e7\u00e3o do componente.\n\n\nInicializar o componente ap\u00f3s o Angular setar os valores das propriedades de input (\n@Input\n).\n\n\n\n\nComponentes devem ser criados de forma \"barata\" e \"segura\". Isto \u00e9, os construtores n\u00e3o devem fazer nada mais do que inicializar vari\u00e1veis locais com valores simples. O m\u00e9todo \nngOnInit()\n \u00e9 um bom lugar para recuperar dados que dependem de outros componentes ou servi\u00e7os.\n\n\nLembre-se, tamb\u00e9m, que as propriedades de input (isto \u00e9, as propriedades marcadas com o decorador \n@Input\n) n\u00e3o s\u00e3o inicializadas antes do construtor. Elas s\u00f3 ter\u00e3o seus valores definidos logo antes de o m\u00e9todo \nngOnInit()\n ser executado.\n\n\nO m\u00e9todo \nngOnChanges()\n \u00e9 a sua primeira oportunidade de acessar essas propriedades. O Angular chama o \nngOnChanges()\n antes do \nngOnInit()\n e muitas outras vezes ap\u00f3s disso. O m\u00e9todo \nngOnInit()\n s\u00f3 \u00e9 chamado uma \u00fanica vez.\n\n\nVoc\u00ea pode contar com o Angular para chamar o m\u00e9todo \nngOnInit()\n logo ap\u00f3s criar o componente. \u00c9 a\u00ed que voc\u00ea deve implementar a l\u00f3gica \"pesada\" de inicializa\u00e7\u00e3o do componente.\n\n\nUm pouco mais sobre o \nngOnDestroy()\n\u00b6\n\n\nColoque a l\u00f3gica de limpeza do componente no m\u00e9todo \nngOnDestroy()\n.\n\n\nEsse \u00e9 o momento para notificar qualquer outra parte da aplica\u00e7\u00e3o de que o componente est\u00e1 sendo destru\u00eddo.\n\n\nEsse \u00e9 o lugar para liberar recursos que n\u00e3o ser\u00e3o liberados automaticamente. Notadamente, fa\u00e7a o \nunsubscribe\n de \nObservables\n e eventos DOM. Pare os \ntimers\n criados com \ninterval\n. Voc\u00ea est\u00e1 arriscando criar um vazamento de mem\u00f3ria na aplica\u00e7\u00e3o se voc\u00ea se esquecer de fazer isso.\n\n\nOnChanges\n\u00b6\n\n\nTODO\n\n\nDoCheck\n\u00b6\n\n\nTODO\n\n\nAfterView\n\u00b6\n\n\nTODO\n\n\nAfterContent\n\u00b6\n\n\nTODO\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 10",
            "title": "09 - Lifecycle Hooks"
        },
        {
            "location": "/exercicios/exercicio-09/#exercicio-09",
            "text": "",
            "title": "Exerc\u00edcio 09"
        },
        {
            "location": "/exercicios/exercicio-09/#objetivos",
            "text": "Demonstrar o uso dos lifecycle hooks em uma s\u00e9rie de exerc\u00edcios.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-09/#duracao",
            "text": "30 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-09/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-09-lifecycle-hooks  e deixe-a rodando:  1\n2\n3 ng new exercicio-09-lifecycle-hooks cd  exercicio-09-lifecycle-hooks\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-09/#introducao",
            "text": "Nesse exerc\u00edcio, iremos demonstrar os lifecycle hooks em uma s\u00e9rie de exerc\u00edcios.  Cada exerc\u00edcio segue um padr\u00e3o comum: um  componente pai  serve como um teste para um  componente filho  que ilustra um (ou mais de um) m\u00e9todo do lifecycle hook.  Aqui est\u00e1 uma breve descri\u00e7\u00e3o de cada um dos exerc\u00edcios:     Componente  Descri\u00e7\u00e3o      Peek-a-boo  Demonstra todos os lifecycle hooks. Cada m\u00e9todo hook escreve um registro de log na tela.    Spy  Diretivas tamb\u00e9m possuem lifecycle hooks. Vamos escrever uma  SpyDirective  para criar registros de log para quando o componente associado \u00e9 criado ou destru\u00eddo.    OnChanges  Vamos ver como o Angular chama o m\u00e9todo  ngOnChanges()  toda vez que uma das propriedades de input de um componente \u00e9 alterada.    DoCheck  Implementa o m\u00e9todo  ngDoCheck()  com uma detec\u00e7\u00e3o de mudan\u00e7as customizada.    AfterView  Mostra o que o Angular entende por  view . Demostra os m\u00e9todos  ngAfterViewInit()  e  ngAfterViewChecked() .    AfterContent  Mostra como projetar um conte\u00fado dentro de um componente. Demonstra os m\u00e9todo  ngAfterContentInit()  e  ngAfterContentChecked() .",
            "title": "Introdu\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-09/#peek-a-boo",
            "text": "O componente  PeekABooComponent  demonstra todos os lifecycle hooks em um \u00fanico componente.  Voc\u00ea raramente (ou nunca) vai implementar todos as interfaces desse jeito; mas esse exerc\u00edcio \u00e9 \u00fatil para mostrar a ordem em que os m\u00e9todos hooks s\u00e3o chamados.",
            "title": "Peek-a-boo"
        },
        {
            "location": "/exercicios/exercicio-09/#criando-o-servico-loggerservice",
            "text": "O nosso objetivo \u00e9 criar registros de log em cada um dos m\u00e9todos hook do nosso componente.  Vamos, ent\u00e3o, criar o servi\u00e7o  LoggerService  para que o componente possa registrar esses logs (que eventualmente ser\u00e3o exibidos na tela).  Para isso, crie o servi\u00e7o  LoggerService  na pasta  src/app  com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 import   {   Injectable   }   from   '@angular/core' ;  @ Injectable ()  export   class   LoggerService   { \n   logs :   string []   =   []; \n   prevMsg   =   '' ; \n   prevMsgCount   =   1 ; \n\n   log ( msg :   string )    { \n     if   ( msg   ===   this . prevMsg )   { \n       // Repeat message; update last log entry with count. \n       this . logs [ this . logs . length   -   1 ]   =   msg   +   ` ( ${ this . prevMsgCount   +=   1 } x)` ; \n     }   else   { \n       // New message; log it. \n       this . prevMsg   =   msg ; \n       this . prevMsgCount   =   1 ; \n       this . logs . push ( msg ); \n     } \n   } \n\n   clear ()   {   this . logs . length   =   0 ;   } \n\n   // schedules a view refresh to ensure display catches up \n   tick ()   {    this . tick_then (()   =>   {   });   } \n   tick_then ( fn :   ()   =>   any )   {   setTimeout ( fn ,   0 );   }  }    O servi\u00e7o mant\u00e9m os registros de log no array de strings  logs . Esse array \u00e9 uma propriedade p\u00fablica e, portanto, pode ser acessada pelos componentes que usam esse servi\u00e7o. \u00c9 assim que, eventualmente, iremos exibir os registros de log na tela.  O servi\u00e7o tamb\u00e9m disponibiliza o m\u00e9todo  log() , que ser\u00e1 chamado pelo componente para registrar as mensagens de logs, incluindo-a na propriedade p\u00fablica  logs .  O servi\u00e7o tamb\u00e9m faz um controle para evitar o registro de mensagens repetidas. Ao inv\u00e9s disso, \u00e9 criado um sufixo indicando a quantidade de repeti\u00e7\u00f5es, como, por exemplo:  AfterContentChecked (3x) .  Al\u00e9m disso, o servi\u00e7o tamb\u00e9m disponibiliza o m\u00e9todo  clear()  para limpar os registros de logs.",
            "title": "Criando o servi\u00e7o LoggerService"
        },
        {
            "location": "/exercicios/exercicio-09/#criando-o-componente-peekaboocomponent",
            "text": "Crie, agora, o arquivo  peek-a-boo.component.ts  na pasta  src/app  com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   LoggerService   }      from   './logger.service' ;  @ Component ({ \n   selector :   'peek-a-boo' , \n   template :   '<p>Now you see my hero, {{name}}</p>'  })  export   class   PeekABooComponent   { \n   @ Input ()    name :   string ; \n\n   constructor ( private   logger :   LoggerService )   {}    }    At\u00e9 a\u00ed, n\u00e3o h\u00e1 novidades. Criamos a estrutura b\u00e1sica do componente  PeekABooComponent , com uma propriedade de input e uma inje\u00e7\u00e3o de depend\u00eancia.  Eventualmente, a propriedade  name  ser\u00e1 alvo de um  binding  de propriedade, e o seu valor ser\u00e1 definido por outro componente (lembre-se que, no nosso padr\u00e3o, sempre teremos um componente pai para testar o nosso componente filho).  Note tamb\u00e9m que estamos injetando o servi\u00e7o  LoggerService  no construtor do componente. Ele ser\u00e1 utilizado logo mais para o registro dos logs.",
            "title": "Criando o componente PeekABooComponent"
        },
        {
            "location": "/exercicios/exercicio-09/#implementando-os-lifecycle-hooks",
            "text": "Para interceptar cada um dos momentos do lifecycle hooks, o Angular disponibiliza, na biblioteca  @angular/core , as interfaces do  lifecycle hooks . Inclua, ent\u00e3o, todas essas interfaces na assinatura do  PeekABooComponent :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 import   { \n   AfterContentChecked , \n   AfterContentInit , \n   AfterViewChecked , \n   AfterViewInit , \n   DoCheck , \n   OnChanges , \n   OnDestroy , \n   OnInit , \n   SimpleChanges  }   from   '@angular/core' ;   // <-- n\u00e3o esque\u00e7a de incluir os imports  import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   LoggerService   }      from   './logger.service' ;  @ Component ({ \n   selector :   'peek-a-boo' , \n   template :   '<p>Now you see my hero, {{name}}</p>'  })  export   class   PeekABooComponent   implements   \n              OnChanges ,   OnInit ,   DoCheck , \n              AfterContentInit ,   AfterContentChecked , \n              AfterViewInit ,   AfterViewChecked , \n              OnDestroy   {   // <-- inclua as interfaces na assinatura da classe \n   @ Input ()    name :   string ; \n\n   constructor ( private   logger :   LoggerService )   {}    }    Nesse momento, o compilador TypeScript ir\u00e1 levantar erros do tipo:  1\n2 Class   'PeekABooComponent'   incorrectly   implements   interface   'OnInit' . \n   Property   'ngOnInit'   is   missing   in   type   'PeekABooComponent' .    Para corrigir esse erro, vamos implementar o  stub  de cada um dos m\u00e9todos das interfaces.  Por padr\u00e3o, o m\u00e9todo hook segue o nome da interface, com o sufixo  ng . Por exemplo, a interface  OnInit  define o m\u00e9todo  ngOnInit() .  Inclua, ent\u00e3o, os seguintes m\u00e9todos ao componente:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 ngOnChanges ( changes :   SimpleChanges )   {}  ngOnInit ()   {   }  ngDoCheck ()   {   }  ngAfterContentInit ()   {   }  ngAfterContentChecked ()   {   }  ngAfterViewInit ()   {   }  ngAfterViewChecked ()   {   }  ngOnDestroy ()   {   }    O \u00fanico m\u00e9todo que recebe um par\u00e2metro \u00e9 o  ngOnChanges . A cada mudan\u00e7a, esse par\u00e2metro guarda os valores atual e anterior de todas as propriedades de input que foram alteradas (note que j\u00e1 fizemos o import do s\u00edmbolo  SimpleChanges  junto com as interfaces anteriormente).",
            "title": "Implementando os lifecycle hooks"
        },
        {
            "location": "/exercicios/exercicio-09/#registrando-os-logs",
            "text": "Agora que temos a estrutura b\u00e1sica dos m\u00e9todos, podemos finalmente incluir os registros de log no  LoggerService . Crie, ent\u00e3o, o seguinte m\u00e9todo no  PeekABooComponent :  1\n2\n3 logIt ( msg :   string )   { \n   this . logger . log ( `# ${ nextId ++ }   ${ msg } ` );  }    O m\u00e9todo  logIt  recebe como par\u00e2metro a mensagem de log e, antes de direcion\u00e1-la para o servi\u00e7o  LoggerService , acrescenta um prefixo com um n\u00famero sequencial (a vari\u00e1vel  nextId ). Dessa forma, conseguiremos acompanhar a quantidade de logs registrados facilmente.  Inicialize a vari\u00e1vel  nextId , incluindo-a no arquivo  peek-a-boo.component.ts  antes da defini\u00e7\u00e3o da classe  PeekABooComponent :  1\n2\n3\n4 let   nextId   =   1 ;   // <-- defina e inicialize a vari\u00e1vel FORA da classe PeekABooComponent  @ Component ({   ...   })  export   class   PeekABooComponent   ...    Modifique ent\u00e3o os m\u00e9todos hook para invocar o novo m\u00e9todo  logIt :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27 ngOnChanges ( changes :   SimpleChanges )   { \n   let   changesMsgs :   string []   =   []; \n   for   ( let   propName   in   changes )   { \n     if   ( propName   ===   'name' )   { \n       let   name   =   changes [ 'name' ]. currentValue ; \n       changesMsgs . push ( `name  ${ this . verb }  to \" ${ name } \"` ); \n     }   else   { \n       changesMsgs . push ( propName   +   ' '   +   this . verb ); \n     } \n   } \n   this . logIt ( `OnChanges:  ${ changesMsgs . join ( '; ' ) } ` ); \n   this . verb   =   'changed' ;   // next time it will be a change  }  ngOnInit ()   {   this . logIt ( `OnInit` );   }  ngDoCheck ()   {   this . logIt ( `DoCheck` );   }  ngAfterContentInit ()   {   this . logIt ( `AfterContentInit` );    }  ngAfterContentChecked ()   {   this . logIt ( `AfterContentChecked` );   }  ngAfterViewInit ()   {   this . logIt ( `AfterViewInit` );   }  ngAfterViewChecked ()   {   this . logIt ( `AfterViewChecked` );   }  ngOnDestroy ()   {   this . logIt ( `OnDestroy` );   }    Com exce\u00e7\u00e3o do m\u00e9todo  ngOnChanges() , todos os outros m\u00e9todos hook simplesmente invocam o m\u00e9todo  logIt()  com o nome da interface do lifecycle hook associada.  O m\u00e9todo  ngOnChanges()  \u00e9 um pouco mais complexo.  O par\u00e2metro  changes  pode ser entendido como um mapa cujas  chaves  s\u00e3o os nomes das propriedades que sofreram mudan\u00e7as e os valores s\u00e3o inst\u00e2ncias do tipo  SimpleChange , uma interface que representa uma mudan\u00e7a simples (guardando o valor anterior e o valor atual da propriedade).  O m\u00e9todo, ent\u00e3o, percorre esse mapa criando um array com os registros das mudan\u00e7as que aconteceram nessa chamada ao  ngOnChanges() .  A primeira vez que o m\u00e9todo  ngOnChanges()  \u00e9 chamado antes do  ngOnInit()  para inicializar as propriedades de input do componente. As chamadas seguintes ser\u00e3o feitas nas altera\u00e7\u00f5es a essas propriedades. Para diferenciar, ent\u00e3o, a inicializa\u00e7\u00e3o da propriedade  name  das mudan\u00e7as subsequentes, o m\u00e9todo  ngOnChanges()  faz uso de uma nova propriedade  verb  do  PeekABooComponent . Inclua essa nova propriedade entre antes do m\u00e9todo construtor:  1 private   verb   =   'initialized' ;    O resultado final do  PeekABooComponent  \u00e9 como a seguir:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75 import   { \n   AfterContentChecked , \n   AfterContentInit , \n   AfterViewChecked , \n   AfterViewInit , \n   DoCheck , \n   OnChanges , \n   OnDestroy , \n   OnInit , \n   SimpleChanges  }   from   '@angular/core' ;  import   {   Component ,   Input   }   from   '@angular/core' ;  import   {   LoggerService   }      from   './logger.service' ;  let   nextId   =   1 ;  @ Component ({ \n   selector :   'peek-a-boo' , \n   template :   '<p>Now you see my hero, {{name}}</p>'  })  // Don't HAVE to mention the Lifecycle Hook interfaces  // unless we want typing and tool support.  export   class   PeekABooComponent   implements \n              OnChanges ,   OnInit ,   DoCheck , \n              AfterContentInit ,   AfterContentChecked , \n              AfterViewInit ,   AfterViewChecked , \n              OnDestroy   { \n   @ Input ()    name :   string ; \n\n   private   verb   =   'initialized' ; \n\n   constructor ( private   logger :   LoggerService )   { \n     let   is   =   this . name   ?   'is'   :   'is not' ; \n     this . logIt ( `name  ${ is }  known at construction` ); \n   } \n\n   logIt ( msg :   string )   { \n     this . logger . log ( `# ${ nextId ++ }   ${ msg } ` ); \n   } \n\n   // only called for/if there is an @input variable set by parent. \n   ngOnChanges ( changes :   SimpleChanges )   { \n     let   changesMsgs :   string []   =   []; \n     for   ( let   propName   in   changes )   { \n       if   ( propName   ===   'name' )   { \n         let   name   =   changes [ 'name' ]. currentValue ; \n         changesMsgs . push ( `name  ${ this . verb }  to \" ${ name } \"` ); \n       }   else   { \n         changesMsgs . push ( propName   +   ' '   +   this . verb ); \n       } \n     } \n     this . logIt ( `OnChanges:  ${ changesMsgs . join ( '; ' ) } ` ); \n     this . verb   =   'changed' ;   // next time it will be a change \n   } \n\n   ngOnInit ()   {   this . logIt ( `OnInit` );   } \n\n   // Beware! Called frequently! \n   // Called in every change detection cycle anywhere on the page \n   ngDoCheck ()   {   this . logIt ( `DoCheck` );   } \n\n   ngAfterContentInit ()   {   this . logIt ( `AfterContentInit` );    } \n\n   // Beware! Called frequently! \n   // Called in every change detection cycle anywhere on the page \n   ngAfterContentChecked ()   {   this . logIt ( `AfterContentChecked` );   } \n\n   ngAfterViewInit ()   {   this . logIt ( `AfterViewInit` );   } \n\n   // Beware! Called frequently! \n   // Called in every change detection cycle anywhere on the page \n   ngAfterViewChecked ()   {   this . logIt ( `AfterViewChecked` );   } \n\n   ngOnDestroy ()   {   this . logIt ( `OnDestroy` );   }  }",
            "title": "Registrando os logs"
        },
        {
            "location": "/exercicios/exercicio-09/#criando-o-componente-peekabooparentcomponent",
            "text": "Para demonstrar o componente  PeekABooComponent , vamos criar o componente pai  PeekABooParentComponent .  O componente pai ser\u00e1 respons\u00e1vel por controlar a exibi\u00e7\u00e3o do componente filho e dos registros de log na tela.  Crie, ent\u00e3o, o arquivo  peek-a-boo-parent.component.ts  na pasta  src/app  com o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47 import   {   Component   }   from   '@angular/core' ;  import   {   LoggerService   }   from   './logger.service' ;  @ Component ({ \n   selector :   'peek-a-boo-parent' , \n   template :   `    <div class=\"parent\">      <button (click)=\"toggleChild()\">        {{hasChild ? 'Destroy' : 'Create'}} PeekABooComponent      </button>      <button (click)=\"updateHero()\" [hidden]=\"!hasChild\">Update Hero</button>      <peek-a-boo *ngIf=\"hasChild\" [name]=\"heroName\">      </peek-a-boo>      <h4>-- Lifecycle Hook Log --</h4>      <div *ngFor=\"let msg of hookLog\">{{msg}}</div>    </div>    ` , \n   providers :    [   LoggerService   ]  })  export   class   PeekABooParentComponent   { \n\n   hasChild   =   false ; \n   hookLog :   string []; \n\n   heroName   =   'Windstorm' ; \n\n   constructor ( private   logger :   LoggerService )   { \n     this . hookLog   =   logger . logs ; \n   } \n\n   toggleChild ()   { \n     this . hasChild   =   ! this . hasChild ; \n     if   ( this . hasChild )   { \n       this . heroName   =   'Windstorm' ; \n       this . logger . clear ();   // clear log on create \n     } \n     this . logger . tick (); \n   } \n\n   updateHero ()   { \n     this . heroName   +=   '!' ; \n     this . logger . tick (); \n   }  }    Note as seguintes caracter\u00edsticas do componente  PeekABooParentComponent :   O servi\u00e7o  LoggerService  \u00e9 injetado no construtor do componente. A propriedade p\u00fablica  logs  do servi\u00e7o \u00e9 referenciada na propriedade  hookLog , que por sua vez \u00e9 utilizada no template para a exibi\u00e7\u00e3o dos registros de log.  A exibi\u00e7\u00e3o do componente filho  PeekABooComponent  \u00e9 controlada pela diretiva  *ngIf  e pela propriedade  hasChild  do componente  PeekABooParentComponent . Sempre que o valor da propriedade  hasChild  mudar de  false  para  true , o Angular ir\u00e1 incluir o componente  <peek-a-boo>  no DOM, criando uma nova inst\u00e2ncia do componente  PeekABooComponent .  O  PeekABooParentComponent  passa o valor do nome do her\u00f3i para o componente filho atrav\u00e9s do binding de propriedade  [name]=\"heroName\" .  O template do  PeekABooParentComponent  exibe dois bot\u00f5es:  Um bot\u00e3o para criar (ou destruir) o componente filho  PeekABooComponent .  Um bot\u00e3o para alterar o nome do her\u00f3i.  Ao final do template, todas as mensagens de log s\u00e3o exibidas na itera\u00e7\u00e3o da diretiva  *ngFor .",
            "title": "Criando o componente PeekABooParentComponent"
        },
        {
            "location": "/exercicios/exercicio-09/#registrando-os-componentes",
            "text": "Para vermos tudo em a\u00e7\u00e3o, vamos incluir os componentes  PeekABooParentComponent  e  PeekABooComponent  no m\u00f3dulo  AppModule :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   {   NgModule   }   from   '@angular/core' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   CommonModule   }   from   '@angular/common' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   PeekABooParentComponent   }   from   './peek-a-boo-parent.component' ;   // <-- importe o s\u00edmbolo PeekABooComponent  import   {   PeekABooComponent   }   from   './peek-a-boo.component' ;   // <-- importe o s\u00edmbolo PeekABooComponent  @ NgModule ({ \n   imports :   [ \n     CommonModule , \n     BrowserModule \n   ], \n   declarations :   [ \n     AppComponent , \n     PeekABooParentComponent ,   // <-- declare o componente PeekABooParentComponent \n     PeekABooComponent ,   // <-- declare o componente PeekABooComponent \n   ], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {   }    Para separarmos na p\u00e1gina os v\u00e1rios exemplos dos  Lifecycle Hooks  iremos criar cada exemplo numa se\u00e7\u00e3o separada.\nPara isso usaremos da biblioteca  ngx-bootstrap  o  Accordion  Para instalar a biblioteca execute o comando: 1 npm install ngx-bootstrap --save   Adicione o c\u00f3digo abaixo no  index.html  na tag  head  1 <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">   Altere o  app.module.ts  com o objetivo de importar o m\u00f3dulo  Accordion  1 import   {   AccordionModule   }   from   'ngx-bootstrap' ;    1\n2 imports: [\n    AccordionModule.forRoot(),   Por fim, modifique o arquivo  app.component.html  para incluir o novo elemento customizado  <peek-a-boo-parent> :  1\n2\n3\n4\n5\n6 < h1 > Lifecycle Hooks </ h1 >  < accordion > \n     < accordion-group   heading = \"Peek-a-boo: (most) lifecycle hooks\" > \n         < peek-a-boo-parent ></ peek-a-boo-parent > \n     </ accordion-group >  </ accordion >",
            "title": "Registrando os componentes"
        },
        {
            "location": "/exercicios/exercicio-09/#analisando-o-peek-a-boo",
            "text": "A figura abaixo reflete o estado do log depois que o usu\u00e1rio clicou no bot\u00e3o  Create...  e ent\u00e3o no bot\u00e3o  Destroy... .   A sequ\u00eancia dos registros de log seguem a ordem de chamada prescrita para os m\u00e9todos do lifecycle hook:  OnChanges ,  OnInit ,  DoCheck  (3x),  AfterContentInit ,  AfterContentChecked  (3x),  AfterViewInit ,  AfterViewChecked  (3x) e  OnDestroy .  Se o usu\u00e1rio tivesse clicado no bot\u00e3o  Update Hero , ter\u00edamos outro registro de  OnChanges  e mais duas chamadas ao trio  DoCheck ,  AfterContentChecked  e  AfterViewChecked .  Podemos concluir, ent\u00e3o, que esses tr\u00eas \u00faltimos hooks s\u00e3o chamados frequentemente. Por isso, mantenha a l\u00f3gica nesses hooks a mais limpa poss\u00edvel.",
            "title": "Analisando o Peek-a-boo"
        },
        {
            "location": "/exercicios/exercicio-09/#spy",
            "text": "O Angular chama os m\u00e9todos do lifecycle hook tamb\u00e9m para diretivas (e n\u00e3o s\u00f3 para componentes).  Vamos ent\u00e3o criar uma diretiva  SpyDirective  para \"espionar\" um objeto DOM que n\u00e3o podemos alterar diretamente.  A diretiva \u00e9 simples, e consiste basicamente nos m\u00e9todos  ngOnInit()  e  ngOnDestroy()  que cria registros de logs usando o servi\u00e7o  LoggerService .  Crie, ent\u00e3o, a diretiva usando o Angular CLI:  1 ng generate directive spy --no-spec   O comando acima cria o arquivo  spy.directive.ts  e j\u00e1 registra a diretiva  SpyDirective  no m\u00f3dulo  AppModule , tornando-a dispon\u00edvel para uso na nossa aplica\u00e7\u00e3o.  Modifique o conte\u00fado do arquivo  spy.directive.ts  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 import   {   Directive ,   OnInit ,   OnDestroy   }   from   '@angular/core' ;  import   {   LoggerService   }   from   './logger.service' ;  let   nextId   =   1 ;  // Spy on any element to which it is applied.  // Usage: <div appSpy>...</div>  @ Directive ({ selector :   '[appSpy]' })  export   class   SpyDirective   implements   OnInit ,   OnDestroy   { \n\n   constructor ( private   logger :   LoggerService )   {   } \n\n   ngOnInit ()      {   this . logIt ( `onInit` );   } \n\n   ngOnDestroy ()   {   this . logIt ( `onDestroy` );   } \n\n   private   logIt ( msg :   string )   { \n     this . logger . log ( `Spy # ${ nextId ++ }   ${ msg } ` ); \n   }  }    Voc\u00ea pode utilizar a diretiva  SpyDirective  em qualquer elemento nativo ou customizado. A diretiva ser\u00e1 inicializada e destru\u00edda ao mesmo tempo que o elemento.  No exemplo abaixo, a diretiva est\u00e1 anexada a cada elemento  <div>  da itera\u00e7\u00e3o do  *ngFor :  1\n2\n3 < div   * ngFor = \"let hero of heroes\"   appSpy   class = \"heroes\" > \n  {{hero}} </ div >",
            "title": "Spy"
        },
        {
            "location": "/exercicios/exercicio-09/#criando-o-componente-spycomponent",
            "text": "Crie, ent\u00e3o, o componente  SpyComponent  com o Angular CLI:  1 ng generate component spy --no-spec --flat   O comando acima cria os arquivos  spy.component.css ,  spy.component.html  e  spy.component.ts , al\u00e9m de registrar o componente  SpyComponent  no m\u00f3dulo  AppModule .  Modifique o conte\u00fado do arquivo  spy.component.html  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 < div   class = \"parent\" > \n   < h2 > Spy Directive </ h2 > \n\n   < input   [( ngModel )]=\" newName \"   ( keyup . enter )=\" addHero ()\" > \n   < button   ( click )=\" addHero ()\" > Add Hero </ button > \n   < button   ( click )=\" reset ()\" > Reset Heroes </ button > \n\n   < p ></ p > \n   < div   * ngFor = \"let hero of heroes\"   appSpy   class = \"heroes\" > \n    {{hero}}\n   </ div > \n   < h4 > -- Spy Lifecycle Hook Log -- </ h4 > \n   < div   * ngFor = \"let msg of spyLog\" > {{msg}} </ div >  </ div >    Como usamos a diretiva  ngModel , precisamos importar o  FormsModule . Altere o AppModule 1\n2\n3\n4\n5\n6\n7 import   {   FormsModule   }   from   '@angular/forms' ;  //...  @NgModule ({ \n   imports :   [ \n     FormsModule    Os conceitos por tr\u00e1s desse template s\u00e3o:   Fizemos um  two-way data binding  do elemento  <input>  com a propriedade  newName .  Um binding do evento  keyup.enter  (isto \u00e9, quando o usu\u00e1rio pressionar e soltar a tecla  <ENTER> ) do elemento  <input>  dispara o m\u00e9todo  addHero()  do componente.  Dois outros bindings de eventos s\u00e3o registrados no evento  click  dos bot\u00f5es \"Add Hero\" e \"Reset Heroes\", que disparam os m\u00e9todos  addHero()  e  reset()  do componente, respectivamente.  A diretiva  *ngFor  cria um  <div>  para cada elemento do array  heroes , que exibe o nome do her\u00f3i.  \u00c9 inclu\u00edda a diretiva  appSpy , que definimos anteriormente, para espionar os eventos  ngOnInit  e  ngOnDestroy  de cada elemento  <div>  da itera\u00e7\u00e3o do  *ngFor .  Ao final do template, inclu\u00edmos um  <div>  para exibir os logs da espionagem.   Para completar o exemplo, substitua o conte\u00fado do arquivo  spy.component.ts  pelo conte\u00fado abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33 import   {   Component   }   from   '@angular/core' ;  import   {   LoggerService   }    from   './logger.service' ;  @ Component ({ \n   selector :   'app-spy' , \n   templateUrl :   './spy.component.html' , \n   styles :   [ \n       '.parent {background: khaki;}' , \n       '.heroes {background: LightYellow; padding: 0 8px}' \n     ],   \n   providers :    [ LoggerService ]  })  export   class   SpyComponent   { \n   newName   =   'Herbie' ; \n   heroes :   string []   =   [ 'Windstorm' ,   'Magneta' ]; \n   spyLog :   string []; \n\n   constructor ( private   logger :   LoggerService )   { \n     this . spyLog   =   logger . logs ; \n   } \n\n   addHero ()   { \n     if   ( this . newName . trim ())   { \n       this . heroes . push ( this . newName . trim ()); \n       this . newName   =   '' ; \n     } \n   } \n   reset ()   { \n     this . logger . log ( '-- reset --' ); \n     this . heroes . length   =   0 ; \n   }  }    Tire um momento para entender o componente:   O decorador  @Component  n\u00e3o \u00e9 novidade; definimos o seletor ( app-spy ), a refer\u00eancia para o arquivo do template HTML ( templateUrl ). O servi\u00e7o  LoggerService  \u00e9 inclu\u00eddo tamb\u00e9m no array  providers  do componente, pois queremos criar uma nova inst\u00e2ncia do servi\u00e7o de log para o nosso componente.  As propriedades  newName ,  heroes  e  spyLog  s\u00e3o definidas e inicializadas. Essas propriedades s\u00e3o referenciadas com bindings no template do componente.  O servi\u00e7o  LoggerService  \u00e9 injetado no construtor do componente. A propriedade p\u00fablica  logs  do servi\u00e7o \u00e9 referenciada na propriedade  spyLog , que por sua vez \u00e9 utilizada no template para a exibi\u00e7\u00e3o dos registros de log.  Se o nome informado n\u00e3o estiver vazio, o m\u00e9todo  addHero()  inclui um novo her\u00f3i ao array  heroes  e reseta a propriedade  name  com uma string vazia, para uma nova inclus\u00e3o.  O m\u00e9todo  reset()  limpa o array de her\u00f3is.   Para testar o exemplo, modifique o arquivo  app.component.html  e inclua o novo elemento customizado  <app-spy> :  1\n2\n3\n4\n5\n6\n7\n8\n9 < h1 > Lifecycle Hooks </ h1 >  < accordion > \n     < accordion-group   heading = \"Peek-a-boo: (most) lifecycle hooks\" > \n         < peek-a-boo-parent ></ peek-a-boo-parent > \n     </ accordion-group > \n     < accordion-group   heading = \"Spy: directive with OnInit & OnDestroy\" > \n         < app-spy ></ app-spy > \n     </ accordion-group >      </ accordion >",
            "title": "Criando o componente SpyComponent"
        },
        {
            "location": "/exercicios/exercicio-09/#analisando-o-spy",
            "text": "Execute a aplica\u00e7\u00e3o, inclua alguns her\u00f3is e, depois, clique no bot\u00e3o \"Reset Heroes\". O resultado esperado \u00e9 algo como:   Cada \"nascimento\" ou \"morte\" de uma  <div>  na itera\u00e7\u00e3o de her\u00f3is \u00e9 tamb\u00e9m um \"nascimento\" ou \"morte\" da diretiva  SpyDirective .  Adicionar um her\u00f3i (seja pelo clique do bot\u00e3o \"Add Hero\" , seja por pressionar e soltar o  <ENTER>  no  <input> ) tem como resultado a cria\u00e7\u00e3o de um novo  <div>  e, portanto, o m\u00e9todo  ngOnInit()  da diretiva  SpyDirective  registra um log desse evento.  O bot\u00e3o \"Reset Heroes\" limpa a lista de her\u00f3is. Como consequ\u00eancia, o Angular remove todos os elementos  <div>  da \u00e1rvore DOM, destruindo todos as diretivas espi\u00e3s ao mesmo tempo. O m\u00e9todo  ngOnDestroy()  da diretiva  SpyDirective  reporta seus momentos finais.",
            "title": "Analisando o Spy"
        },
        {
            "location": "/exercicios/exercicio-09/#um-pouco-mais-sobre-o-ngoninit",
            "text": "Em aplica\u00e7\u00f5es reais, o m\u00e9todo  ngOnInit  desempenha um importante papel e \u00e9 usado por dois motivos principais:   Fazer inicializa\u00e7\u00f5es complexas logo ap\u00f3s a constru\u00e7\u00e3o do componente.  Inicializar o componente ap\u00f3s o Angular setar os valores das propriedades de input ( @Input ).   Componentes devem ser criados de forma \"barata\" e \"segura\". Isto \u00e9, os construtores n\u00e3o devem fazer nada mais do que inicializar vari\u00e1veis locais com valores simples. O m\u00e9todo  ngOnInit()  \u00e9 um bom lugar para recuperar dados que dependem de outros componentes ou servi\u00e7os.  Lembre-se, tamb\u00e9m, que as propriedades de input (isto \u00e9, as propriedades marcadas com o decorador  @Input ) n\u00e3o s\u00e3o inicializadas antes do construtor. Elas s\u00f3 ter\u00e3o seus valores definidos logo antes de o m\u00e9todo  ngOnInit()  ser executado.  O m\u00e9todo  ngOnChanges()  \u00e9 a sua primeira oportunidade de acessar essas propriedades. O Angular chama o  ngOnChanges()  antes do  ngOnInit()  e muitas outras vezes ap\u00f3s disso. O m\u00e9todo  ngOnInit()  s\u00f3 \u00e9 chamado uma \u00fanica vez.  Voc\u00ea pode contar com o Angular para chamar o m\u00e9todo  ngOnInit()  logo ap\u00f3s criar o componente. \u00c9 a\u00ed que voc\u00ea deve implementar a l\u00f3gica \"pesada\" de inicializa\u00e7\u00e3o do componente.",
            "title": "Um pouco mais sobre o ngOnInit()"
        },
        {
            "location": "/exercicios/exercicio-09/#um-pouco-mais-sobre-o-ngondestroy",
            "text": "Coloque a l\u00f3gica de limpeza do componente no m\u00e9todo  ngOnDestroy() .  Esse \u00e9 o momento para notificar qualquer outra parte da aplica\u00e7\u00e3o de que o componente est\u00e1 sendo destru\u00eddo.  Esse \u00e9 o lugar para liberar recursos que n\u00e3o ser\u00e3o liberados automaticamente. Notadamente, fa\u00e7a o  unsubscribe  de  Observables  e eventos DOM. Pare os  timers  criados com  interval . Voc\u00ea est\u00e1 arriscando criar um vazamento de mem\u00f3ria na aplica\u00e7\u00e3o se voc\u00ea se esquecer de fazer isso.",
            "title": "Um pouco mais sobre o ngOnDestroy()"
        },
        {
            "location": "/exercicios/exercicio-09/#onchanges",
            "text": "TODO",
            "title": "OnChanges"
        },
        {
            "location": "/exercicios/exercicio-09/#docheck",
            "text": "TODO",
            "title": "DoCheck"
        },
        {
            "location": "/exercicios/exercicio-09/#afterview",
            "text": "TODO",
            "title": "AfterView"
        },
        {
            "location": "/exercicios/exercicio-09/#aftercontent",
            "text": "TODO",
            "title": "AfterContent"
        },
        {
            "location": "/exercicios/exercicio-09/#proximo-passo",
            "text": "Exerc\u00edcio 10",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-10/",
            "text": "Exerc\u00edcio 10\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nDemonstrar as formas de intera\u00e7\u00e3o entre componentes\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n60 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-component-interaction\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-component-interaction\n\ncd\n exercicio-component-interaction\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nPassando dados do pai para o filho com binding de input\n\u00b6\n\n\nPara demonstrar a intera\u00e7\u00e3o entre os componentes com o binding de input, vamos criar dois componentes: \nHeroChildComponent\n e \nHeroParentComponent\n.\n\n\nPara criar o componente \nHeroChildComponent\n, digite o seguinte comando na pasta raiz da aplica\u00e7\u00e3o:\n\n\n1\nng generate component hero-child --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nEstamos usando a funcionalidade de scaffolding do Angular CLI para criar o esqueleto do componente.\n\n\nPor padr\u00e3o, esse comando cria um componente numa subpasta com o mesmo nome do componente, al\u00e9m de criar tamb\u00e9m os arquivos de testes unit\u00e1rios (\n.spec.ts\n), CSS (\n.component.css\n) e template (\n.component.html\n) para o componente, j\u00e1 registrando-o no m\u00f3dulo \nAppModule\n da aplica\u00e7\u00e3o.\n\n\nEstamos mudando esse comportamento padr\u00e3o com as seguintes flags (opcionais):\n\n\n\n\n--no-spec\n: indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo \n.spec.ts\n (testes unit\u00e1rios);\n\n\n--flat\n: indica que n\u00e3o queremos a gera\u00e7\u00e3o da subpasta \nsrc/app/hero-child\n para o componente;\n\n\n--inline-style true\n: indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo \n.component.css\n para o componente;\n\n\n--inline-template true\n indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo \n.component.html\n para o template do componente.\n\n\n\n\nO resultado esperado, ent\u00e3o, \u00e9 algo como:\n\n\n1\n2\ncreate src/app/hero-child.component.ts \n(\n267\n bytes\n)\n\nupdate src/app/app.module.ts \n(\n400\n bytes\n)\n\n\n\n\n\n\n\nPara criar o componente pai, repita o processo, mas dessa vez, utilize o nome \nhero-parent\n:\n\n\n1\nng generate component hero-parent --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nComo resultado, o conte\u00fado do componente \nHeroChildComponent\n deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-child'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <p>\n\n\n      hero-child works!\n\n\n    </p>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nHeroChildComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nO conte\u00fado do componente \nHeroParentComponent\n deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <p>\n\n\n      hero-parent works!\n\n\n    </p>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nHeroParentComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nE, adicionalmente, o \nAppModule\n j\u00e1 deve estar declarando os componentes:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroChildComponent\n \n}\n \nfrom\n \n'./hero-child.component'\n;\n  \n// <-- adicionado pelo Angular CLI\n\n\nimport\n \n{\n \nHeroParentComponent\n \n}\n \nfrom\n \n'./hero-parent.component'\n;\n  \n// <-- adicionado pelo Angular CLI\n\n\n\n@\nNgModule\n({\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHeroChildComponent\n,\n  \n// <-- adicionado pelo Angular CLI \n\n    \nHeroParentComponent\n,\n \n// <-- adicionado pelo Angular CLI\n\n  \n],\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\nAppComponent\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nCriando inputs no \nHeroChildComponent\n\u00b6\n\n\nNo componente filho (\nHeroChildComponent\n), adicione duas novas propriedades de input (marcadas com o decorador \n@Input\n):\n\n\n1\n2\n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n@\nInput\n(\n'master'\n)\n \nmasterName\n:\n \nstring\n;\n\n\n\n\n\n\n\nO primeiro input, a propriedade \nhero\n, \u00e9 do tipo \nHero\n. Essa \u00e9 a mesma classe que usamos no Tour of Heroes anteriormente.\n\n\nO segundo input, a propriedade \nmasterName\n \u00e9 uma string comum. A diferen\u00e7a aqui \u00e9 que o decorador \n@Input\n define o alias \nmaster\n para a propriedade \nmasterName\n do componente.\n\n\nCrie, ent\u00e3o, o arquivo \nhero.ts\n na pasta \n/src/app\n com o conte\u00fado:\n\n\n1\n2\n3\n4\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n:\n \nnumber\n;\n\n  \nname\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\n\nE agora inclua os imports necess\u00e1rios no \nHeroChildComponent\n:\n\n\n1\n2\nimport\n \n{\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n\n\n\n\nModifique o template do componente, para a exibi\u00e7\u00e3o das propriedades de input:\n\n\n1\n2\n3\n4\ntemplate\n:\n \n`\n\n\n  <h3>{{hero.name}} says:</h3>\n\n\n  <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>\n\n\n`\n\n\n\n\n\n\n\nO resultado final do componente deve ser como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nHero\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-child'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h3>{{hero.name}} says:</h3>\n\n\n    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nHeroChildComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n  \n@\nInput\n(\n'master'\n)\n \nmasterName\n:\n \nstring\n;\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nFazendo binding dos inputs\n\u00b6\n\n\nAntes de demonstrar o binding das propriedades de input, volte ao \nhero.ts\n e crie um array de her\u00f3is como abaixo.\n\n\n1\n2\n3\n4\n5\nexport\n \nconst\n \nHEROES\n:\n \nHero\n[]\n \n=\n \n[\n\n  \n{\nid\n:\n \n10\n,\n \nname\n:\n \n'Mr. IQ'\n},\n\n  \n{\nid\n:\n \n11\n,\n \nname\n:\n \n'Magneta'\n},\n\n  \n{\nid\n:\n \n12\n,\n \nname\n:\n \n'Bombasto'\n}\n\n\n];\n\n\n\n\n\nN\u00e3o esque\u00e7a de incluir o \nexport\n, para que o array possa ser importado em qualquer outro lugar.\n\n\nInclua, agora, as propriedades \nheroes\n e \nmaster\n no \nHeroParentComponent\n como a seguir:\n\n\n1\n2\nheroes\n \n=\n \nHEROES\n;\n \n// <-- aqui estamos fazendo uma refer\u00eancia ao array que acabamos de criar\n\n\nmaster\n \n=\n \n'Master'\n;\n\n\n\n\n\n\n\nInclua ent\u00e3o o \nimport\n para o array \nHEROES\n no \nHeroParentComponent\n:\n\n\n1\nimport\n \n{\n \nHEROES\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n\n\n\n\nQueremos ent\u00e3o passar os dados das propriedades \nheroes\n e \nmaster\n do componente pai \nHeroParentComponent\n para as propriedades do componente filho \nHeroChildComponent\n.\n\n\nPara isso, O \nHeroParentComponent\n aninha o componente filho \nHeroChildComponent\n dentro de um repetidor da diretiva \n*ngFor\n, fazendo o binding da sua propriedade \nmaster\n com o input \nmaster\n do componente filho, e o binding de cada inst\u00e2ncia do her\u00f3i dessa repeti\u00e7\u00e3o ao input \nhero\n do componente filho.\n\n\nModifique ent\u00e3o o template do componente \nHeroParentComponent\n: \n\n\n1\n2\n3\n4\n5\n6\n7\ntemplate\n:\n \n`\n\n\n  <h2>{{master}} controls {{heroes.length}} heroes</h2>\n\n\n  <app-hero-child *ngFor=\"let hero of heroes\"\n\n\n    [hero]=\"hero\"\n\n\n    [master]=\"master\">\n\n\n  </app-hero-child>\n\n\n`\n\n\n\n\n\n\n\nO resultado final do componente \nHeroParentComponent\n \u00e9:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nHEROES\n \n}\n \nfrom\n \n'./hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>{{master}} controls {{heroes.length}} heroes</h2>\n\n\n    <app-hero-child *ngFor=\"let hero of heroes\"\n\n\n      [hero]=\"hero\"\n\n\n      [master]=\"master\">\n\n\n    </app-hero-child>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nHeroParentComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nheroes\n \n=\n \nHEROES\n;\n\n  \nmaster\n \n=\n \n'Master'\n;\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nPara visualizar o resultado, modifique o conte\u00fado do arquivo \napp.component.html\n para:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n<\nh1\n \nid\n=\n\"top\"\n>\nComponent Communication Cookbook\n</\nh1\n>\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-child\"\n>\nPass data from parent to child with input binding (\"Heroes\")\n</\na\n><\nbr\n/>\n\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child\"\n>\n\n  \n<\napp-hero-parent\n></\napp-hero-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nA aplica\u00e7\u00e3o deve exibir os tr\u00eas her\u00f3is do array:\n\n\n\n\nInterceptando mudan\u00e7as na propriedade de input com um setter\n\u00b6\n\n\nVamos agora definir um setter para interceptar o binding da propriedade de input.\n\n\nCrie o componente \nname-child\n com o seguinte comando na pasta raiz da aplica\u00e7\u00e3o:\n\n\n1\nng generate component name-child --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nCrie tamb\u00e9m o componente \nname-parent\n:\n\n\n1\nng generate component name-parent --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nComo resultado, os componentes \nNameChildComponent\n e \nNameParentComponent\n foram criados na pasta \nsrc/app\n e o \nAppModule\n foi modificado para incluir a declara\u00e7\u00e3o desses novos componentes:\n\n\n1\n2\n3\n4\n5\n6\n7\ndeclarations\n:\n \n[\n\n  \nAppComponent\n,\n\n  \nHeroChildComponent\n,\n\n  \nHeroParentComponent\n,\n\n  \nNameChildComponent\n,\n  \n// <-- inclu\u00eddo\n\n  \nNameParentComponent\n,\n \n// <-- inclu\u00eddo\n\n\n],\n\n\n\n\n\n\n\nDefinindo uma propriedade via m\u00e9todos setter e getter\n\u00b6\n\n\nModifique o componente \nNameChildComponent\n para o seguinte conte\u00fado:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-name-child'\n,\n\n  \ntemplate\n:\n \n'<h3>\"{{name}}\"</h3>'\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nNameChildComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nprivate\n \n_name\n \n=\n \n''\n;\n\n\n  \n@\nInput\n()\n\n  \nset\n \nname\n(\nname\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\n_name\n \n=\n \n(\nname\n \n&&\n \nname\n.\ntrim\n())\n \n||\n \n'<no name set>'\n;\n\n  \n}\n\n\n  \nget\n \nname\n()\n:\n \nstring\n \n{\n \nreturn\n \nthis\n.\n_name\n;\n \n}\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nPerceba que, apesar de o componente n\u00e3o possuir uma propriedade p\u00fablica \nname\n, o template faz uma interpola\u00e7\u00e3o para exibir o valor da propriedade \nname\n.\n\n\nAo inv\u00e9s disso, o componente define os m\u00e9todos setter e getter da propriedade: \n\n\n1\n2\n3\n4\n5\nset\n \nname\n(\nname\n:\n \nstring\n)\n \n{\n\n  \nthis\n.\n_name\n \n=\n \n(\nname\n \n&&\n \nname\n.\ntrim\n())\n \n||\n \n'<no name set>'\n;\n\n\n}\n\n\n\nget\n \nname\n()\n:\n \nstring\n \n{\n \nreturn\n \nthis\n.\n_name\n;\n \n}\n\n\n\n\n\n\n\nPara o template, essa constru\u00e7\u00e3o tem o mesmo efeito que criar uma propriedade p\u00fablica \nname\n no componente. O valor setado no m\u00e9todo setter \u00e9 guardado na propriedade privada \n_name\n, e esse valor \u00e9 devolvido no m\u00e9todo getter, quando necess\u00e1rio (para ser exibido na tela, por exemplo).\n\n\nA diferen\u00e7a \u00e9 que, com essa constru\u00e7\u00e3o, o componente pode interceptar o m\u00e9todo setter a fim de atribuir um valor padr\u00e3o para a propriedade privada \n_name\n caso receba uma string vazia como par\u00e2metro (isto \u00e9, caso o par\u00e2metro \nname\n seja \nundefined\n ou esteja preenchido somente com espa\u00e7os em branco).\n\n\nPara permitir que outros componentes fa\u00e7am o binding com o input \nname\n, inclu\u00edmos o decorador \n@Input\n ao m\u00e9todo setter:\n\n\n1\n2\n3\n4\n@\nInput\n()\n\n\nset\n \nname\n(\nname\n:\n \nstring\n)\n \n{\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\nO componente \nNameParentComponent\n\u00b6\n\n\nMude sua aten\u00e7\u00e3o agora para o componente \nNameParentComponent\n, que criamos anteriormente.\n\n\nModifique o template do componente como abaixo:\n\n\n1\n2\n3\n4\ntemplate\n:\n \n`\n\n\n  <h2>Master controls {{names.length}} names</h2>\n\n\n  <name-child *ngFor=\"let name of names\" [name]=\"name\"></name-child>\n\n\n`\n,\n\n\n\n\n\n\n\nInclua, ent\u00e3o, a propriedade \nnames\n referenciada no template:\n\n\n1\nnames\n \n=\n \n[\n'Mr. IQ'\n,\n \n'   '\n,\n \n'  Bombasto  '\n];\n\n\n\n\n\n\n\nO resultado final do componente deve ser como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-name-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Master controls {{names.length}} names</h2>\n\n\n    <app-name-child *ngFor=\"let name of names\" [name]=\"name\"></app-name-child>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nNameParentComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \n// Displays 'Mr. IQ', '<no name set>', 'Bombasto'\n\n  \nnames\n \n=\n \n[\n'Mr. IQ'\n,\n \n'   '\n,\n \n'  Bombasto  '\n];\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nPara demonstrar o uso desse componente, modifique o template \napp.component.html\n para: \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<\nh1\n \nid\n=\n\"top\"\n>\nComponent Communication Cookbook\n</\nh1\n>\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-child\"\n>\nPass data from parent to child with input binding (\"Heroes\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-setter\"\n>\nIntercept input property changes with a setter (\"Master\")\n</\na\n><\nbr\n/>\n\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child\"\n>\n\n  \n<\napp-hero-parent\n></\napp-hero-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-setter\"\n>\n\n  \n<\napp-name-parent\n></\napp-name-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nVoc\u00ea dever\u00e1 ver algo como:\n\n\n\n\nInterceptando mudan\u00e7as na propriedade de input com \nngOnChanges()\n\u00b6\n\n\nCom o m\u00e9todo setter \u00e9 poss\u00edvel interceptar as mudan\u00e7as a uma propriedade de input, como vimos no exemplo anterior.\n\n\nTamb\u00e9m \u00e9 poss\u00edvel interceptar essas mudan\u00e7as com o m\u00e9todo \nngOnChanges()\n da interface \nOnChanges\n do lifecycle hook. A diferen\u00e7a \u00e9 que, com o m\u00e9todo \nngOnChanges()\n, \u00e9 poss\u00edvel observar as mudan\u00e7as a v\u00e1rias propriedades no mesmo m\u00e9todo, de forma que podemos criar uma l\u00f3gica de intera\u00e7\u00e3o entre elas.\n\n\nCriando o componente \nVersionChildComponent\n\u00b6\n\n\nCrie o componente \nVersionChildComponent\n:\n\n\n1\nng generate component version-child --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nEsse componente \u00e9 respons\u00e1vel por exibir uma vers\u00e3o no formato \"major.minor\", bem como um registro de logs das mudan\u00e7as nessa vers\u00e3o.\n\n\nModifique o conte\u00fado do componente \nVersionChildComponent\n para:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nSimpleChange\n,\n \nOnChanges\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-version-child'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h3>Version {{major}}.{{minor}}</h3>\n\n\n    <h4>Change log:</h4>\n\n\n    <ul>\n\n\n      <li *ngFor=\"let change of changeLog\">{{change}}</li>\n\n\n    </ul>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nVersionChildComponent\n \nimplements\n \nOnInit\n,\n \nOnChanges\n \n{\n\n\n  \n@\nInput\n()\n \nmajor\n:\n \nnumber\n;\n\n  \n@\nInput\n()\n \nminor\n:\n \nnumber\n;\n\n  \nchangeLog\n:\n \nstring\n[]\n \n=\n \n[];\n\n\n  \nngOnChanges\n(\nchanges\n:\n \n{[\npropKey\n:\n \nstring\n]\n:\n \nSimpleChange\n})\n \n{\n\n    \nlet\n \nlog\n:\n \nstring\n[]\n \n=\n \n[];\n\n    \nfor\n \n(\nlet\n \npropName\n \nin\n \nchanges\n)\n \n{\n\n      \nlet\n \nchangedProp\n \n=\n \nchanges\n[\npropName\n];\n\n      \nlet\n \nto\n \n=\n \nJSON\n.\nstringify\n(\nchangedProp\n.\ncurrentValue\n);\n\n      \nif\n \n(\nchangedProp\n.\nisFirstChange\n())\n \n{\n\n        \nlog\n.\npush\n(\n`Initial value of \n${\npropName\n}\n set to \n${\nto\n}\n`\n);\n\n      \n}\n \nelse\n \n{\n\n        \nlet\n \nfrom\n \n=\n \nJSON\n.\nstringify\n(\nchangedProp\n.\npreviousValue\n);\n\n        \nlog\n.\npush\n(\n`\n${\npropName\n}\n changed from \n${\nfrom\n}\n to \n${\nto\n}\n`\n);\n\n      \n}\n\n    \n}\n\n    \nthis\n.\nchangeLog\n.\npush\n(\nlog\n.\njoin\n(\n', '\n));\n\n  \n}\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nEm resumo, o componente \nVersionChildComponent\n:\n\n\n\n\ndefine as propriedades \nmajor\n e \nminor\n para guardar a vers\u00e3o, marcando-as com o decorador \n@Input\n;\n\n\ndefine a propriedade \nchangeLog\n para guardar os registros de log das mudan\u00e7as;\n\n\nexibe as propriedades \nmajor\n e \nminor\n no template via interpola\u00e7\u00e3o;\n\n\nexibe cada um dos registros de log atrav\u00e9s de um la\u00e7o de repeti\u00e7\u00e3o com a diretiva \n*ngFor\n;\n\n\nimplementa o m\u00e9todo \nngOnChanges()\n para capturar as mudan\u00e7as \u00e0s propriedades \nmajor\n e \nminor\n, registrando-as na propriedade \nchangeLog\n.\n\n\n\n\nCriando o componente \nVersionParentComponent\n\u00b6\n\n\nCrie o componente \nVersionParentComponent\n:\n\n\n1\nng generate component version-parent --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nO componente pai \nVersionParentComponent\n, al\u00e9m de aninhar o componente filho \nVersionChildComponent\n, tamb\u00e9m permite a mudan\u00e7a da vers\u00e3o, disponibilizando um bot\u00e3o para o incremento da vers\u00e3o major e outro bot\u00e3o para o incremento da vers\u00e3o minor.\n\n\nModifique o template do componente \nVersionParentComponent\n para:\n\n\n1\n2\n3\n4\n5\n6\ntemplate\n:\n \n`\n\n\n  <h2>Source code version</h2>\n\n\n  <button (click)=\"newMinor()\">New minor version</button>\n\n\n  <button (click)=\"newMajor()\">New major version</button>\n\n\n  <app-version-child [major]=\"major\" [minor]=\"minor\"></app-version-child>\n\n\n`\n,\n\n\n\n\n\n\n\nInclua as propriedades \nmajor\n e \nminor\n (inicializando-as) e os m\u00e9todos \nnewMinor()\n e \nnewMajor()\n referenciados no template do componente:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nmajor\n \n=\n \n1\n;\n\n\nminor\n \n=\n \n23\n;\n\n\n\nnewMinor\n()\n \n{\n\n  \nthis\n.\nminor\n++\n;\n\n\n}\n\n\n\nnewMajor\n()\n \n{\n\n  \nthis\n.\nmajor\n++\n;\n\n  \nthis\n.\nminor\n \n=\n \n0\n;\n\n\n}\n\n\n\n\n\n\n\nO resultado final do componente \nVersionParentComponent\n \u00e9:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-version-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Source code version</h2>\n\n\n    <button (click)=\"newMinor()\">New minor version</button>\n\n\n    <button (click)=\"newMajor()\">New major version</button>\n\n\n    <app-version-child [major]=\"major\" [minor]=\"minor\"></app-version-child>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nVersionParentComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nmajor\n \n=\n \n1\n;\n\n  \nminor\n \n=\n \n23\n;\n\n\n  \nnewMinor\n()\n \n{\n\n    \nthis\n.\nminor\n++\n;\n\n  \n}\n\n\n  \nnewMajor\n()\n \n{\n\n    \nthis\n.\nmajor\n++\n;\n\n    \nthis\n.\nminor\n \n=\n \n0\n;\n\n  \n}\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nInclua ent\u00e3o o seguinte trecho no topo do template \napp.component.html\n: \n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<!-- ... -->\n\n\n\n<!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-on-changes\"\n>\nIntercept input property changes with \n<\ni\n>\nngOnChanges\n</\ni\n>\n (\"Source code version\")\n</\na\n><\nbr\n/>\n\n\n\n<!-- ... -->\n\n\n\n<!-- inclua o seguinte trecho ao final do template -->\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-on-changes\"\n>\n\n  \n<\napp-version-parent\n></\napp-version-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nEsse \u00e9 o resultado esperado:\n\n\n\n\nComponente pai escutando eventos do componente filho\n\u00b6\n\n\nAt\u00e9 agora demonstramos a intera\u00e7\u00e3o entre os componentes somente no sentido \"do pai para o filho\". Vamos agora demonstrar a intera\u00e7\u00e3o no sentido inverso, isto \u00e9, no sentido \"do filho para o pai\".\n\n\nO componente \nVoterComponent\n\u00b6\n\n\nCrie o componente \nVoterComponent\n:\n\n\n1\nng generate component voter --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nModifique o template do componente para:\n\n\n1\n2\n3\n4\n5\ntemplate\n:\n \n`\n\n\n  <h4>{{name}}</h4>\n\n\n  <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>\n\n\n  <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>\n\n\n`\n,\n\n\n\n\n\n\n\nO template simula uma vota\u00e7\u00e3o, disponibilizando dois bot\u00f5es para a tomada de decis\u00e3o.\n\n\nEm cada um dos bot\u00f5es \u00e9 feito um binding de evento, de forma que o clique do bot\u00e3o ir\u00e1 invocar o m\u00e9todo \nvote()\n do componente \nVoterComponent\n, passando como par\u00e2metro o booleano que indica qual foi o voto escolhido. Ap\u00f3s a vota\u00e7\u00e3o, os bot\u00f5es s\u00e3o desabilitados.\n\n\nVamos ent\u00e3o criar as propriedades e m\u00e9todos referenciados no template:\n\n\n1\n2\n3\n4\n5\n6\n7\n@\nInput\n()\n  \nname\n:\n \nstring\n;\n \n// <-- n\u00e3o esque\u00e7a do import para o s\u00edmbolo \"Input\"\n\n\n\nvoted\n \n=\n \nfalse\n;\n\n\n\nvote\n(\nagreed\n:\n \nboolean\n)\n \n{\n\n  \nthis\n.\nvoted\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\nPara fazer a intera\u00e7\u00e3o no sentido \"do filho para o pai\", vamos incluir uma nova propriedade de output do tipo \nEventEmitter\n. A propriedade deve estar adornada com o decorador \n@Output\n como abaixo:\n\n\n1\n@\nOutput\n()\n \nonVoted\n \n=\n \nnew\n \nEventEmitter\n<\nboolean\n>\n();\n \n// <-- n\u00e3o esque\u00e7a do import para o s\u00edmbolo \"EventEmitter\"\n\n\n\n\n\n\n\nCom a propriedade \nEventEmitter\n, o componente filho emite um evento quando algo acontece (no nosso caso, quando o voto \u00e9 computado):\n\n\n1\n2\n3\n4\nvote\n(\nagreed\n:\n \nboolean\n)\n \n{\n\n  \nthis\n.\nonVoted\n.\nemit\n(\nagreed\n);\n  \n// <!-- inclu\u00eddo\n\n  \nthis\n.\nvoted\n \n=\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\n\nDessa forma, quando um dos bot\u00f5es \u00e9 clicado, um evento booleano \u00e9 emitido para o componente pai, que poder\u00e1 captur\u00e1-lo e atuar conforme a necessidade.\n\n\nA vers\u00e3o final do componente \nVoterComponent\n \u00e9:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nimport\n \n{\n \nComponent\n,\n \nOnInit\n,\n \nInput\n,\n \nOutput\n,\n \nEventEmitter\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-voter'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h4>{{name}}</h4>\n\n\n    <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>\n\n\n    <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nVoterComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \n@\nInput\n()\n  \nname\n:\n \nstring\n;\n\n  \n@\nOutput\n()\n \nonVoted\n \n=\n \nnew\n \nEventEmitter\n<\nboolean\n>\n();\n\n\n  \nvoted\n \n=\n \nfalse\n;\n\n\n  \nvote\n(\nagreed\n:\n \nboolean\n)\n \n{\n\n    \nthis\n.\nonVoted\n.\nemit\n(\nagreed\n);\n\n    \nthis\n.\nvoted\n \n=\n \ntrue\n;\n\n  \n}\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nO componente \nVoteTakerComponent\n\u00b6\n\n\nCrie agora o componente \nVoteTakerComponent\n:\n\n\n1\nng generate component vote-taker --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nEsse componente exibe uma lista de \"votantes\" (representando pelo componente \nVoterComponent\n), guardando a quantidade total de votos a favor e contra.\n\n\nModifique o template do componente para:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ntemplate\n:\n \n`\n\n\n  <h2>Should mankind colonize the Universe?</h2>\n\n\n  <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\n\n\n  <app-voter *ngFor=\"let voter of voters\"\n\n\n    [name]=\"voter\"\n\n\n    (onVoted)=\"onVoted($event)\">\n\n\n  </app-voter>\n\n\n`\n,\n\n\n\n\n\n\n\nAdicione, ent\u00e3o, as propriedades \nagreed\n e \ndisagreed\n, bem como o array \nvoters\n, que contem os nomes dos \"votantes\":\n\n\n1\n2\n3\nagreed\n \n=\n \n0\n;\n\n\ndisagreed\n \n=\n \n0\n;\n\n\nvoters\n \n=\n \n[\n'Mr. IQ'\n,\n \n'Ms. Universe'\n,\n \n'Bombasto'\n];\n\n\n\n\n\n\n\nPor fim, adicione o m\u00e9todo \nonVoted()\n:\n\n\n1\n2\n3\nonVoted\n(\nagreed\n:\n \nboolean\n)\n \n{\n\n  \nagreed\n \n?\n \nthis\n.\nagreed\n++\n \n:\n \nthis\n.\ndisagreed\n++\n;\n\n\n}\n\n\n\n\n\n\n\nEsse m\u00e9todo recebe como par\u00e2metro o resultado do voto e incrementa o contador apropriado (a favor ou contra, representado pelas propriedades \nagreed\n e \ndisagreed\n, respectivamente).\n\n\nA vers\u00e3o final do componente \nVoteTakerComponent\n deve ser:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-voter-taker'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Should mankind colonize the Universe?</h2>\n\n\n    <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\n\n\n    <app-voter *ngFor=\"let voter of voters\"\n\n\n      [name]=\"voter\"\n\n\n      (onVoted)=\"onVoted($event)\">\n\n\n    </app-voter>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nVoteTakerComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nagreed\n \n=\n \n0\n;\n\n  \ndisagreed\n \n=\n \n0\n;\n\n  \nvoters\n \n=\n \n[\n'Mr. IQ'\n,\n \n'Ms. Universe'\n,\n \n'Bombasto'\n];\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n  \nonVoted\n(\nagreed\n:\n \nboolean\n)\n \n{\n\n    \nagreed\n \n?\n \nthis\n.\nagreed\n++\n \n:\n \nthis\n.\ndisagreed\n++\n;\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nPerceba que o componente pai \nVoteTakerComponent\n faz um binding com o evento \nonVoted()\n do componente filho \nVoterComponent\n, que devolve o valor do voto no \npayload\n do evento (\n$event\n).\n\n\nPara ver o resultado, inclua o seguinte trecho HTML ao arquivo \napp.component.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<!-- ... -->\n\n\n\n<!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->\n\n\n\n<\na\n \nhref\n=\n\"#child-to-parent\"\n>\nParent listens for child event (\"Colonize Universe\")\n</\na\n><\nbr\n/>\n\n\n\n<!-- ... -->\n\n\n\n<!-- inclua o seguinte trecho ao final do template -->\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"child-to-parent\"\n>\n\n  \n<\napp-vote-taker\n></\napp-vote-taker\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nEsse \u00e9 o resultado esperado:\n\n\n\n\nComponente pai interagindo com o filho via vari\u00e1vel local\n\u00b6\n\n\nUm componente pai \nn\u00e3o\n pode usar data binding para \nler as propriedades\n ou \ninvocar m\u00e9todos\n de um componente filho.\n\n\nPara conseguir fazer isso, voc\u00ea pode criar uma vari\u00e1vel no template pai para referenciar o elemento filho.\n\n\nO componente \nCountdownTimerComponent\n\u00b6\n\n\nCrie agora o componente \nCountdownTimerComponent\n:\n\n\n1\nng generate component countdown-timer --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nModifique o conte\u00fado do componente como a seguir:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\nimport\n \n{\n \nComponent\n,\n \nOnDestroy\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-countdown-timer'\n,\n\n  \ntemplate\n:\n \n'<p>{{message}}</p>'\n\n\n})\n\n\nexport\n \nclass\n \nCountdownTimerComponent\n \nimplements\n \nOnInit\n,\n \nOnDestroy\n \n{\n\n\n  \nintervalId\n \n=\n \n0\n;\n\n  \nmessage\n \n=\n \n''\n;\n\n  \nseconds\n \n=\n \n11\n;\n\n\n  \nclearTimer\n()\n \n{\n \nclearInterval\n(\nthis\n.\nintervalId\n);\n \n}\n\n\n  \nngOnInit\n()\n    \n{\n \nthis\n.\nstart\n();\n \n}\n\n  \nngOnDestroy\n()\n \n{\n \nthis\n.\nclearTimer\n();\n \n}\n\n\n  \nstart\n()\n \n{\n \nthis\n.\ncountDown\n();\n \n}\n\n  \nstop\n()\n  \n{\n\n    \nthis\n.\nclearTimer\n();\n\n    \nthis\n.\nmessage\n \n=\n \n`Holding at T-\n${\nthis\n.\nseconds\n}\n seconds`\n;\n\n  \n}\n\n\n  \nprivate\n \ncountDown\n()\n \n{\n\n    \nthis\n.\nclearTimer\n();\n\n    \nthis\n.\nintervalId\n \n=\n \nwindow\n.\nsetInterval\n(()\n \n=>\n \n{\n\n      \nthis\n.\nseconds\n \n-=\n \n1\n;\n\n      \nif\n \n(\nthis\n.\nseconds\n \n===\n \n0\n)\n \n{\n\n        \nthis\n.\nmessage\n \n=\n \n'Blast off!'\n;\n\n      \n}\n \nelse\n \n{\n\n        \nif\n \n(\nthis\n.\nseconds\n \n<\n \n0\n)\n \n{\n \nthis\n.\nseconds\n \n=\n \n10\n;\n \n}\n \n// reset\n\n        \nthis\n.\nmessage\n \n=\n \n`T-\n${\nthis\n.\nseconds\n}\n seconds and counting`\n;\n\n      \n}\n\n    \n},\n \n1000\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nO componente \nCountdownTimerComponent\n repetidamente faz uma contagem regressiva at\u00e9 zero e lan\u00e7a um foguete. Os m\u00e9todos \nstart()\n e \nstop()\n controlam o rel\u00f3gio, e o componente tamb\u00e9m exibe o status da contagem regressiva em seu template.\n\n\nO componente \nCountdownLocalVarParentComponent\n\u00b6\n\n\nCrie agora o componente pai \nCountdownLocalVarParentComponent\n:\n\n\n1\nng generate component countdown-local-var-parent --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nO componente n\u00e3o pode fazer um data binding para os m\u00e9todos \nstart()\n e \nstop()\n ou para a propriedade \nseconds\n do componente filho.\n\n\nAo inv\u00e9s disso, vamos criar uma vari\u00e1vel local (\n#timer\n) na tag \n<countdown-timer>\n, que representa o componente filho. Isso nos d\u00e1 uma refer\u00eancia para o componente filho e a habilidade de acessar qualquer propriedade ou m\u00e9todo a partir do template pai.\n\n\nModifique, ent\u00e3o, o conte\u00fado do componente \nCountdownLocalVarParentComponent\n como a seguir:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-countdown-local-var-parent'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h3>Countdown to Liftoff (via local variable)</h3>\n\n\n    <button (click)=\"timer.start()\">Start</button>\n\n\n    <button (click)=\"timer.stop()\">Stop</button>\n\n\n    <div class=\"seconds\">{{timer.seconds}}</div>\n\n\n    <app-countdown-timer #timer></app-countdown-timer>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[\n`\n\n\n    .seconds {\n\n\n      background-color: black;\n\n\n      color: red;\n\n\n      font-size: 3em;\n\n\n      margin: 0.3em 0;\n\n\n      text-align: center;\n\n\n      width: 1.5em;\n\n\n    }    \n\n\n  `\n]\n\n\n})\n\n\nexport\n \nclass\n \nCountdownLocalVarParentComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nconstructor\n()\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nEsse exemplo associa os bot\u00f5es do componente pai aos m\u00e9todos \nstart()\n e \nstop()\n do componente filho, bem como faz uma interpola\u00e7\u00e3o para exibir a propriedade \nseconds\n do componente filho no template do componente pai.\n\n\nPara ver esse exemplo funcionando, adicione o seguinte trecho html ao final do \napp.component.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<!-- ... -->\n\n\n\n<!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-local-var\"\n>\nParent to child via \n<\ni\n>\nlocal variable\n</\ni\n>\n(\"Countdown to Liftoff\")\n</\na\n><\nbr\n/>\n\n\n\n<!-- ... -->\n\n\n\n<!-- inclua o seguinte trecho ao final do template -->\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-local-var\"\n>\n\n  \n<\napp-countdown-local-var-parent\n></\napp-countdown-local-var-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nAqui, vemos os componentes pai e filho trabalhando juntos:\n\n\n\n\nComponente pai chamando um @ViewChild()\n\u00b6\n\n\nA abordagem de intera\u00e7\u00e3o entre componentes via vari\u00e1vel local \u00e9 simples e f\u00e1cil. Mas ela \u00e9 limitada, pois a liga\u00e7\u00e3o entre os componentes pai e filho deve ser feita inteiramente no template do componente pai. O componente pai em si n\u00e3o tem acesso ao componente filho.\n\n\nVoc\u00ea n\u00e3o consegue usar a t\u00e9cnica da vari\u00e1vel local se uma inst\u00e2ncia da classe do componente pai precisar ler ou escrever valores ou ainda chamar m\u00e9todos do componente filho.\n\n\nQuando a classe do componetne pai precisa desse tipo de acesso, injete o componente filho no componente pai na forma de um \nViewChild\n.\n\n\nO exerc\u00edcio a seguir ilustra essa t\u00e9cnica com o mesmo exemplo do \"CountdownTimer\" que usamos anteriormente para a t\u00e9cnica da intera\u00e7\u00e3o entre componentes via vari\u00e1vel local. A apar\u00eancia e o comportamento do exemplo \u00e9 o mesmo. Inclusive, o componente filho \nCountdownTimerComponent\n \u00e9 o mesmo. O exemplo serve somente como demonstra\u00e7\u00e3o.\n\n\nCrie um novo componente pai \nCountdownViewChildParentComponent\n:\n\n\n1\nng generate component countdown-view-child-parent --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nEsse deve ser o conte\u00fado do componente \nCountdownViewChildParentComponent\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\nimport\n \n{\n \nAfterViewInit\n,\n \nViewChild\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nComponent\n \n}\n                \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nCountdownTimerComponent\n \n}\n  \nfrom\n \n'./countdown-timer.component'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'countdown-parent-vc'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h3>Countdown to Liftoff (via ViewChild)</h3>\n\n\n    <button (click)=\"start()\">Start</button>\n\n\n    <button (click)=\"stop()\">Stop</button>\n\n\n    <div class=\"seconds\">{{ seconds() }}</div>\n\n\n    <app-countdown-timer></app-countdown-timer>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[\n`\n\n\n    .seconds {\n\n\n        background-color: black;\n\n\n        color: red;\n\n\n        font-size: 3em;\n\n\n        margin: 0.3em 0;\n\n\n        text-align: center;\n\n\n        width: 1.5em;\n\n\n      }    \n\n\n  `\n]\n\n\n})\n\n\nexport\n \nclass\n \nCountdownViewChildParentComponent\n \nimplements\n \nAfterViewInit\n \n{\n\n\n  \n@\nViewChild\n(\nCountdownTimerComponent\n)\n\n  \nprivate\n \ntimerComponent\n:\n \nCountdownTimerComponent\n;\n\n\n  \nseconds\n()\n \n{\n \nreturn\n \n0\n;\n \n}\n\n\n  \nngAfterViewInit\n()\n \n{\n\n    \n// Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n\n    \n// but wait a tick first to avoid one-time devMode\n\n    \n// unidirectional-data-flow-violation error\n\n    \nsetTimeout\n(()\n \n=>\n \nthis\n.\nseconds\n \n=\n \n()\n \n=>\n \nthis\n.\ntimerComponent\n.\nseconds\n,\n \n0\n);\n\n  \n}\n\n\n  \nstart\n()\n \n{\n \nthis\n.\ntimerComponent\n.\nstart\n();\n \n}\n\n  \nstop\n()\n \n{\n \nthis\n.\ntimerComponent\n.\nstop\n();\n \n}\n\n\n}\n\n\n\n\n\n\n\nD\u00e1 um pouco mais de trabalho para recuperar a vis\u00e3o do componente filho na classe do componente pai.\n\n\nPrimeiro, voc\u00ca deve importar as refer\u00eancias para o decorador \nViewChild\n e para a interface \nAfterViewInit\n do lifecycle hook:\n\n\n1\nimport\n \n{\n \nAfterViewInit\n,\n \nViewChild\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n\n\n\n\nA seguir, voc\u00ea injeta o componente filho \nCountdownTimerComponent\n na propriedade privada \ntimerComponent\n, usando o decorador \n@ViewChild\n:\n\n\n1\n2\n@\nViewChild\n(\nCountdownTimerComponent\n)\n\n\nprivate\n \ntimerComponent\n:\n \nCountdownTimerComponent\n;\n\n\n\n\n\n\n\nA vari\u00e1vel local \n#timer\n n\u00e3o existe mais no template do componente pai. Ao inv\u00e9s disso, os bot\u00f5es s\u00e3o associados, via binding de evento, aos m\u00e9todos \nstart()\n e \nstop()\n do pr\u00f3prio componente pai. J\u00e1 a exibi\u00e7\u00e3o dos segundos da contagem regressiva \u00e9 associada, via interpola\u00e7\u00e3o, ao m\u00e9todo \nseconds()\n do pr\u00f3prio componente pai.\n\n\nEsses m\u00e9todos acessam o componente filho diretamente, atrav\u00e9s da propriedade injetada \ntimerComponent\n.\n\n\nO m\u00e9todo hook \nngAfterViewInit()\n \u00e9 muito importante nesse exemplo.\n\n\nO componente filho s\u00f3 est\u00e1 dispon\u00edvel ap\u00f3s o Angular exibir totalmente a vis\u00e3o do componente pai. A regra do fluxo de dados unidirecional do Angular impede que o componente pai utilize o componente filho no primeiro ciclo de atualiza\u00e7\u00e3o. Por isso, o m\u00e9todo \nseconds()\n retorna inicialmente 0 segundos.\n\n\nQuando o Angular chama o m\u00e9todo \nngAfterViewInit()\n, \u00e9 muito tarde para atualizar a vis\u00e3o do componente pai para exibir os segundos da contagem regressiva. \u00c9 preciso aguardar um \"turno\" antes de atualizar os segundos.\n\n\nPor isso, usamos o m\u00e9todo \nsetTimeout()\n a fim de esperar um ciclo de atualiza\u00e7\u00e3o do Angular e, somente ent\u00e3o, redefinimos o m\u00e9todo \nseconds()\n para recuperar as atualiza\u00e7\u00f5es a partir do componente filho, injetado na propriedade \ntimerComponent\n.\n\n\nPara ver esse exemplo funcionando, adicione o seguinte trecho html ao final do \napp.component.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<!-- ... -->\n\n\n\n<!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-view-child\"\n>\nParent calls \n<\ni\n>\nViewChild\n</\ni\n>\n(\"Countdown  to Liftoff\")\n</\na\n><\nbr\n/>\n\n\n\n<!-- ... -->\n\n\n\n<!-- inclua o seguinte trecho ao final do template -->\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-view-child\"\n>\n\n  \n<\napp-countdown-view-child-parent\n></\napp-countdown-view-child-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n\n\n\n\nComunica\u00e7\u00e3o via servi\u00e7o\n\u00b6\n\n\nNessa forma de intera\u00e7\u00e3o, o componente pai e o componente filho compartilham um servi\u00e7o cuja interface permite a comunica\u00e7\u00e3o bidirecional.\n\n\nO escopo da inst\u00e2ncia do servi\u00e7o deve abranger o componente pai e seus componentes filhos. Componentes foram dessa sub-\u00e1rvore de componentes n\u00e3o tem acesso ao servi\u00e7o e a suas comunica\u00e7\u00f5es.\n\n\nO servi\u00e7o \nMissionService\n\u00b6\n\n\nNesse exemplo, o servi\u00e7o \nMissionService\n conectar o \nMissionControlComponent\n aos seus m\u00faltiplos componentes filhos \nAstronautComponent\n.\n\n\nCrie o servi\u00e7o \nMissionService\n:\n\n\n1\nng generate service mission --no-spec\n\n\n\n\n\n\nModifique o arquivo \nsrc/app/mission.service.ts\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nSubject\n \n}\n    \nfrom\n \n'rxjs'\n;\n\n\n\n@\nInjectable\n()\n\n\nexport\n \nclass\n \nMissionService\n \n{\n\n\n  \n// Observable string sources\n\n  \nprivate\n \nmissionAnnouncedSource\n \n=\n \nnew\n \nSubject\n<\nstring\n>\n();\n\n  \nprivate\n \nmissionConfirmedSource\n \n=\n \nnew\n \nSubject\n<\nstring\n>\n();\n\n\n  \n// Observable string streams\n\n  \nmissionAnnounced$\n \n=\n \nthis\n.\nmissionAnnouncedSource\n.\nasObservable\n();\n\n  \nmissionConfirmed$\n \n=\n \nthis\n.\nmissionConfirmedSource\n.\nasObservable\n();\n\n\n  \n// Service message commands\n\n  \nannounceMission\n(\nmission\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nmissionAnnouncedSource\n.\nnext\n(\nmission\n);\n\n  \n}\n\n\n  \nconfirmMission\n(\nastronaut\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nmissionConfirmedSource\n.\nnext\n(\nastronaut\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nAs propriedades \nmissionAnnounced$\n e \nmissionConfirmed$\n s\u00e3o do tipo \nObservable\n e representam os fluxos de eventos para miss\u00f5es anunciadas (isto \u00e9, miss\u00f5es criadas) e para miss\u00f5es confirmadas (isto \u00e9, quando um astronauta aceitou uma nova miss\u00e3o), respectivamente. O componente pai e os seus componentes filhos ir\u00e3o criar assinaturas para observar as mudan\u00e7as nesses fluxos de eventos.\n\n\nOs m\u00e9todos \nannounceMission()\n e \nconfirmMission()\n s\u00e3o respons\u00e1veis por criar novas miss\u00f5es e confirmar um astronauta a uma miss\u00e3o, respectivamente, criando um novo evento (\nnext()\n) no \nSubject\n apropriado.\n\n\nO componente \nMissionControlComponent\n\u00b6\n\n\nCrie agora o componente pai \nMissionControlComponent\n:\n\n\n1\nng generate component mission-control --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nO componente pai \nMissionControlComponent\n prov\u00ea a inst\u00e2ncia do servi\u00e7o \nMissionService\n, compartilhando-a com seus componentes filhos.\n\n\nPor isso, inclua o servi\u00e7o no array \nproviders\n do decorador \n@Component\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \n{\n \nMissionService\n \n}\n \nfrom\n \n'./mission.service'\n;\n \n// <-- n\u00e3o esque\u00e7a do import\n\n\n\n(...)\n\n\n\n@\nComponent\n({\n  \n  \n(...)\n\n  \nproviders\n:\n \n[\nMissionService\n]\n \n// <-- inclua o servi\u00e7o \"MissionService\" no array \"providers\"\n\n\n})\n\n\n\n\n\n\n\nModifique o template do componente \nMissionControlComponent\n para:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\ntemplate\n:\n \n`\n\n\n  <h2>Mission Control</h2>\n\n\n  <button (click)=\"announce()\">Announce mission</button>\n\n\n  <app-astronaut *ngFor=\"let astronaut of astronauts\"\n\n\n    [astronaut]=\"astronaut\">\n\n\n  </app-astronaut>\n\n\n  <h3>History</h3>\n\n\n  <ul>\n\n\n    <li *ngFor=\"let event of history\">{{event}}</li>\n\n\n  </ul>\n\n\n`\n,\n\n\n\n\n\n\n\nInclua as propriedades referenciadas no template:\n\n\n1\n2\n3\n4\n5\n6\nastronauts\n \n=\n \n[\n'Lovell'\n,\n \n'Swigert'\n,\n \n'Haise'\n];\n\n\nhistory\n:\n \nstring\n[]\n \n=\n \n[];\n\n\nmissions\n \n=\n \n[\n'Fly to the moon!'\n,\n\n            \n'Fly to mars!'\n,\n\n            \n'Fly to Vegas!'\n];\n\n\nnextMission\n \n=\n \n0\n;\n\n\n\n\n\n\n\nInclua tamb\u00e9m o m\u00e9todo \nannounce()\n:\n\n\n1\n2\n3\n4\n5\n6\nannounce\n()\n \n{\n\n  \nlet\n \nmission\n \n=\n \nthis\n.\nmissions\n[\nthis\n.\nnextMission\n++\n];\n\n  \nthis\n.\nmissionService\n.\nannounceMission\n(\nmission\n);\n\n  \nthis\n.\nhistory\n.\npush\n(\n`Mission \"\n${\nmission\n}\n\" announced`\n);\n\n  \nif\n \n(\nthis\n.\nnextMission\n \n>=\n \nthis\n.\nmissions\n.\nlength\n)\n \n{\n \nthis\n.\nnextMission\n \n=\n \n0\n;\n \n}\n\n\n}\n\n\n\n\n\n\n\nPor fim, crie uma assinatura na propriedade \nmissionConfirmed$\n do servi\u00e7o \nMissionService\n, invocando o m\u00e9todo \nsubscribe()\n.\n\n\nA fun\u00e7\u00e3o callback ir\u00e1 receber o astronauta confirmado para a nova miss\u00e3o. Essa \u00e9 parte da comunica\u00e7\u00e3o na dire\u00e7\u00e3o \"do filho para o pai\".\n\n\n1\n2\n3\n4\n5\n6\nconstructor\n(\nprivate\n \nmissionService\n:\n \nMissionService\n)\n \n{\n\n  \nmissionService\n.\nmissionConfirmed$\n.\nsubscribe\n(\n\n    \nastronaut\n \n=>\n \n{\n\n      \nthis\n.\nhistory\n.\npush\n(\n`\n${\nastronaut\n}\n confirmed the mission`\n);\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\nA vers\u00e3o final do componente \nMissionControlComponent\n \u00e9:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nMissionService\n \n}\n     \nfrom\n \n'./mission.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-mission-control'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Mission Control</h2>\n\n\n    <button (click)=\"announce()\">Announce mission</button>\n\n\n    <app-astronaut *ngFor=\"let astronaut of astronauts\"\n\n\n      [astronaut]=\"astronaut\">\n\n\n    </app-astronaut>\n\n\n    <h3>History</h3>\n\n\n    <ul>\n\n\n      <li *ngFor=\"let event of history\">{{event}}</li>\n\n\n    </ul>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[],\n\n  \nproviders\n:\n \n[\nMissionService\n]\n\n\n})\n\n\nexport\n \nclass\n \nMissionControlComponent\n \nimplements\n \nOnInit\n \n{\n\n\n  \nastronauts\n \n=\n \n[\n'Lovell'\n,\n \n'Swigert'\n,\n \n'Haise'\n];\n\n  \nhistory\n:\n \nstring\n[]\n \n=\n \n[];\n\n  \nmissions\n \n=\n \n[\n'Fly to the moon!'\n,\n\n              \n'Fly to mars!'\n,\n\n              \n'Fly to Vegas!'\n];\n\n  \nnextMission\n \n=\n \n0\n;\n\n\n  \nconstructor\n(\nprivate\n \nmissionService\n:\n \nMissionService\n)\n \n{\n\n    \nmissionService\n.\nmissionConfirmed$\n.\nsubscribe\n(\n\n      \nastronaut\n \n=>\n \n{\n\n        \nthis\n.\nhistory\n.\npush\n(\n`\n${\nastronaut\n}\n confirmed the mission`\n);\n\n      \n});\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n  \nannounce\n()\n \n{\n\n    \nlet\n \nmission\n \n=\n \nthis\n.\nmissions\n[\nthis\n.\nnextMission\n++\n];\n\n    \nthis\n.\nmissionService\n.\nannounceMission\n(\nmission\n);\n\n    \nthis\n.\nhistory\n.\npush\n(\n`Mission \"\n${\nmission\n}\n\" announced`\n);\n\n    \nif\n \n(\nthis\n.\nnextMission\n \n>=\n \nthis\n.\nmissions\n.\nlength\n)\n \n{\n \nthis\n.\nnextMission\n \n=\n \n0\n;\n \n}\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nO componente \nAstronautComponent\n\u00b6\n\n\nCrie agora o componente \nAstronautComponent\n:\n\n\n1\nng generate component astronaut --no-spec --flat --inline-style \ntrue\n --inline-template \ntrue\n\n\n\n\n\n\n\nO componente \nAstronautComponent\n tamb\u00e9m injeta o servi\u00e7o \nMissionService\n no seu construtor, como a seguir. A diferen\u00e7a \u00e9 que cada inst\u00e2ncia do \nAstronautComponent\n \u00e9 tamb\u00e9m um filho do componente pai \nMissionControlComponent\n e, portanto, ir\u00e1 injetar a inst\u00e2ncia do servi\u00e7o \nMissionService\n criada pelo componente pai. Por isso, n\u00e3o \u00e9 necess\u00e1rio adicion\u00e1-lo ao array \nproviders\n do decorador \n@Component\n do \nAstronautComponent\n.\n\n\n1\n2\n3\n4\n5\nimport\n \n{\n \nMissionService\n \n}\n \nfrom\n \n'./mission.service'\n;\n \n// <!-- n\u00e3o esque\u00e7a do import\n\n\n\nconstructor\n(\n\n  \nprivate\n \nmissionService\n:\n \nMissionService\n,\n \n// <!-- injete o servi\u00e7o \n\n\n)\n \n{}\n\n\n\n\n\n\n\nModifique o template do \nAstronautComponent\n como a seguir:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\ntemplate\n:\n \n`\n\n\n  <p>\n\n\n    {{astronaut}}: <strong>{{mission}}</strong>\n\n\n    <button\n\n\n      (click)=\"confirm()\"\n\n\n      [disabled]=\"!announced || confirmed\">\n\n\n      Confirm\n\n\n    </button>\n\n\n  </p>\n\n\n`\n,\n\n\n\n\n\n\n\nCrie as propriedades referenciadas:\n\n\n1\n2\n3\n4\n@\nInput\n()\n \nastronaut\n:\n \nstring\n;\n \n// <!-- importe o s\u00edmbolo \"Input\" da biblioteca \"@angular/core\"\n\n\nmission\n \n=\n \n'<no mission announced>'\n;\n\n\nconfirmed\n \n=\n \nfalse\n;\n\n\nannounced\n \n=\n \nfalse\n;\n\n\n\n\n\n\n\nO m\u00e9todo \nconfirm()\n ir\u00e1 usar o servi\u00e7o \nMissionService\n para confirmar o astronauta \u00e0 miss\u00e3o:\n\n\n1\n2\n3\n4\nconfirm\n()\n \n{\n\n  \nthis\n.\nconfirmed\n \n=\n \ntrue\n;\n\n  \nthis\n.\nmissionService\n.\nconfirmMission\n(\nthis\n.\nastronaut\n);\n\n\n}\n\n\n\n\n\n\n\nPor fim, modifique o construtor do componente para criar uma assinatura \u00e0 propriedade \nmissionAnnounced$\n do servi\u00e7o \nMissionService\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nconstructor\n(\nprivate\n \nmissionService\n:\n \nMissionService\n)\n \n{\n\n  \nthis\n.\nsubscription\n \n=\n \nmissionService\n.\nmissionAnnounced$\n.\nsubscribe\n(\n\n    \nmission\n \n=>\n \n{\n\n      \nthis\n.\nmission\n \n=\n \nmission\n;\n\n      \nthis\n.\nannounced\n \n=\n \ntrue\n;\n\n      \nthis\n.\nconfirmed\n \n=\n \nfalse\n;\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\nNote que a assinatura captura o resultado do m\u00e9todo \nsubscribe()\n e guarda sua refer\u00eancia na propriedade \nsubscription\n do componente.\n\n\nEssa refer\u00eancia ser\u00e1 utilizada no m\u00e9todo hook \nngOnDestroy()\n do componente para cancelar a assinatura quando o componente \u00e9 destru\u00eddo. Essa \u00e9 uma forma de prevenir \nmemory leaks\n.\n\n\nIsso n\u00e3o foi feito no componente pai \nMissionControlComponent\n porque, como pai, ele controla o ciclo de vida do pr\u00f3prio servi\u00e7o \nMissionService\n.\n\n\nCrie, ent\u00e3o, a nova propriedade \nsubscription\n:\n\n\n1\n2\n3\nimport\n \n{\n \nSubscription\n \n}\n   \nfrom\n \n'rxjs'\n;\n \n// <-- n\u00e3o esque\u00e7a do import\n\n\n\nsubscription\n:\n \nSubscription\n;\n\n\n\n\n\n\n\nPor fim, crie o m\u00e9todo hook \nngOnDestroy()\n para cancelar a assinatura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nimport\n \n{\n \nOnDestroy\n \n}\n \nfrom\n \n'@angular/core'\n;\n \n// <-- inclua o import\n\n\n\n(...)\n\n\n\nexport\n \nclass\n \nAstronautComponent\n \nimplements\n \nOnDestroy\n \n{\n \n// <!-- inclua a interface \"OnDestroy\" na assinatura da classe\n\n\n  \n(...)\n\n\n  \nngOnDestroy\n()\n \n{\n\n    \n// prevent memory leak when component destroyed\n\n    \nthis\n.\nsubscription\n.\nunsubscribe\n();\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nSegue a vers\u00e3o final do componente:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \n{\n \nMissionService\n \n}\n \nfrom\n \n'./mission.service'\n;\n \n// <!-- n\u00e3o esque\u00e7a do import\n\n\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnInit\n,\n \nOnDestroy\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nSubscription\n \n}\n   \nfrom\n \n'rxjs'\n;\n \n// <-- n\u00e3o esque\u00e7a do import\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-astronaut'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <p>\n\n\n      {{astronaut}}: <strong>{{mission}}</strong>\n\n\n      <button\n\n\n        (click)=\"confirm()\"\n\n\n        [disabled]=\"!announced || confirmed\">\n\n\n        Confirm\n\n\n      </button>\n\n\n    </p>\n\n\n  `\n,\n\n  \nstyles\n:\n \n[]\n\n\n})\n\n\nexport\n \nclass\n \nAstronautComponent\n \nimplements\n \nOnInit\n,\n \nOnDestroy\n \n{\n\n\n  \n@\nInput\n()\n \nastronaut\n:\n \nstring\n;\n\n  \nmission\n \n=\n \n'<no mission announced>'\n;\n\n  \nconfirmed\n \n=\n \nfalse\n;\n\n  \nannounced\n \n=\n \nfalse\n;\n\n  \nsubscription\n:\n \nSubscription\n;\n\n\n  \nconstructor\n(\nprivate\n \nmissionService\n:\n \nMissionService\n)\n \n{\n\n    \nthis\n.\nsubscription\n \n=\n \nmissionService\n.\nmissionAnnounced$\n.\nsubscribe\n(\n\n      \nmission\n \n=>\n \n{\n\n        \nthis\n.\nmission\n \n=\n \nmission\n;\n\n        \nthis\n.\nannounced\n \n=\n \ntrue\n;\n\n        \nthis\n.\nconfirmed\n \n=\n \nfalse\n;\n\n    \n});\n\n  \n}\n\n\n  \nngOnInit\n()\n \n{\n\n  \n}\n\n\n  \nngOnDestroy\n()\n \n{\n\n    \n// prevent memory leak when component destroyed\n\n    \nthis\n.\nsubscription\n.\nunsubscribe\n();\n\n  \n}\n\n\n  \nconfirm\n()\n \n{\n\n    \nthis\n.\nconfirmed\n \n=\n \ntrue\n;\n\n    \nthis\n.\nmissionService\n.\nconfirmMission\n(\nthis\n.\nastronaut\n);\n\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\nPara visualizar o resultado, adicione o seguinte trecho html ao final do \napp.component.html\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n<!-- ... -->\n\n\n\n<!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->\n\n\n<\na\n \nhref\n=\n\"#bidirectional-service\"\n>\nParent and children communicate via a service (\"Mission Control\")\n</\na\n><\nbr\n/>\n\n\n\n<!-- ... -->\n\n\n\n<!-- inclua o seguinte trecho ao final do template -->\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"bidirectional-service\"\n>\n\n  \n<\napp-mission-control\n></\napp-mission-control\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n\n\n\n\n\nO conte\u00fado completo do arquivo \napp.component.html\n deve estar como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n<\nh1\n \nid\n=\n\"top\"\n>\nComponent Communication Cookbook\n</\nh1\n>\n\n\n\n<\na\n \nhref\n=\n\"#parent-to-child\"\n>\nPass data from parent to child with input binding (\"Heroes\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-setter\"\n>\nIntercept input property changes with a setter (\"Master\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-on-changes\"\n>\nIntercept input property changes with \n<\ni\n>\nngOnChanges\n</\ni\n>\n (\"Source code version\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#child-to-parent\"\n>\nParent listens for child event (\"Colonize Universe\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#parent-to-child-local-var\"\n>\nParent to child via \n<\ni\n>\nlocal variable\n</\ni\n>\n(\"Countdown to Liftoff\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#parent-to-view-child\"\n>\nParent calls \n<\ni\n>\nViewChild\n</\ni\n>\n(\"Countdown  to Liftoff\")\n</\na\n><\nbr\n/>\n\n\n<\na\n \nhref\n=\n\"#bidirectional-service\"\n>\nParent and children communicate via a service (\"Mission Control\")\n</\na\n><\nbr\n/>\n\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child\"\n>\n\n  \n<\napp-hero-parent\n></\napp-hero-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-setter\"\n>\n\n  \n<\napp-name-parent\n></\napp-name-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-on-changes\"\n>\n\n  \n<\napp-version-parent\n></\napp-version-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"child-to-parent\"\n>\n\n  \n<\napp-vote-taker\n></\napp-vote-taker\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-child-local-var\"\n>\n\n  \n<\napp-countdown-local-var-parent\n></\napp-countdown-local-var-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"parent-to-view-child\"\n>\n\n  \n<\napp-countdown-view-child-parent\n></\napp-countdown-view-child-parent\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n<\ndiv\n \nid\n=\n\"bidirectional-service\"\n>\n\n  \n<\napp-mission-control\n></\napp-mission-control\n>\n\n\n</\ndiv\n>\n\n\n<\na\n \nhref\n=\n\"#top\"\n \nclass\n=\n\"to-top\"\n>\nBack to Top\n</\na\n>\n\n\n\n<\nhr\n>\n\n\n\n\n\n\n\nO log do hist\u00f3rico mostra que a mensagem viaja nas duas dire\u00e7\u00f5es entre o componente pai \nMissionControlComponent\n e os componentes filhos \nAstronautComponent\n, atrav\u00e9s do servi\u00e7o:\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nexercicio-component-interaction/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- astronaut.component.ts\n|  |  |-- countdown-local-var-parent.component.ts\n|  |  |-- countdown-timer.component.ts\n|  |  |-- countdown-view-child-parent.component.ts\n|  |  |-- hero-child.component.ts\n|  |  |-- hero-parent.component.ts\n|  |  |-- hero.ts\n|  |  |-- mission-control.component.ts\n|  |  |-- mission.service.ts\n|  |  |-- name-child.component.ts\n|  |  |-- name-parent.component.ts\n|  |  |-- version-child.component.ts\n|  |  |-- version-parent.component.ts\n|  |  |-- vote-taker.component.ts\n|  |  |-- voter.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\n\n\nAdicionamos as depend\u00eancias necess\u00e1rias para usar HTTP.\n\n\nRefatoramos o \nHeroService\n para recuperar os her\u00f3is a partir de uma API.\n\n\nAdicionamos os m\u00e9todos \npost()\n, \nput()\n e \ndelete()\n ao \nHeroService\n.\n\n\nAtualizamos os componentes para permitir a cria\u00e7\u00e3o, edi\u00e7\u00e3o e dele\u00e7\u00e3o de her\u00f3is.\n\n\nConfiguramos uma API em mem\u00f3ria.\n\n\nAprendemos a usar \nObservables\n.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 11",
            "title": "10 - Intera\u00e7\u00e3o entre Componentes"
        },
        {
            "location": "/exercicios/exercicio-10/#exercicio-10",
            "text": "",
            "title": "Exerc\u00edcio 10"
        },
        {
            "location": "/exercicios/exercicio-10/#objetivos",
            "text": "Demonstrar as formas de intera\u00e7\u00e3o entre componentes",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-10/#duracao",
            "text": "60 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-10/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-component-interaction  e deixe-a rodando:  1\n2\n3 ng new exercicio-component-interaction cd  exercicio-component-interaction\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-10/#passando-dados-do-pai-para-o-filho-com-binding-de-input",
            "text": "Para demonstrar a intera\u00e7\u00e3o entre os componentes com o binding de input, vamos criar dois componentes:  HeroChildComponent  e  HeroParentComponent .  Para criar o componente  HeroChildComponent , digite o seguinte comando na pasta raiz da aplica\u00e7\u00e3o:  1 ng generate component hero-child --no-spec --flat --inline-style  true  --inline-template  true    Estamos usando a funcionalidade de scaffolding do Angular CLI para criar o esqueleto do componente.  Por padr\u00e3o, esse comando cria um componente numa subpasta com o mesmo nome do componente, al\u00e9m de criar tamb\u00e9m os arquivos de testes unit\u00e1rios ( .spec.ts ), CSS ( .component.css ) e template ( .component.html ) para o componente, j\u00e1 registrando-o no m\u00f3dulo  AppModule  da aplica\u00e7\u00e3o.  Estamos mudando esse comportamento padr\u00e3o com as seguintes flags (opcionais):   --no-spec : indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo  .spec.ts  (testes unit\u00e1rios);  --flat : indica que n\u00e3o queremos a gera\u00e7\u00e3o da subpasta  src/app/hero-child  para o componente;  --inline-style true : indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo  .component.css  para o componente;  --inline-template true  indica que n\u00e3o queremos a gera\u00e7\u00e3o do arquivo  .component.html  para o template do componente.   O resultado esperado, ent\u00e3o, \u00e9 algo como:  1\n2 create src/app/hero-child.component.ts  ( 267  bytes ) \nupdate src/app/app.module.ts  ( 400  bytes )    Para criar o componente pai, repita o processo, mas dessa vez, utilize o nome  hero-parent :  1 ng generate component hero-parent --no-spec --flat --inline-style  true  --inline-template  true    Como resultado, o conte\u00fado do componente  HeroChildComponent  deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-hero-child' , \n   template :   `      <p>        hero-child works!      </p>    ` , \n   styles :   []  })  export   class   HeroChildComponent   implements   OnInit   { \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    O conte\u00fado do componente  HeroParentComponent  deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-hero-parent' , \n   template :   `      <p>        hero-parent works!      </p>    ` , \n   styles :   []  })  export   class   HeroParentComponent   implements   OnInit   { \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    E, adicionalmente, o  AppModule  j\u00e1 deve estar declarando os componentes:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   NgModule   }   from   '@angular/core' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   HeroChildComponent   }   from   './hero-child.component' ;    // <-- adicionado pelo Angular CLI  import   {   HeroParentComponent   }   from   './hero-parent.component' ;    // <-- adicionado pelo Angular CLI  @ NgModule ({ \n   declarations :   [ \n     AppComponent , \n     HeroChildComponent ,    // <-- adicionado pelo Angular CLI  \n     HeroParentComponent ,   // <-- adicionado pelo Angular CLI \n   ], \n   imports :   [ \n     BrowserModule \n   ], \n   providers :   [], \n   bootstrap :   [ AppComponent ]  })  export   class   AppModule   {   }",
            "title": "Passando dados do pai para o filho com binding de input"
        },
        {
            "location": "/exercicios/exercicio-10/#criando-inputs-no-herochildcomponent",
            "text": "No componente filho ( HeroChildComponent ), adicione duas novas propriedades de input (marcadas com o decorador  @Input ):  1\n2 @ Input ()   hero :   Hero ;  @ Input ( 'master' )   masterName :   string ;    O primeiro input, a propriedade  hero , \u00e9 do tipo  Hero . Essa \u00e9 a mesma classe que usamos no Tour of Heroes anteriormente.  O segundo input, a propriedade  masterName  \u00e9 uma string comum. A diferen\u00e7a aqui \u00e9 que o decorador  @Input  define o alias  master  para a propriedade  masterName  do componente.  Crie, ent\u00e3o, o arquivo  hero.ts  na pasta  /src/app  com o conte\u00fado:  1\n2\n3\n4 export   class   Hero   { \n   id :   number ; \n   name :   string ;  }    E agora inclua os imports necess\u00e1rios no  HeroChildComponent :  1\n2 import   {   Input   }   from   '@angular/core' ;  import   {   Hero   }   from   './hero' ;    Modifique o template do componente, para a exibi\u00e7\u00e3o das propriedades de input:  1\n2\n3\n4 template :   `    <h3>{{hero.name}} says:</h3>    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>  `    O resultado final do componente deve ser como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 import   {   Component ,   Input ,   OnInit   }   from   '@angular/core' ;  import   {   Hero   }   from   './hero' ;  @ Component ({ \n   selector :   'app-hero-child' , \n   template :   `      <h3>{{hero.name}} says:</h3>      <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>    ` , \n   styles :   []  })  export   class   HeroChildComponent   implements   OnInit   { \n\n   @ Input ()   hero :   Hero ; \n   @ Input ( 'master' )   masterName :   string ; \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }",
            "title": "Criando inputs no HeroChildComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#fazendo-binding-dos-inputs",
            "text": "Antes de demonstrar o binding das propriedades de input, volte ao  hero.ts  e crie um array de her\u00f3is como abaixo.  1\n2\n3\n4\n5 export   const   HEROES :   Hero []   =   [ \n   { id :   10 ,   name :   'Mr. IQ' }, \n   { id :   11 ,   name :   'Magneta' }, \n   { id :   12 ,   name :   'Bombasto' }  ];   \nN\u00e3o esque\u00e7a de incluir o  export , para que o array possa ser importado em qualquer outro lugar.  Inclua, agora, as propriedades  heroes  e  master  no  HeroParentComponent  como a seguir:  1\n2 heroes   =   HEROES ;   // <-- aqui estamos fazendo uma refer\u00eancia ao array que acabamos de criar  master   =   'Master' ;    Inclua ent\u00e3o o  import  para o array  HEROES  no  HeroParentComponent :  1 import   {   HEROES   }   from   './hero' ;    Queremos ent\u00e3o passar os dados das propriedades  heroes  e  master  do componente pai  HeroParentComponent  para as propriedades do componente filho  HeroChildComponent .  Para isso, O  HeroParentComponent  aninha o componente filho  HeroChildComponent  dentro de um repetidor da diretiva  *ngFor , fazendo o binding da sua propriedade  master  com o input  master  do componente filho, e o binding de cada inst\u00e2ncia do her\u00f3i dessa repeti\u00e7\u00e3o ao input  hero  do componente filho.  Modifique ent\u00e3o o template do componente  HeroParentComponent :   1\n2\n3\n4\n5\n6\n7 template :   `    <h2>{{master}} controls {{heroes.length}} heroes</h2>    <app-hero-child *ngFor=\"let hero of heroes\"      [hero]=\"hero\"      [master]=\"master\">    </app-hero-child>  `    O resultado final do componente  HeroParentComponent  \u00e9:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   HEROES   }   from   './hero' ;  @ Component ({ \n   selector :   'app-hero-parent' , \n   template :   `      <h2>{{master}} controls {{heroes.length}} heroes</h2>      <app-hero-child *ngFor=\"let hero of heroes\"        [hero]=\"hero\"        [master]=\"master\">      </app-hero-child>    ` , \n   styles :   []  })  export   class   HeroParentComponent   implements   OnInit   { \n\n   heroes   =   HEROES ; \n   master   =   'Master' ; \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Para visualizar o resultado, modifique o conte\u00fado do arquivo  app.component.html  para:  1\n2\n3\n4\n5\n6\n7\n8 < h1   id = \"top\" > Component Communication Cookbook </ h1 >  < a   href = \"#parent-to-child\" > Pass data from parent to child with input binding (\"Heroes\") </ a >< br />  < div   id = \"parent-to-child\" > \n   < app-hero-parent ></ app-hero-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >    A aplica\u00e7\u00e3o deve exibir os tr\u00eas her\u00f3is do array:",
            "title": "Fazendo binding dos inputs"
        },
        {
            "location": "/exercicios/exercicio-10/#interceptando-mudancas-na-propriedade-de-input-com-um-setter",
            "text": "Vamos agora definir um setter para interceptar o binding da propriedade de input.  Crie o componente  name-child  com o seguinte comando na pasta raiz da aplica\u00e7\u00e3o:  1 ng generate component name-child --no-spec --flat --inline-style  true  --inline-template  true    Crie tamb\u00e9m o componente  name-parent :  1 ng generate component name-parent --no-spec --flat --inline-style  true  --inline-template  true    Como resultado, os componentes  NameChildComponent  e  NameParentComponent  foram criados na pasta  src/app  e o  AppModule  foi modificado para incluir a declara\u00e7\u00e3o desses novos componentes:  1\n2\n3\n4\n5\n6\n7 declarations :   [ \n   AppComponent , \n   HeroChildComponent , \n   HeroParentComponent , \n   NameChildComponent ,    // <-- inclu\u00eddo \n   NameParentComponent ,   // <-- inclu\u00eddo  ],",
            "title": "Interceptando mudan\u00e7as na propriedade de input com um setter"
        },
        {
            "location": "/exercicios/exercicio-10/#definindo-uma-propriedade-via-metodos-setter-e-getter",
            "text": "Modifique o componente  NameChildComponent  para o seguinte conte\u00fado:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24 import   {   Component ,   Input ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-name-child' , \n   template :   '<h3>\"{{name}}\"</h3>' , \n   styles :   []  })  export   class   NameChildComponent   implements   OnInit   { \n\n   private   _name   =   '' ; \n\n   @ Input () \n   set   name ( name :   string )   { \n     this . _name   =   ( name   &&   name . trim ())   ||   '<no name set>' ; \n   } \n\n   get   name () :   string   {   return   this . _name ;   } \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Perceba que, apesar de o componente n\u00e3o possuir uma propriedade p\u00fablica  name , o template faz uma interpola\u00e7\u00e3o para exibir o valor da propriedade  name .  Ao inv\u00e9s disso, o componente define os m\u00e9todos setter e getter da propriedade:   1\n2\n3\n4\n5 set   name ( name :   string )   { \n   this . _name   =   ( name   &&   name . trim ())   ||   '<no name set>' ;  }  get   name () :   string   {   return   this . _name ;   }    Para o template, essa constru\u00e7\u00e3o tem o mesmo efeito que criar uma propriedade p\u00fablica  name  no componente. O valor setado no m\u00e9todo setter \u00e9 guardado na propriedade privada  _name , e esse valor \u00e9 devolvido no m\u00e9todo getter, quando necess\u00e1rio (para ser exibido na tela, por exemplo).  A diferen\u00e7a \u00e9 que, com essa constru\u00e7\u00e3o, o componente pode interceptar o m\u00e9todo setter a fim de atribuir um valor padr\u00e3o para a propriedade privada  _name  caso receba uma string vazia como par\u00e2metro (isto \u00e9, caso o par\u00e2metro  name  seja  undefined  ou esteja preenchido somente com espa\u00e7os em branco).  Para permitir que outros componentes fa\u00e7am o binding com o input  name , inclu\u00edmos o decorador  @Input  ao m\u00e9todo setter:  1\n2\n3\n4 @ Input ()  set   name ( name :   string )   { \n   ...  }",
            "title": "Definindo uma propriedade via m\u00e9todos setter e getter"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-nameparentcomponent",
            "text": "Mude sua aten\u00e7\u00e3o agora para o componente  NameParentComponent , que criamos anteriormente.  Modifique o template do componente como abaixo:  1\n2\n3\n4 template :   `    <h2>Master controls {{names.length}} names</h2>    <name-child *ngFor=\"let name of names\" [name]=\"name\"></name-child>  ` ,    Inclua, ent\u00e3o, a propriedade  names  referenciada no template:  1 names   =   [ 'Mr. IQ' ,   '   ' ,   '  Bombasto  ' ];    O resultado final do componente deve ser como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-name-parent' , \n   template :   `      <h2>Master controls {{names.length}} names</h2>      <app-name-child *ngFor=\"let name of names\" [name]=\"name\"></app-name-child>    ` , \n   styles :   []  })  export   class   NameParentComponent   implements   OnInit   { \n\n   // Displays 'Mr. IQ', '<no name set>', 'Bombasto' \n   names   =   [ 'Mr. IQ' ,   '   ' ,   '  Bombasto  ' ]; \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Para demonstrar o uso desse componente, modifique o template  app.component.html  para:    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 < h1   id = \"top\" > Component Communication Cookbook </ h1 >  < a   href = \"#parent-to-child\" > Pass data from parent to child with input binding (\"Heroes\") </ a >< br />  < a   href = \"#parent-to-child-setter\" > Intercept input property changes with a setter (\"Master\") </ a >< br />  < div   id = \"parent-to-child\" > \n   < app-hero-parent ></ app-hero-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"parent-to-child-setter\" > \n   < app-name-parent ></ app-name-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >    Voc\u00ea dever\u00e1 ver algo como:",
            "title": "O componente NameParentComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#interceptando-mudancas-na-propriedade-de-input-com-ngonchanges",
            "text": "Com o m\u00e9todo setter \u00e9 poss\u00edvel interceptar as mudan\u00e7as a uma propriedade de input, como vimos no exemplo anterior.  Tamb\u00e9m \u00e9 poss\u00edvel interceptar essas mudan\u00e7as com o m\u00e9todo  ngOnChanges()  da interface  OnChanges  do lifecycle hook. A diferen\u00e7a \u00e9 que, com o m\u00e9todo  ngOnChanges() , \u00e9 poss\u00edvel observar as mudan\u00e7as a v\u00e1rias propriedades no mesmo m\u00e9todo, de forma que podemos criar uma l\u00f3gica de intera\u00e7\u00e3o entre elas.",
            "title": "Interceptando mudan\u00e7as na propriedade de input com ngOnChanges()"
        },
        {
            "location": "/exercicios/exercicio-10/#criando-o-componente-versionchildcomponent",
            "text": "Crie o componente  VersionChildComponent :  1 ng generate component version-child --no-spec --flat --inline-style  true  --inline-template  true    Esse componente \u00e9 respons\u00e1vel por exibir uma vers\u00e3o no formato \"major.minor\", bem como um registro de logs das mudan\u00e7as nessa vers\u00e3o.  Modifique o conte\u00fado do componente  VersionChildComponent  para:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40 import   {   Component ,   Input ,   SimpleChange ,   OnChanges ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-version-child' , \n   template :   `      <h3>Version {{major}}.{{minor}}</h3>      <h4>Change log:</h4>      <ul>        <li *ngFor=\"let change of changeLog\">{{change}}</li>      </ul>    ` , \n   styles :   []  })  export   class   VersionChildComponent   implements   OnInit ,   OnChanges   { \n\n   @ Input ()   major :   number ; \n   @ Input ()   minor :   number ; \n   changeLog :   string []   =   []; \n\n   ngOnChanges ( changes :   {[ propKey :   string ] :   SimpleChange })   { \n     let   log :   string []   =   []; \n     for   ( let   propName   in   changes )   { \n       let   changedProp   =   changes [ propName ]; \n       let   to   =   JSON . stringify ( changedProp . currentValue ); \n       if   ( changedProp . isFirstChange ())   { \n         log . push ( `Initial value of  ${ propName }  set to  ${ to } ` ); \n       }   else   { \n         let   from   =   JSON . stringify ( changedProp . previousValue ); \n         log . push ( ` ${ propName }  changed from  ${ from }  to  ${ to } ` ); \n       } \n     } \n     this . changeLog . push ( log . join ( ', ' )); \n   } \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Em resumo, o componente  VersionChildComponent :   define as propriedades  major  e  minor  para guardar a vers\u00e3o, marcando-as com o decorador  @Input ;  define a propriedade  changeLog  para guardar os registros de log das mudan\u00e7as;  exibe as propriedades  major  e  minor  no template via interpola\u00e7\u00e3o;  exibe cada um dos registros de log atrav\u00e9s de um la\u00e7o de repeti\u00e7\u00e3o com a diretiva  *ngFor ;  implementa o m\u00e9todo  ngOnChanges()  para capturar as mudan\u00e7as \u00e0s propriedades  major  e  minor , registrando-as na propriedade  changeLog .",
            "title": "Criando o componente VersionChildComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#criando-o-componente-versionparentcomponent",
            "text": "Crie o componente  VersionParentComponent :  1 ng generate component version-parent --no-spec --flat --inline-style  true  --inline-template  true    O componente pai  VersionParentComponent , al\u00e9m de aninhar o componente filho  VersionChildComponent , tamb\u00e9m permite a mudan\u00e7a da vers\u00e3o, disponibilizando um bot\u00e3o para o incremento da vers\u00e3o major e outro bot\u00e3o para o incremento da vers\u00e3o minor.  Modifique o template do componente  VersionParentComponent  para:  1\n2\n3\n4\n5\n6 template :   `    <h2>Source code version</h2>    <button (click)=\"newMinor()\">New minor version</button>    <button (click)=\"newMajor()\">New major version</button>    <app-version-child [major]=\"major\" [minor]=\"minor\"></app-version-child>  ` ,    Inclua as propriedades  major  e  minor  (inicializando-as) e os m\u00e9todos  newMinor()  e  newMajor()  referenciados no template do componente:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 major   =   1 ;  minor   =   23 ;  newMinor ()   { \n   this . minor ++ ;  }  newMajor ()   { \n   this . major ++ ; \n   this . minor   =   0 ;  }    O resultado final do componente  VersionParentComponent  \u00e9:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-version-parent' , \n   template :   `      <h2>Source code version</h2>      <button (click)=\"newMinor()\">New minor version</button>      <button (click)=\"newMajor()\">New major version</button>      <app-version-child [major]=\"major\" [minor]=\"minor\"></app-version-child>    ` , \n   styles :   []  })  export   class   VersionParentComponent   implements   OnInit   { \n\n   major   =   1 ; \n   minor   =   23 ; \n\n   newMinor ()   { \n     this . minor ++ ; \n   } \n\n   newMajor ()   { \n     this . major ++ ; \n     this . minor   =   0 ; \n   } \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Inclua ent\u00e3o o seguinte trecho no topo do template  app.component.html :    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 <!-- ... -->  <!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->  < a   href = \"#parent-to-child-on-changes\" > Intercept input property changes with  < i > ngOnChanges </ i >  (\"Source code version\") </ a >< br />  <!-- ... -->  <!-- inclua o seguinte trecho ao final do template -->  < hr >  < div   id = \"parent-to-child-on-changes\" > \n   < app-version-parent ></ app-version-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >    Esse \u00e9 o resultado esperado:",
            "title": "Criando o componente VersionParentComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#componente-pai-escutando-eventos-do-componente-filho",
            "text": "At\u00e9 agora demonstramos a intera\u00e7\u00e3o entre os componentes somente no sentido \"do pai para o filho\". Vamos agora demonstrar a intera\u00e7\u00e3o no sentido inverso, isto \u00e9, no sentido \"do filho para o pai\".",
            "title": "Componente pai escutando eventos do componente filho"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-votercomponent",
            "text": "Crie o componente  VoterComponent :  1 ng generate component voter --no-spec --flat --inline-style  true  --inline-template  true    Modifique o template do componente para:  1\n2\n3\n4\n5 template :   `    <h4>{{name}}</h4>    <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>    <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>  ` ,    O template simula uma vota\u00e7\u00e3o, disponibilizando dois bot\u00f5es para a tomada de decis\u00e3o.  Em cada um dos bot\u00f5es \u00e9 feito um binding de evento, de forma que o clique do bot\u00e3o ir\u00e1 invocar o m\u00e9todo  vote()  do componente  VoterComponent , passando como par\u00e2metro o booleano que indica qual foi o voto escolhido. Ap\u00f3s a vota\u00e7\u00e3o, os bot\u00f5es s\u00e3o desabilitados.  Vamos ent\u00e3o criar as propriedades e m\u00e9todos referenciados no template:  1\n2\n3\n4\n5\n6\n7 @ Input ()    name :   string ;   // <-- n\u00e3o esque\u00e7a do import para o s\u00edmbolo \"Input\"  voted   =   false ;  vote ( agreed :   boolean )   { \n   this . voted   =   true ;  }    Para fazer a intera\u00e7\u00e3o no sentido \"do filho para o pai\", vamos incluir uma nova propriedade de output do tipo  EventEmitter . A propriedade deve estar adornada com o decorador  @Output  como abaixo:  1 @ Output ()   onVoted   =   new   EventEmitter < boolean > ();   // <-- n\u00e3o esque\u00e7a do import para o s\u00edmbolo \"EventEmitter\"    Com a propriedade  EventEmitter , o componente filho emite um evento quando algo acontece (no nosso caso, quando o voto \u00e9 computado):  1\n2\n3\n4 vote ( agreed :   boolean )   { \n   this . onVoted . emit ( agreed );    // <!-- inclu\u00eddo \n   this . voted   =   true ;  }    Dessa forma, quando um dos bot\u00f5es \u00e9 clicado, um evento booleano \u00e9 emitido para o componente pai, que poder\u00e1 captur\u00e1-lo e atuar conforme a necessidade.  A vers\u00e3o final do componente  VoterComponent  \u00e9:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 import   {   Component ,   OnInit ,   Input ,   Output ,   EventEmitter   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-voter' , \n   template :   `      <h4>{{name}}</h4>      <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>      <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>    ` , \n   styles :   []  })  export   class   VoterComponent   implements   OnInit   { \n\n   @ Input ()    name :   string ; \n   @ Output ()   onVoted   =   new   EventEmitter < boolean > (); \n\n   voted   =   false ; \n\n   vote ( agreed :   boolean )   { \n     this . onVoted . emit ( agreed ); \n     this . voted   =   true ; \n   } \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }",
            "title": "O componente VoterComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-votetakercomponent",
            "text": "Crie agora o componente  VoteTakerComponent :  1 ng generate component vote-taker --no-spec --flat --inline-style  true  --inline-template  true    Esse componente exibe uma lista de \"votantes\" (representando pelo componente  VoterComponent ), guardando a quantidade total de votos a favor e contra.  Modifique o template do componente para:  1\n2\n3\n4\n5\n6\n7\n8 template :   `    <h2>Should mankind colonize the Universe?</h2>    <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>    <app-voter *ngFor=\"let voter of voters\"      [name]=\"voter\"      (onVoted)=\"onVoted($event)\">    </app-voter>  ` ,    Adicione, ent\u00e3o, as propriedades  agreed  e  disagreed , bem como o array  voters , que contem os nomes dos \"votantes\":  1\n2\n3 agreed   =   0 ;  disagreed   =   0 ;  voters   =   [ 'Mr. IQ' ,   'Ms. Universe' ,   'Bombasto' ];    Por fim, adicione o m\u00e9todo  onVoted() :  1\n2\n3 onVoted ( agreed :   boolean )   { \n   agreed   ?   this . agreed ++   :   this . disagreed ++ ;  }    Esse m\u00e9todo recebe como par\u00e2metro o resultado do voto e incrementa o contador apropriado (a favor ou contra, representado pelas propriedades  agreed  e  disagreed , respectivamente).  A vers\u00e3o final do componente  VoteTakerComponent  deve ser:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-voter-taker' , \n   template :   `      <h2>Should mankind colonize the Universe?</h2>      <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>      <app-voter *ngFor=\"let voter of voters\"        [name]=\"voter\"        (onVoted)=\"onVoted($event)\">      </app-voter>    ` , \n   styles :   []  })  export   class   VoteTakerComponent   implements   OnInit   { \n\n   agreed   =   0 ; \n   disagreed   =   0 ; \n   voters   =   [ 'Mr. IQ' ,   'Ms. Universe' ,   'Bombasto' ]; \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   } \n\n   onVoted ( agreed :   boolean )   { \n     agreed   ?   this . agreed ++   :   this . disagreed ++ ; \n   }  }    Perceba que o componente pai  VoteTakerComponent  faz um binding com o evento  onVoted()  do componente filho  VoterComponent , que devolve o valor do voto no  payload  do evento ( $event ).  Para ver o resultado, inclua o seguinte trecho HTML ao arquivo  app.component.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 <!-- ... -->  <!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->  < a   href = \"#child-to-parent\" > Parent listens for child event (\"Colonize Universe\") </ a >< br />  <!-- ... -->  <!-- inclua o seguinte trecho ao final do template -->  < hr >  < div   id = \"child-to-parent\" > \n   < app-vote-taker ></ app-vote-taker >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >    Esse \u00e9 o resultado esperado:",
            "title": "O componente VoteTakerComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#componente-pai-interagindo-com-o-filho-via-variavel-local",
            "text": "Um componente pai  n\u00e3o  pode usar data binding para  ler as propriedades  ou  invocar m\u00e9todos  de um componente filho.  Para conseguir fazer isso, voc\u00ea pode criar uma vari\u00e1vel no template pai para referenciar o elemento filho.",
            "title": "Componente pai interagindo com o filho via vari\u00e1vel local"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-countdowntimercomponent",
            "text": "Crie agora o componente  CountdownTimerComponent :  1 ng generate component countdown-timer --no-spec --flat --inline-style  true  --inline-template  true    Modifique o conte\u00fado do componente como a seguir:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36 import   {   Component ,   OnDestroy ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-countdown-timer' , \n   template :   '<p>{{message}}</p>'  })  export   class   CountdownTimerComponent   implements   OnInit ,   OnDestroy   { \n\n   intervalId   =   0 ; \n   message   =   '' ; \n   seconds   =   11 ; \n\n   clearTimer ()   {   clearInterval ( this . intervalId );   } \n\n   ngOnInit ()      {   this . start ();   } \n   ngOnDestroy ()   {   this . clearTimer ();   } \n\n   start ()   {   this . countDown ();   } \n   stop ()    { \n     this . clearTimer (); \n     this . message   =   `Holding at T- ${ this . seconds }  seconds` ; \n   } \n\n   private   countDown ()   { \n     this . clearTimer (); \n     this . intervalId   =   window . setInterval (()   =>   { \n       this . seconds   -=   1 ; \n       if   ( this . seconds   ===   0 )   { \n         this . message   =   'Blast off!' ; \n       }   else   { \n         if   ( this . seconds   <   0 )   {   this . seconds   =   10 ;   }   // reset \n         this . message   =   `T- ${ this . seconds }  seconds and counting` ; \n       } \n     },   1000 ); \n   }  }    O componente  CountdownTimerComponent  repetidamente faz uma contagem regressiva at\u00e9 zero e lan\u00e7a um foguete. Os m\u00e9todos  start()  e  stop()  controlam o rel\u00f3gio, e o componente tamb\u00e9m exibe o status da contagem regressiva em seu template.",
            "title": "O componente CountdownTimerComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-countdownlocalvarparentcomponent",
            "text": "Crie agora o componente pai  CountdownLocalVarParentComponent :  1 ng generate component countdown-local-var-parent --no-spec --flat --inline-style  true  --inline-template  true    O componente n\u00e3o pode fazer um data binding para os m\u00e9todos  start()  e  stop()  ou para a propriedade  seconds  do componente filho.  Ao inv\u00e9s disso, vamos criar uma vari\u00e1vel local ( #timer ) na tag  <countdown-timer> , que representa o componente filho. Isso nos d\u00e1 uma refer\u00eancia para o componente filho e a habilidade de acessar qualquer propriedade ou m\u00e9todo a partir do template pai.  Modifique, ent\u00e3o, o conte\u00fado do componente  CountdownLocalVarParentComponent  como a seguir:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   {   Component ,   OnInit   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-countdown-local-var-parent' , \n   template :   `      <h3>Countdown to Liftoff (via local variable)</h3>      <button (click)=\"timer.start()\">Start</button>      <button (click)=\"timer.stop()\">Stop</button>      <div class=\"seconds\">{{timer.seconds}}</div>      <app-countdown-timer #timer></app-countdown-timer>    ` , \n   styles :   [ `      .seconds {        background-color: black;        color: red;        font-size: 3em;        margin: 0.3em 0;        text-align: center;        width: 1.5em;      }        ` ]  })  export   class   CountdownLocalVarParentComponent   implements   OnInit   { \n\n   constructor ()   {   } \n\n   ngOnInit ()   { \n   }  }    Esse exemplo associa os bot\u00f5es do componente pai aos m\u00e9todos  start()  e  stop()  do componente filho, bem como faz uma interpola\u00e7\u00e3o para exibir a propriedade  seconds  do componente filho no template do componente pai.  Para ver esse exemplo funcionando, adicione o seguinte trecho html ao final do  app.component.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 <!-- ... -->  <!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->  < a   href = \"#parent-to-child-local-var\" > Parent to child via  < i > local variable </ i > (\"Countdown to Liftoff\") </ a >< br />  <!-- ... -->  <!-- inclua o seguinte trecho ao final do template -->  < hr >  < div   id = \"parent-to-child-local-var\" > \n   < app-countdown-local-var-parent ></ app-countdown-local-var-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >    Aqui, vemos os componentes pai e filho trabalhando juntos:",
            "title": "O componente CountdownLocalVarParentComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#componente-pai-chamando-um-viewchild",
            "text": "A abordagem de intera\u00e7\u00e3o entre componentes via vari\u00e1vel local \u00e9 simples e f\u00e1cil. Mas ela \u00e9 limitada, pois a liga\u00e7\u00e3o entre os componentes pai e filho deve ser feita inteiramente no template do componente pai. O componente pai em si n\u00e3o tem acesso ao componente filho.  Voc\u00ea n\u00e3o consegue usar a t\u00e9cnica da vari\u00e1vel local se uma inst\u00e2ncia da classe do componente pai precisar ler ou escrever valores ou ainda chamar m\u00e9todos do componente filho.  Quando a classe do componetne pai precisa desse tipo de acesso, injete o componente filho no componente pai na forma de um  ViewChild .  O exerc\u00edcio a seguir ilustra essa t\u00e9cnica com o mesmo exemplo do \"CountdownTimer\" que usamos anteriormente para a t\u00e9cnica da intera\u00e7\u00e3o entre componentes via vari\u00e1vel local. A apar\u00eancia e o comportamento do exemplo \u00e9 o mesmo. Inclusive, o componente filho  CountdownTimerComponent  \u00e9 o mesmo. O exemplo serve somente como demonstra\u00e7\u00e3o.  Crie um novo componente pai  CountdownViewChildParentComponent :  1 ng generate component countdown-view-child-parent --no-spec --flat --inline-style  true  --inline-template  true    Esse deve ser o conte\u00fado do componente  CountdownViewChildParentComponent :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41 import   {   AfterViewInit ,   ViewChild   }   from   '@angular/core' ;  import   {   Component   }                  from   '@angular/core' ;  import   {   CountdownTimerComponent   }    from   './countdown-timer.component' ;  @ Component ({ \n   selector :   'countdown-parent-vc' , \n   template :   `      <h3>Countdown to Liftoff (via ViewChild)</h3>      <button (click)=\"start()\">Start</button>      <button (click)=\"stop()\">Stop</button>      <div class=\"seconds\">{{ seconds() }}</div>      <app-countdown-timer></app-countdown-timer>    ` , \n   styles :   [ `      .seconds {          background-color: black;          color: red;          font-size: 3em;          margin: 0.3em 0;          text-align: center;          width: 1.5em;        }        ` ]  })  export   class   CountdownViewChildParentComponent   implements   AfterViewInit   { \n\n   @ ViewChild ( CountdownTimerComponent ) \n   private   timerComponent :   CountdownTimerComponent ; \n\n   seconds ()   {   return   0 ;   } \n\n   ngAfterViewInit ()   { \n     // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ... \n     // but wait a tick first to avoid one-time devMode \n     // unidirectional-data-flow-violation error \n     setTimeout (()   =>   this . seconds   =   ()   =>   this . timerComponent . seconds ,   0 ); \n   } \n\n   start ()   {   this . timerComponent . start ();   } \n   stop ()   {   this . timerComponent . stop ();   }  }    D\u00e1 um pouco mais de trabalho para recuperar a vis\u00e3o do componente filho na classe do componente pai.  Primeiro, voc\u00ca deve importar as refer\u00eancias para o decorador  ViewChild  e para a interface  AfterViewInit  do lifecycle hook:  1 import   {   AfterViewInit ,   ViewChild   }   from   '@angular/core' ;    A seguir, voc\u00ea injeta o componente filho  CountdownTimerComponent  na propriedade privada  timerComponent , usando o decorador  @ViewChild :  1\n2 @ ViewChild ( CountdownTimerComponent )  private   timerComponent :   CountdownTimerComponent ;    A vari\u00e1vel local  #timer  n\u00e3o existe mais no template do componente pai. Ao inv\u00e9s disso, os bot\u00f5es s\u00e3o associados, via binding de evento, aos m\u00e9todos  start()  e  stop()  do pr\u00f3prio componente pai. J\u00e1 a exibi\u00e7\u00e3o dos segundos da contagem regressiva \u00e9 associada, via interpola\u00e7\u00e3o, ao m\u00e9todo  seconds()  do pr\u00f3prio componente pai.  Esses m\u00e9todos acessam o componente filho diretamente, atrav\u00e9s da propriedade injetada  timerComponent .  O m\u00e9todo hook  ngAfterViewInit()  \u00e9 muito importante nesse exemplo.  O componente filho s\u00f3 est\u00e1 dispon\u00edvel ap\u00f3s o Angular exibir totalmente a vis\u00e3o do componente pai. A regra do fluxo de dados unidirecional do Angular impede que o componente pai utilize o componente filho no primeiro ciclo de atualiza\u00e7\u00e3o. Por isso, o m\u00e9todo  seconds()  retorna inicialmente 0 segundos.  Quando o Angular chama o m\u00e9todo  ngAfterViewInit() , \u00e9 muito tarde para atualizar a vis\u00e3o do componente pai para exibir os segundos da contagem regressiva. \u00c9 preciso aguardar um \"turno\" antes de atualizar os segundos.  Por isso, usamos o m\u00e9todo  setTimeout()  a fim de esperar um ciclo de atualiza\u00e7\u00e3o do Angular e, somente ent\u00e3o, redefinimos o m\u00e9todo  seconds()  para recuperar as atualiza\u00e7\u00f5es a partir do componente filho, injetado na propriedade  timerComponent .  Para ver esse exemplo funcionando, adicione o seguinte trecho html ao final do  app.component.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 <!-- ... -->  <!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->  < a   href = \"#parent-to-view-child\" > Parent calls  < i > ViewChild </ i > (\"Countdown  to Liftoff\") </ a >< br />  <!-- ... -->  <!-- inclua o seguinte trecho ao final do template -->  < hr >  < div   id = \"parent-to-view-child\" > \n   < app-countdown-view-child-parent ></ app-countdown-view-child-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >",
            "title": "Componente pai chamando um @ViewChild()"
        },
        {
            "location": "/exercicios/exercicio-10/#comunicacao-via-servico",
            "text": "Nessa forma de intera\u00e7\u00e3o, o componente pai e o componente filho compartilham um servi\u00e7o cuja interface permite a comunica\u00e7\u00e3o bidirecional.  O escopo da inst\u00e2ncia do servi\u00e7o deve abranger o componente pai e seus componentes filhos. Componentes foram dessa sub-\u00e1rvore de componentes n\u00e3o tem acesso ao servi\u00e7o e a suas comunica\u00e7\u00f5es.",
            "title": "Comunica\u00e7\u00e3o via servi\u00e7o"
        },
        {
            "location": "/exercicios/exercicio-10/#o-servico-missionservice",
            "text": "Nesse exemplo, o servi\u00e7o  MissionService  conectar o  MissionControlComponent  aos seus m\u00faltiplos componentes filhos  AstronautComponent .  Crie o servi\u00e7o  MissionService :  1 ng generate service mission --no-spec   Modifique o arquivo  src/app/mission.service.ts  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   {   Injectable   }   from   '@angular/core' ;  import   {   Subject   }      from   'rxjs' ;  @ Injectable ()  export   class   MissionService   { \n\n   // Observable string sources \n   private   missionAnnouncedSource   =   new   Subject < string > (); \n   private   missionConfirmedSource   =   new   Subject < string > (); \n\n   // Observable string streams \n   missionAnnounced$   =   this . missionAnnouncedSource . asObservable (); \n   missionConfirmed$   =   this . missionConfirmedSource . asObservable (); \n\n   // Service message commands \n   announceMission ( mission :   string )   { \n     this . missionAnnouncedSource . next ( mission ); \n   } \n\n   confirmMission ( astronaut :   string )   { \n     this . missionConfirmedSource . next ( astronaut ); \n   }  }    As propriedades  missionAnnounced$  e  missionConfirmed$  s\u00e3o do tipo  Observable  e representam os fluxos de eventos para miss\u00f5es anunciadas (isto \u00e9, miss\u00f5es criadas) e para miss\u00f5es confirmadas (isto \u00e9, quando um astronauta aceitou uma nova miss\u00e3o), respectivamente. O componente pai e os seus componentes filhos ir\u00e3o criar assinaturas para observar as mudan\u00e7as nesses fluxos de eventos.  Os m\u00e9todos  announceMission()  e  confirmMission()  s\u00e3o respons\u00e1veis por criar novas miss\u00f5es e confirmar um astronauta a uma miss\u00e3o, respectivamente, criando um novo evento ( next() ) no  Subject  apropriado.",
            "title": "O servi\u00e7o MissionService"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-missioncontrolcomponent",
            "text": "Crie agora o componente pai  MissionControlComponent :  1 ng generate component mission-control --no-spec --flat --inline-style  true  --inline-template  true    O componente pai  MissionControlComponent  prov\u00ea a inst\u00e2ncia do servi\u00e7o  MissionService , compartilhando-a com seus componentes filhos.  Por isso, inclua o servi\u00e7o no array  providers  do decorador  @Component :  1\n2\n3\n4\n5\n6\n7\n8 import   {   MissionService   }   from   './mission.service' ;   // <-- n\u00e3o esque\u00e7a do import  (...)  @ Component ({   \n   (...) \n   providers :   [ MissionService ]   // <-- inclua o servi\u00e7o \"MissionService\" no array \"providers\"  })    Modifique o template do componente  MissionControlComponent  para:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 template :   `    <h2>Mission Control</h2>    <button (click)=\"announce()\">Announce mission</button>    <app-astronaut *ngFor=\"let astronaut of astronauts\"      [astronaut]=\"astronaut\">    </app-astronaut>    <h3>History</h3>    <ul>      <li *ngFor=\"let event of history\">{{event}}</li>    </ul>  ` ,    Inclua as propriedades referenciadas no template:  1\n2\n3\n4\n5\n6 astronauts   =   [ 'Lovell' ,   'Swigert' ,   'Haise' ];  history :   string []   =   [];  missions   =   [ 'Fly to the moon!' , \n             'Fly to mars!' , \n             'Fly to Vegas!' ];  nextMission   =   0 ;    Inclua tamb\u00e9m o m\u00e9todo  announce() :  1\n2\n3\n4\n5\n6 announce ()   { \n   let   mission   =   this . missions [ this . nextMission ++ ]; \n   this . missionService . announceMission ( mission ); \n   this . history . push ( `Mission \" ${ mission } \" announced` ); \n   if   ( this . nextMission   >=   this . missions . length )   {   this . nextMission   =   0 ;   }  }    Por fim, crie uma assinatura na propriedade  missionConfirmed$  do servi\u00e7o  MissionService , invocando o m\u00e9todo  subscribe() .  A fun\u00e7\u00e3o callback ir\u00e1 receber o astronauta confirmado para a nova miss\u00e3o. Essa \u00e9 parte da comunica\u00e7\u00e3o na dire\u00e7\u00e3o \"do filho para o pai\".  1\n2\n3\n4\n5\n6 constructor ( private   missionService :   MissionService )   { \n   missionService . missionConfirmed$ . subscribe ( \n     astronaut   =>   { \n       this . history . push ( ` ${ astronaut }  confirmed the mission` ); \n     });  }    A vers\u00e3o final do componente  MissionControlComponent  \u00e9:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   MissionService   }       from   './mission.service' ;  @ Component ({ \n   selector :   'app-mission-control' , \n   template :   `      <h2>Mission Control</h2>      <button (click)=\"announce()\">Announce mission</button>      <app-astronaut *ngFor=\"let astronaut of astronauts\"        [astronaut]=\"astronaut\">      </app-astronaut>      <h3>History</h3>      <ul>        <li *ngFor=\"let event of history\">{{event}}</li>      </ul>    ` , \n   styles :   [], \n   providers :   [ MissionService ]  })  export   class   MissionControlComponent   implements   OnInit   { \n\n   astronauts   =   [ 'Lovell' ,   'Swigert' ,   'Haise' ]; \n   history :   string []   =   []; \n   missions   =   [ 'Fly to the moon!' , \n               'Fly to mars!' , \n               'Fly to Vegas!' ]; \n   nextMission   =   0 ; \n\n   constructor ( private   missionService :   MissionService )   { \n     missionService . missionConfirmed$ . subscribe ( \n       astronaut   =>   { \n         this . history . push ( ` ${ astronaut }  confirmed the mission` ); \n       }); \n   } \n\n   ngOnInit ()   { \n   } \n\n   announce ()   { \n     let   mission   =   this . missions [ this . nextMission ++ ]; \n     this . missionService . announceMission ( mission ); \n     this . history . push ( `Mission \" ${ mission } \" announced` ); \n     if   ( this . nextMission   >=   this . missions . length )   {   this . nextMission   =   0 ;   } \n   }  }",
            "title": "O componente MissionControlComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#o-componente-astronautcomponent",
            "text": "Crie agora o componente  AstronautComponent :  1 ng generate component astronaut --no-spec --flat --inline-style  true  --inline-template  true    O componente  AstronautComponent  tamb\u00e9m injeta o servi\u00e7o  MissionService  no seu construtor, como a seguir. A diferen\u00e7a \u00e9 que cada inst\u00e2ncia do  AstronautComponent  \u00e9 tamb\u00e9m um filho do componente pai  MissionControlComponent  e, portanto, ir\u00e1 injetar a inst\u00e2ncia do servi\u00e7o  MissionService  criada pelo componente pai. Por isso, n\u00e3o \u00e9 necess\u00e1rio adicion\u00e1-lo ao array  providers  do decorador  @Component  do  AstronautComponent .  1\n2\n3\n4\n5 import   {   MissionService   }   from   './mission.service' ;   // <!-- n\u00e3o esque\u00e7a do import  constructor ( \n   private   missionService :   MissionService ,   // <!-- injete o servi\u00e7o   )   {}    Modifique o template do  AstronautComponent  como a seguir:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 template :   `    <p>      {{astronaut}}: <strong>{{mission}}</strong>      <button        (click)=\"confirm()\"        [disabled]=\"!announced || confirmed\">        Confirm      </button>    </p>  ` ,    Crie as propriedades referenciadas:  1\n2\n3\n4 @ Input ()   astronaut :   string ;   // <!-- importe o s\u00edmbolo \"Input\" da biblioteca \"@angular/core\"  mission   =   '<no mission announced>' ;  confirmed   =   false ;  announced   =   false ;    O m\u00e9todo  confirm()  ir\u00e1 usar o servi\u00e7o  MissionService  para confirmar o astronauta \u00e0 miss\u00e3o:  1\n2\n3\n4 confirm ()   { \n   this . confirmed   =   true ; \n   this . missionService . confirmMission ( this . astronaut );  }    Por fim, modifique o construtor do componente para criar uma assinatura \u00e0 propriedade  missionAnnounced$  do servi\u00e7o  MissionService .  1\n2\n3\n4\n5\n6\n7\n8 constructor ( private   missionService :   MissionService )   { \n   this . subscription   =   missionService . missionAnnounced$ . subscribe ( \n     mission   =>   { \n       this . mission   =   mission ; \n       this . announced   =   true ; \n       this . confirmed   =   false ; \n   });  }    Note que a assinatura captura o resultado do m\u00e9todo  subscribe()  e guarda sua refer\u00eancia na propriedade  subscription  do componente.  Essa refer\u00eancia ser\u00e1 utilizada no m\u00e9todo hook  ngOnDestroy()  do componente para cancelar a assinatura quando o componente \u00e9 destru\u00eddo. Essa \u00e9 uma forma de prevenir  memory leaks .  Isso n\u00e3o foi feito no componente pai  MissionControlComponent  porque, como pai, ele controla o ciclo de vida do pr\u00f3prio servi\u00e7o  MissionService .  Crie, ent\u00e3o, a nova propriedade  subscription :  1\n2\n3 import   {   Subscription   }     from   'rxjs' ;   // <-- n\u00e3o esque\u00e7a do import  subscription :   Subscription ;    Por fim, crie o m\u00e9todo hook  ngOnDestroy()  para cancelar a assinatura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 import   {   OnDestroy   }   from   '@angular/core' ;   // <-- inclua o import  (...)  export   class   AstronautComponent   implements   OnDestroy   {   // <!-- inclua a interface \"OnDestroy\" na assinatura da classe \n\n   (...) \n\n   ngOnDestroy ()   { \n     // prevent memory leak when component destroyed \n     this . subscription . unsubscribe (); \n   }  }    Segue a vers\u00e3o final do componente:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   {   MissionService   }   from   './mission.service' ;   // <!-- n\u00e3o esque\u00e7a do import  import   {   Component ,   Input ,   OnInit ,   OnDestroy   }   from   '@angular/core' ;  import   {   Subscription   }     from   'rxjs' ;   // <-- n\u00e3o esque\u00e7a do import  @ Component ({ \n   selector :   'app-astronaut' , \n   template :   `      <p>        {{astronaut}}: <strong>{{mission}}</strong>        <button          (click)=\"confirm()\"          [disabled]=\"!announced || confirmed\">          Confirm        </button>      </p>    ` , \n   styles :   []  })  export   class   AstronautComponent   implements   OnInit ,   OnDestroy   { \n\n   @ Input ()   astronaut :   string ; \n   mission   =   '<no mission announced>' ; \n   confirmed   =   false ; \n   announced   =   false ; \n   subscription :   Subscription ; \n\n   constructor ( private   missionService :   MissionService )   { \n     this . subscription   =   missionService . missionAnnounced$ . subscribe ( \n       mission   =>   { \n         this . mission   =   mission ; \n         this . announced   =   true ; \n         this . confirmed   =   false ; \n     }); \n   } \n\n   ngOnInit ()   { \n   } \n\n   ngOnDestroy ()   { \n     // prevent memory leak when component destroyed \n     this . subscription . unsubscribe (); \n   } \n\n   confirm ()   { \n     this . confirmed   =   true ; \n     this . missionService . confirmMission ( this . astronaut ); \n   }  }    Para visualizar o resultado, adicione o seguinte trecho html ao final do  app.component.html :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 <!-- ... -->  <!-- inclua um novo elemento \"a\" abaixo dos j\u00e1 existentes -->  < a   href = \"#bidirectional-service\" > Parent and children communicate via a service (\"Mission Control\") </ a >< br />  <!-- ... -->  <!-- inclua o seguinte trecho ao final do template -->  < hr >  < div   id = \"bidirectional-service\" > \n   < app-mission-control ></ app-mission-control >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >    O conte\u00fado completo do arquivo  app.component.html  deve estar como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52 < h1   id = \"top\" > Component Communication Cookbook </ h1 >  < a   href = \"#parent-to-child\" > Pass data from parent to child with input binding (\"Heroes\") </ a >< br />  < a   href = \"#parent-to-child-setter\" > Intercept input property changes with a setter (\"Master\") </ a >< br />  < a   href = \"#parent-to-child-on-changes\" > Intercept input property changes with  < i > ngOnChanges </ i >  (\"Source code version\") </ a >< br />  < a   href = \"#child-to-parent\" > Parent listens for child event (\"Colonize Universe\") </ a >< br />  < a   href = \"#parent-to-child-local-var\" > Parent to child via  < i > local variable </ i > (\"Countdown to Liftoff\") </ a >< br />  < a   href = \"#parent-to-view-child\" > Parent calls  < i > ViewChild </ i > (\"Countdown  to Liftoff\") </ a >< br />  < a   href = \"#bidirectional-service\" > Parent and children communicate via a service (\"Mission Control\") </ a >< br />  < div   id = \"parent-to-child\" > \n   < app-hero-parent ></ app-hero-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"parent-to-child-setter\" > \n   < app-name-parent ></ app-name-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"parent-to-child-on-changes\" > \n   < app-version-parent ></ app-version-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"child-to-parent\" > \n   < app-vote-taker ></ app-vote-taker >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"parent-to-child-local-var\" > \n   < app-countdown-local-var-parent ></ app-countdown-local-var-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"parent-to-view-child\" > \n   < app-countdown-view-child-parent ></ app-countdown-view-child-parent >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >  < div   id = \"bidirectional-service\" > \n   < app-mission-control ></ app-mission-control >  </ div >  < a   href = \"#top\"   class = \"to-top\" > Back to Top </ a >  < hr >    O log do hist\u00f3rico mostra que a mensagem viaja nas duas dire\u00e7\u00f5es entre o componente pai  MissionControlComponent  e os componentes filhos  AstronautComponent , atrav\u00e9s do servi\u00e7o:",
            "title": "O componente AstronautComponent"
        },
        {
            "location": "/exercicios/exercicio-10/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 exercicio-component-interaction/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- astronaut.component.ts\n|  |  |-- countdown-local-var-parent.component.ts\n|  |  |-- countdown-timer.component.ts\n|  |  |-- countdown-view-child-parent.component.ts\n|  |  |-- hero-child.component.ts\n|  |  |-- hero-parent.component.ts\n|  |  |-- hero.ts\n|  |  |-- mission-control.component.ts\n|  |  |-- mission.service.ts\n|  |  |-- name-child.component.ts\n|  |  |-- name-parent.component.ts\n|  |  |-- version-child.component.ts\n|  |  |-- version-parent.component.ts\n|  |  |-- vote-taker.component.ts\n|  |  |-- voter.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-10/#resumo",
            "text": "Adicionamos as depend\u00eancias necess\u00e1rias para usar HTTP.  Refatoramos o  HeroService  para recuperar os her\u00f3is a partir de uma API.  Adicionamos os m\u00e9todos  post() ,  put()  e  delete()  ao  HeroService .  Atualizamos os componentes para permitir a cria\u00e7\u00e3o, edi\u00e7\u00e3o e dele\u00e7\u00e3o de her\u00f3is.  Configuramos uma API em mem\u00f3ria.  Aprendemos a usar  Observables .",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-10/#proximo-passo",
            "text": "Exerc\u00edcio 11",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-11/",
            "text": "Exerc\u00edcio 11\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nCriar a nossa pr\u00f3pria diretiva estrutural\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n30 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-diretivas-estruturais\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-diretivas-estruturais\n\ncd\n exercicio-diretivas-estruturais\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nEscrevendo uma diretiva estrutural\n\u00b6\n\n\nNessa se\u00e7\u00e3o, voc\u00ea ir\u00e1 escrever a diretiva estrutural \nUnlessDirective\n, que faz o oposto da diretiva \nNgIf\n. A \nNgIf\n exibe o conte\u00fado do template quando a condi\u00e7\u00e3o \u00e9 \ntrue\n. A diretiva \nUnlessDirective\n ir\u00e1 exibir o conte\u00fado quando a condi\u00e7\u00e3o \u00e9 \nfalse\n.\n\n\n1\n<\np\n \n*\nappUnless\n=\n\"condition\"\n>\nMostre esse texto somente se a condi\u00e7\u00e3o for falsa.\n</\np\n>\n\n\n\n\n\n\n\nCriar uma diretiva \u00e9 similar a criar um componente.\n\n\n\n\nImporte o decorador \nDirective\n (ao inv\u00e9s do decorador \nComponent\n).\n\n\nImporte os s\u00edmbolos \nInput\n, \nTemplateRef\n, e \nViewContainerRef\n; voc\u00ea ir\u00e1 precisar deles para escrever uma diretiva estrutural.\n\n\nAplique o decorador \u00e0 classe da diretiva.\n\n\nEspecifique o seletor que ir\u00e1 identificar a diretiva.\n\n\n\n\nVoc\u00ea pode come\u00e7ar como abaixo:\n\n\n1\n2\n3\n4\n5\nimport\n \n{\n \nDirective\n,\n \nInput\n,\n \nTemplateRef\n,\n \nViewContainerRef\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nDirective\n({\n \nselector\n:\n \n'[appUnless]'\n})\n\n\nexport\n \nclass\n \nUnlessDirective\n \n{\n\n\n}\n\n\n\n\n\n\n\nO seletor da diretiva \u00e9 tipicamente o nome da diretiva entre colchetes (\n[appUnless]\n, por exemplo). Os colchetes indicam que o \nseletor CSS\n \u00e9 um \natributo\n HTML (ao inv\u00e9s de um elemento HTML).\n\n\nO nome da diretiva deve seguir o padr\u00e3o \nlowerCamelCase\n e come\u00e7ar com um prefixo. N\u00e3o use o prefixo \nng\n, pois ele j\u00e1 pertence ao Angular. Escolha um prefixo curto e que se encaixe com voc\u00ea ou com sua empresa. Nesse exemplo, o prefixo \u00e9 \napp\n.\n\n\nO nome da diretiva termina com \nDirective\n, seguinte o guia de estilos do Angular.\n\n\nTemplateRef\n e \nViewContainerRef\n\u00b6\n\n\nA nossa diretiva estrutural que estamos escrevendo ir\u00e1 criar uma vis\u00e3o (a partir do \n<ng-template>\n gerado pelo Angular) e inserir essa vis\u00e3o em um container de vis\u00e3o adjacente ao elemento host (no nosso exemplo, o elemento host \u00e9 o \n<p>\n).\n\n\nVoc\u00ea adquire o conte\u00fado do \n<ng-template>\n a partir de um \nTemplateRef\n e acessa o container de vis\u00e3o a partir de um \nViewContainerRef\n.\n\n\nOs dois s\u00e3o injetados no construtor da diretiva como propriedades privadas da classe.\n\n\n1\n2\n3\nconstructor\n(\n\n  \nprivate\n \ntemplateRef\n:\n \nTemplateRef\n<\nany\n>\n,\n\n  \nprivate\n \nviewContainer\n:\n \nViewContainerRef\n)\n \n{\n \n}\n\n\n\n\n\n\n\nA propriedade \nappUnless\n\u00b6\n\n\nO elemento host espera fazer um binding com os valores \ntrue\n/\nfalse\n na diretiva \n[appUnless]\n. Isso significa que a diretiva precisa de uma propriedade \nappUnless\n, decorada com \n@Input\n.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n@\nInput\n()\n \nset\n \nappUnless\n(\ncondition\n:\n \nboolean\n)\n \n{\n\n  \nif\n \n(\n!\ncondition\n \n&&\n \n!\nthis\n.\nhasView\n)\n \n{\n\n    \nthis\n.\nviewContainer\n.\ncreateEmbeddedView\n(\nthis\n.\ntemplateRef\n);\n\n    \nthis\n.\nhasView\n \n=\n \ntrue\n;\n\n  \n}\n \nelse\n \nif\n \n(\ncondition\n \n&&\n \nthis\n.\nhasView\n)\n \n{\n\n    \nthis\n.\nviewContainer\n.\nclear\n();\n\n    \nthis\n.\nhasView\n \n=\n \nfalse\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nO Angular seta a propriedade \nappUnless\n toda vez que a condi\u00e7\u00e3o \u00e9 modificada. Como precisamos executar uma l\u00f3gica quando h\u00e1 uma mudan\u00e7a, criamos um m\u00e9todo setter para a propriedade \nappUnless\n.\n\n\n\n\nSe a condi\u00e7\u00e3o \u00e9 falsa e a vis\u00e3o n\u00e3o foi criada anteriormente, a diretiva cria a vis\u00e3o a partir do template e a adiciona ao container de vis\u00e3o.\n\n\nSe a condi\u00e7\u00e3o \u00e9 verdadeira e a vis\u00e3o est\u00e1 sendo exibida, a diretiva limpa o container de vis\u00e3o, o que tamb\u00e9m destr\u00f3i a vis\u00e3o criada anteriormente.\n\n\n\n\nNingu\u00e9m l\u00ea a propriedade \nappUnless\n, por isso, n\u00e3o precisamos de um m\u00e9todo getter.\n\n\nO c\u00f3digo completo da diretiva \u00e9 como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \n{\n \nDirective\n,\n \nInput\n,\n \nTemplateRef\n,\n \nViewContainerRef\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n/**\n\n\n * Adiciona o conte\u00fado do template ao DOM somente se a condi\u00e7\u00e3o for falsa.\n\n\n */\n\n\n@\nDirective\n({\n \nselector\n:\n \n'[appUnless]'\n})\n\n\nexport\n \nclass\n \nUnlessDirective\n \n{\n\n  \nprivate\n \nhasView\n \n=\n \nfalse\n;\n\n\n  \nconstructor\n(\n\n    \nprivate\n \ntemplateRef\n:\n \nTemplateRef\n<\nany\n>\n,\n\n    \nprivate\n \nviewContainer\n:\n \nViewContainerRef\n)\n \n{\n \n}\n\n\n  \n@\nInput\n()\n \nset\n \nappUnless\n(\ncondition\n:\n \nboolean\n)\n \n{\n\n    \nif\n \n(\n!\ncondition\n \n&&\n \n!\nthis\n.\nhasView\n)\n \n{\n\n      \nthis\n.\nviewContainer\n.\ncreateEmbeddedView\n(\nthis\n.\ntemplateRef\n);\n\n      \nthis\n.\nhasView\n \n=\n \ntrue\n;\n\n    \n}\n \nelse\n \nif\n \n(\ncondition\n \n&&\n \nthis\n.\nhasView\n)\n \n{\n\n      \nthis\n.\nviewContainer\n.\nclear\n();\n\n      \nthis\n.\nhasView\n \n=\n \nfalse\n;\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nAdicione essa diretiva ao array \ndeclarations\n do \nAppModule\n.\n\n\nE, ent\u00e3o, crie um template HTML para test\u00e1-la.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n<\nh2\n \nid\n=\n\"appUnless\"\n>\nUnlessDirective\n</\nh2\n>\n\n\n<\np\n>\n\n  A condi\u00e7\u00e3o atual \u00e9\n  \n<\nspan\n \n[\nngClass\n]=\"{\n \n'\na\n'\n:\n \n!\ncondition\n,\n \n'\nb\n'\n:\n \ncondition\n,\n \n'\nunless\n'\n:\n \ntrue\n \n}\"\n>\n{{condition}}\n</\nspan\n>\n.\n  \n<\nbutton\n\n    \n(\nclick\n)=\"\ncondition \n=\n \n!condition\"\n\n    \n[\nngClass\n]\n \n=\n \n\"{\n \n'\na\n'\n:\n \ncondition\n,\n \n'\nb\n'\n:\n \n!\ncondition\n \n}\"\n \n>\n\n    Alterna a condi\u00e7\u00e3o para {{condition ? 'false' : 'true'}}\n  \n</\nbutton\n>\n\n\n</\np\n>\n\n\n<\np\n \n*\nappUnless\n=\n\"condition\"\n \nclass\n=\n\"unless a\"\n>\n\n  (A) Esse par\u00e1grafo \u00e9 mostrado pois a condi\u00e7\u00e3o \u00e9 \n<\nstrong\n>\nfalsa\n</\nstrong\n>\n.\n\n</\np\n>\n\n\n\n<\np\n \n*\nappUnless\n=\n\"!condition\"\n \nclass\n=\n\"unless b\"\n>\n\n  (B) Embora a condi\u00e7\u00e3o seja \n<\nstrong\n>\nverdadeira\n</\nstrong\n>\n, esse par\u00e1grafo \u00e9 mostrado pois o \n<\nem\n>\nappUnless\n</\nem\n>\n \u00e9 \n<\nstrong\n>\nfalsa\n</\nstrong\n>\n.\n\n</\np\n>\n\n\n\n\n\n\n\nQuando a condi\u00e7\u00e3o \u00e9 \nfalsa\n, o par\u00e1grafo (A) \u00e9 exibido e o par\u00e1grafo (B) desaparece.\n\n\nQuando a condi\u00e7\u00e3o \u00e9 \nverdadeira\n, o par\u00e1grafo (A) \u00e9 removido e o par\u00e1grafo (B) aparece.\n\n\nAdicione o CSS abaixo no componente principal (\napp.component.css\n):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\nbutton\n \n{\n\n  \nmin-width\n:\n \n100\npx\n;\n\n  \nfont-size\n:\n \n100\n%\n;\n\n\n}\n\n\n\n.\nbox\n \n{\n\n  \nborder\n:\n \n1\npx\n \nsolid\n \ngray\n;\n\n  \nmax-width\n:\n \n600\npx\n;\n\n  \npadding\n:\n \n4\npx\n;\n\n\n}\n\n\n.\nchoices\n \n{\n\n  \nfont-style\n:\n \nitalic\n;\n\n\n}\n\n\n\ncode\n,\n \n.\ncode\n \n{\n\n  \nbackground-color\n:\n \n#eee\n;\n\n  \ncolor\n:\n \nblack\n;\n\n  \nfont-family\n:\n \nCourier\n,\n \nsans-serif\n;\n\n  \nfont-size\n:\n \n85\n%\n;\n\n\n}\n\n\n\ndiv\n.\ncode\n \n{\n\n  \nwidth\n:\n \n400\npx\n;\n\n\n}\n\n\n\n.\nheroic\n \n{\n\n  \nfont-size\n:\n \n150\n%\n;\n\n  \nfont-weight\n:\n \nbold\n;\n\n\n}\n\n\n\nhr\n \n{\n\n  \nmargin\n:\n \n40\npx\n \n0\n\n\n}\n\n\n\n.\nodd\n \n{\n\n  \nbackground-color\n:\n  \npalegoldenrod\n;\n\n\n}\n\n\n\ntd\n,\n \nth\n \n{\n\n  \ntext-align\n:\n \nleft\n;\n\n  \nvertical-align\n:\n \ntop\n;\n\n\n}\n\n\n\np\n \nspan\n \n{\n \ncolor\n:\n \nred\n;\n \nfont-size\n:\n \n70\n%\n;\n \n}\n\n\n\n.\nunless\n \n{\n\n  \nborder\n:\n \n2\npx\n \nsolid\n;\n\n  \npadding\n:\n \n6\npx\n;\n\n\n}\n\n\n\np\n.\nunless\n \n{\n\n  \nwidth\n:\n \n500\npx\n;\n\n\n}\n\n\n\nbutton\n.\na\n,\n \nspan\n.\na\n,\n \n.\nunless\n.\na\n \n{\n\n  \ncolor\n:\n \nred\n;\n\n  \nborder-color\n:\n \ngold\n;\n\n  \nbackground-color\n:\n \nyellow\n;\n\n  \nfont-size\n:\n \n100\n%\n;\n\n\n}\n\n\n\nbutton\n.\nb\n,\n \nspan\n.\nb\n,\n \n.\nunless\n.\nb\n \n{\n\n  \ncolor\n:\n \nblack\n;\n\n  \nborder-color\n:\n \ngreen\n;\n\n  \nbackground-color\n:\n \nlightgreen\n;\n\n  \nfont-size\n:\n \n100\n%\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nexercicio-diretivas-estruturais/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- unless.directive.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\nAprendemos a criar uma diretiva estrutural customizada.\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 12",
            "title": "11 - Diretivas Estruturais"
        },
        {
            "location": "/exercicios/exercicio-11/#exercicio-11",
            "text": "",
            "title": "Exerc\u00edcio 11"
        },
        {
            "location": "/exercicios/exercicio-11/#objetivos",
            "text": "Criar a nossa pr\u00f3pria diretiva estrutural",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-11/#duracao",
            "text": "30 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-11/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-diretivas-estruturais  e deixe-a rodando:  1\n2\n3 ng new exercicio-diretivas-estruturais cd  exercicio-diretivas-estruturais\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-11/#escrevendo-uma-diretiva-estrutural",
            "text": "Nessa se\u00e7\u00e3o, voc\u00ea ir\u00e1 escrever a diretiva estrutural  UnlessDirective , que faz o oposto da diretiva  NgIf . A  NgIf  exibe o conte\u00fado do template quando a condi\u00e7\u00e3o \u00e9  true . A diretiva  UnlessDirective  ir\u00e1 exibir o conte\u00fado quando a condi\u00e7\u00e3o \u00e9  false .  1 < p   * appUnless = \"condition\" > Mostre esse texto somente se a condi\u00e7\u00e3o for falsa. </ p >    Criar uma diretiva \u00e9 similar a criar um componente.   Importe o decorador  Directive  (ao inv\u00e9s do decorador  Component ).  Importe os s\u00edmbolos  Input ,  TemplateRef , e  ViewContainerRef ; voc\u00ea ir\u00e1 precisar deles para escrever uma diretiva estrutural.  Aplique o decorador \u00e0 classe da diretiva.  Especifique o seletor que ir\u00e1 identificar a diretiva.   Voc\u00ea pode come\u00e7ar como abaixo:  1\n2\n3\n4\n5 import   {   Directive ,   Input ,   TemplateRef ,   ViewContainerRef   }   from   '@angular/core' ;  @ Directive ({   selector :   '[appUnless]' })  export   class   UnlessDirective   {  }    O seletor da diretiva \u00e9 tipicamente o nome da diretiva entre colchetes ( [appUnless] , por exemplo). Os colchetes indicam que o  seletor CSS  \u00e9 um  atributo  HTML (ao inv\u00e9s de um elemento HTML).  O nome da diretiva deve seguir o padr\u00e3o  lowerCamelCase  e come\u00e7ar com um prefixo. N\u00e3o use o prefixo  ng , pois ele j\u00e1 pertence ao Angular. Escolha um prefixo curto e que se encaixe com voc\u00ea ou com sua empresa. Nesse exemplo, o prefixo \u00e9  app .  O nome da diretiva termina com  Directive , seguinte o guia de estilos do Angular.",
            "title": "Escrevendo uma diretiva estrutural"
        },
        {
            "location": "/exercicios/exercicio-11/#templateref-e-viewcontainerref",
            "text": "A nossa diretiva estrutural que estamos escrevendo ir\u00e1 criar uma vis\u00e3o (a partir do  <ng-template>  gerado pelo Angular) e inserir essa vis\u00e3o em um container de vis\u00e3o adjacente ao elemento host (no nosso exemplo, o elemento host \u00e9 o  <p> ).  Voc\u00ea adquire o conte\u00fado do  <ng-template>  a partir de um  TemplateRef  e acessa o container de vis\u00e3o a partir de um  ViewContainerRef .  Os dois s\u00e3o injetados no construtor da diretiva como propriedades privadas da classe.  1\n2\n3 constructor ( \n   private   templateRef :   TemplateRef < any > , \n   private   viewContainer :   ViewContainerRef )   {   }",
            "title": "TemplateRef e ViewContainerRef"
        },
        {
            "location": "/exercicios/exercicio-11/#a-propriedade-appunless",
            "text": "O elemento host espera fazer um binding com os valores  true / false  na diretiva  [appUnless] . Isso significa que a diretiva precisa de uma propriedade  appUnless , decorada com  @Input .  1\n2\n3\n4\n5\n6\n7\n8\n9 @ Input ()   set   appUnless ( condition :   boolean )   { \n   if   ( ! condition   &&   ! this . hasView )   { \n     this . viewContainer . createEmbeddedView ( this . templateRef ); \n     this . hasView   =   true ; \n   }   else   if   ( condition   &&   this . hasView )   { \n     this . viewContainer . clear (); \n     this . hasView   =   false ; \n   }  }    O Angular seta a propriedade  appUnless  toda vez que a condi\u00e7\u00e3o \u00e9 modificada. Como precisamos executar uma l\u00f3gica quando h\u00e1 uma mudan\u00e7a, criamos um m\u00e9todo setter para a propriedade  appUnless .   Se a condi\u00e7\u00e3o \u00e9 falsa e a vis\u00e3o n\u00e3o foi criada anteriormente, a diretiva cria a vis\u00e3o a partir do template e a adiciona ao container de vis\u00e3o.  Se a condi\u00e7\u00e3o \u00e9 verdadeira e a vis\u00e3o est\u00e1 sendo exibida, a diretiva limpa o container de vis\u00e3o, o que tamb\u00e9m destr\u00f3i a vis\u00e3o criada anteriormente.   Ningu\u00e9m l\u00ea a propriedade  appUnless , por isso, n\u00e3o precisamos de um m\u00e9todo getter.  O c\u00f3digo completo da diretiva \u00e9 como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   {   Directive ,   Input ,   TemplateRef ,   ViewContainerRef   }   from   '@angular/core' ;  /**   * Adiciona o conte\u00fado do template ao DOM somente se a condi\u00e7\u00e3o for falsa.   */  @ Directive ({   selector :   '[appUnless]' })  export   class   UnlessDirective   { \n   private   hasView   =   false ; \n\n   constructor ( \n     private   templateRef :   TemplateRef < any > , \n     private   viewContainer :   ViewContainerRef )   {   } \n\n   @ Input ()   set   appUnless ( condition :   boolean )   { \n     if   ( ! condition   &&   ! this . hasView )   { \n       this . viewContainer . createEmbeddedView ( this . templateRef ); \n       this . hasView   =   true ; \n     }   else   if   ( condition   &&   this . hasView )   { \n       this . viewContainer . clear (); \n       this . hasView   =   false ; \n     } \n   }  }    Adicione essa diretiva ao array  declarations  do  AppModule .  E, ent\u00e3o, crie um template HTML para test\u00e1-la.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 < h2   id = \"appUnless\" > UnlessDirective </ h2 >  < p > \n  A condi\u00e7\u00e3o atual \u00e9\n   < span   [ ngClass ]=\"{   ' a ' :   ! condition ,   ' b ' :   condition ,   ' unless ' :   true   }\" > {{condition}} </ span > .\n   < button \n     ( click )=\" condition  =   !condition\" \n     [ ngClass ]   =   \"{   ' a ' :   condition ,   ' b ' :   ! condition   }\"   > \n    Alterna a condi\u00e7\u00e3o para {{condition ? 'false' : 'true'}}\n   </ button >  </ p >  < p   * appUnless = \"condition\"   class = \"unless a\" > \n  (A) Esse par\u00e1grafo \u00e9 mostrado pois a condi\u00e7\u00e3o \u00e9  < strong > falsa </ strong > . </ p >  < p   * appUnless = \"!condition\"   class = \"unless b\" > \n  (B) Embora a condi\u00e7\u00e3o seja  < strong > verdadeira </ strong > , esse par\u00e1grafo \u00e9 mostrado pois o  < em > appUnless </ em >  \u00e9  < strong > falsa </ strong > . </ p >    Quando a condi\u00e7\u00e3o \u00e9  falsa , o par\u00e1grafo (A) \u00e9 exibido e o par\u00e1grafo (B) desaparece.  Quando a condi\u00e7\u00e3o \u00e9  verdadeira , o par\u00e1grafo (A) \u00e9 removido e o par\u00e1grafo (B) aparece.  Adicione o CSS abaixo no componente principal ( app.component.css ):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67 button   { \n   min-width :   100 px ; \n   font-size :   100 % ;  }  . box   { \n   border :   1 px   solid   gray ; \n   max-width :   600 px ; \n   padding :   4 px ;  }  . choices   { \n   font-style :   italic ;  }  code ,   . code   { \n   background-color :   #eee ; \n   color :   black ; \n   font-family :   Courier ,   sans-serif ; \n   font-size :   85 % ;  }  div . code   { \n   width :   400 px ;  }  . heroic   { \n   font-size :   150 % ; \n   font-weight :   bold ;  }  hr   { \n   margin :   40 px   0  }  . odd   { \n   background-color :    palegoldenrod ;  }  td ,   th   { \n   text-align :   left ; \n   vertical-align :   top ;  }  p   span   {   color :   red ;   font-size :   70 % ;   }  . unless   { \n   border :   2 px   solid ; \n   padding :   6 px ;  }  p . unless   { \n   width :   500 px ;  }  button . a ,   span . a ,   . unless . a   { \n   color :   red ; \n   border-color :   gold ; \n   background-color :   yellow ; \n   font-size :   100 % ;  }  button . b ,   span . b ,   . unless . b   { \n   color :   black ; \n   border-color :   green ; \n   background-color :   lightgreen ; \n   font-size :   100 % ;  }",
            "title": "A propriedade appUnless"
        },
        {
            "location": "/exercicios/exercicio-11/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 exercicio-diretivas-estruturais/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- unless.directive.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-11/#resumo",
            "text": "Aprendemos a criar uma diretiva estrutural customizada.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-11/#proximo-passo",
            "text": "Exerc\u00edcio 12",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-12/",
            "text": "Exerc\u00edcio 12\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nCriar a nossa pr\u00f3pria diretiva de atributo\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-attribute-directives\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-attribute-directives\n\ncd\n exercicio-attribute-directives\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nConstruindo uma diretiva de atributo\n\u00b6\n\n\nDiretivas de atributos s\u00e3o usadas como atributos de elementos.\n\n\nA diretiva \nNgStyle\n, por exemplo, pode mudar v\u00e1rios estilos CSS de um elemento ao mesmo tempo.\n\n\nMinimamente, uma diretiva de atributo \u00e9 uma classe anotada com o decorador \n@Directive\n, que especifica o seletor que identifica a diretiva. A classe deve implementar o comportamento desejado para a diretiva.\n\n\nNesse exerc\u00edcio, vamos construir uma diretiva de atributo simples, chamada \nappHighlight\n, que modifica a cor de background de um elemento quando o usu\u00e1rio passa o mouse por cima desse elemento. \n\n\nVoc\u00ea pode aplicar a diretiva como a seguir:\n\n\n1\n<\np\n \nappHighlight\n>\nMarque me!\n</\np\n>\n\n\n\n\n\n\n\nEscrevendo a diretiva\n\u00b6\n\n\nCrie o arquivo \nsrc/app/highlight.directive.ts\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \n{\n \nDirective\n,\n \nElementRef\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nDirective\n({\n \nselector\n:\n \n'[appHighlight]'\n \n})\n\n\nexport\n \nclass\n \nHighlightDirective\n \n{\n\n    \nconstructor\n(\nel\n:\n \nElementRef\n)\n \n{\n\n       \nel\n.\nnativeElement\n.\nstyle\n.\nbackgroundColor\n \n=\n \n'yellow'\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nImportamos os seguintes s\u00edmbolos da biblioteca Angular core:\n\n\n\n\nDirective\n prov\u00ea a funcionalidade do decorador \n@Directive\n.\n\n\nElementRef\n \u00e9 injetado no construtor da diretiva, para que tenhamos acesso ao elemento DOM.\n\n\nInput\n permite o binding de propriedade na diretiva.\n\n\n\n\nA propriedade \nselector\n do decorador \n@Directive\n identifica a diretiva no template HTML. O seletor utiliza colchetes para indicar que a diretiva \u00e9 um atributo. Dessa forma, o seletor \n[appHighlight]\n indica que o Angular deve localizar todos os elementos no template que t\u00eam um atributo com nome \nappHighlight\n.\n\n\nPor que n\u00e3o simplesmente cham\u00e1-la \nhighlight\n?\n\u00b6\n\n\nApesar de o nome \nhighlight\n funcionar e ser mais conciso do que o nome \nappHighlight\n, uma boa pr\u00e1tica \u00e9 sempre usar um prefixo no nome da diretiva. Isso garante que o nome da diretiva n\u00e3o ir\u00e1 conflitar com nomes de atributos padr\u00f5es HTML ou at\u00e9 mesmo com nomes de outras diretivas customizadas.\n\n\nTenha cuidado em n\u00e3o usar o prefixo \nng\n, porque esse \u00e9 o prefixo reservado para o pr\u00f3prio Angular. Para o nosso exemplo, o prefixo \napp\n \u00e9 suficiente para distinguir a nossa diretiva customizada.\n\n\nAbaixo do decorador \n@Directive\n, vem a classe propriamente dita da diretiva, chamada \nHighlightDirective\n, que cont\u00e9m a l\u00f3gica dessa diretiva. Para torn\u00e1-la acess\u00edvel a partir de outros componentes, exportamos a classe \nHighlightDirective\n.\n\n\nO Angular cria uma nova inst\u00e2ncia da diretiva para cada elemento que a utiliza, injetando o \nElementRef\n no construtor da classe. O \nElementRef\n \u00e9 um servi\u00e7o que permite o acesso direto ao elemento DOM, a partir da sua propriedade \nnativeElement\n.\n\n\nUsando a diretiva de atributo\n\u00b6\n\n\nPara usar a nova diretiva \nHighlightDirective\n, crie um template e aplique a diretiva como um atributo de um elemento \n<p>\n. Em termos do Angular, o elemento \n<p>\n \u00e9 o \nhost\n da diretiva.\n\n\nEscreva, ent\u00e3o, o seguinte template no arquivo \napp.component.html\n:\n\n\n1\n2\n<\nh1\n>\nMinha primeira Diretiva de Atributo\n</\nh1\n>\n\n\n<\np\n \nappHighlight\n>\nMarque me!\n</\np\n>\n\n\n\n\n\n\n\nReferencie o template no \nAppComponent\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-root'\n,\n\n  \ntemplateUrl\n:\n \n'./app.component.html'\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ncolor\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\n\nEm seguida, modifique o \nAppModule\n para incluir a classe \nHighlightDirective\n no array \ndeclarations\n do decorador \nNgModule\n. Dessa forma, o Angular ir\u00e1 reconhecer a diretiva quando encontrar um atributo \nappHighlight\n em um template HTML.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \n{\n \nNgModule\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHighlightDirective\n \n}\n \nfrom\n \n'./highlight.directive'\n;\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n \nBrowserModule\n \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHighlightDirective\n\n  \n],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nAgora, quando a aplica\u00e7\u00e3o suibr, a diretiva \nappHighlight\n destaca o par\u00e1grafo como abaixo:\n\n\n\n\nEm resumo, o Angular achou o atributo \nappHighlight\n no elemento \n<p>\n e criou uma inst\u00e2ncia da classe \nHighlightDirective\n, injetando a refer\u00eancia para o elemento \n<p>\n no construtor da diretiva, que, por sua vez, mudou a cor do background para amarelo.\n\n\nRespondendo a eventos do usu\u00e1rio\n\u00b6\n\n\nNesse momento, a diretiva \nappHighlight\n simplesmente define a cor de um elemento. A diretiva poderia ser mais din\u00e2mica. Ela poderia, por exemplo, detectar quando o usu\u00e1rio passa o mouse por cima do elemento e quando o usu\u00e1rio tira o mouse de cima do elemento para, em resposta a esses eventos, setar ou remover a cor de destaque do elemento.\n\n\nComece adicionando o s\u00edmbolo \nHostListener\n \u00e0 lista de s\u00edmbolos importados. Adicione o s\u00edmbolo \nInput\n tamb\u00e9m, pois iremos precisar dele em breve.\n\n\n1\nimport\n \n{\n \nDirective\n,\n \nElementRef\n,\n \nHostListener\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n\n\n\n\nEnt\u00e3o, adicione dois m\u00e9todos com o decorador \nHostListener\n. Eles ser\u00e3o os handlers dos eventos \nmouseenter\n e \nmouseleave\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n@\nHostListener\n(\n'mouseenter'\n)\n \nonMouseEnter\n()\n \n{\n\n  \nthis\n.\nhighlight\n(\n'yellow'\n);\n\n\n}\n\n\n\n@\nHostListener\n(\n'mouseleave'\n)\n \nonMouseLeave\n()\n \n{\n\n  \nthis\n.\nhighlight\n(\nnull\n);\n\n\n}\n\n\n\nprivate\n \nhighlight\n(\ncolor\n:\n \nstring\n)\n \n{\n\n  \nthis\n.\nel\n.\nnativeElement\n.\nstyle\n.\nbackgroundColor\n \n=\n \ncolor\n;\n\n\n}\n\n\n\n\n\n\n\nO decorador \n@HostListener\n permite que voc\u00ea escute a eventos do elemento DOM que hospeda a diretiva de atributo. No nosso caso, \u00e9 o elemento \n<p>\n.\n\n\nObviamente, poderia-se acessar o DOM com JavaScript padr\u00e3o e anexar o observador de eventos manualmente. \nExiste pelo menos tr\u00eas problemas com essas abordagem.\n\n\n\n\nVoc\u00ea tem que escrever os observadores de eventos corretamente.\n\n\nO c\u00f3digo deve desanexar o observador quando a diretiva for destroida para evitar vazamentos de mem\u00f3ria.\n\n\nConversar diretamento com a API DOM n\u00e3o \u00e9 uma boa pr\u00e1tica.\n\n\n\n\nOs tratadores delegam a um m\u00e9todo auxiliar a modifica\u00e7\u00e3o da cor no elemento DOM, \nel\n, o qual \u00e9 declarado e inicializado no construtor.\n\n\n1\nconstructor\n(\nprivate\n \nel\n:\n \nElementRef\n)\n \n{\n \n}\n\n\n\n\n\n\n\nAqui est\u00e1 a diretiva modificada completa:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nDirective\n,\n \nElementRef\n,\n \nHostListener\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nDirective\n({\n\n  \nselector\n:\n \n'[appHighlight]'\n\n\n})\n\n\nexport\n \nclass\n \nHighlightDirective\n \n{\n\n  \nconstructor\n(\nprivate\n \nel\n:\n \nElementRef\n)\n \n{\n \n}\n\n\n  \n@\nHostListener\n(\n'mouseenter'\n)\n \nonMouseEnter\n()\n \n{\n\n    \nthis\n.\nhighlight\n(\n'yellow'\n);\n\n  \n}\n\n\n  \n@\nHostListener\n(\n'mouseleave'\n)\n \nonMouseLeave\n()\n \n{\n\n    \nthis\n.\nhighlight\n(\nnull\n);\n\n  \n}\n\n\n  \nprivate\n \nhighlight\n(\ncolor\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nel\n.\nnativeElement\n.\nstyle\n.\nbackgroundColor\n \n=\n \ncolor\n;\n\n  \n}\n\n\n\n\n\n\n\nExecute a aplica\u00e7\u00e3o e veja que cor de fundo aparece quando o mouse passa sobre o \n<p>\n e desaparece quando ele se move fora dele.\n\n\n\n\nPasse valores para a diretiva com o \n@Input\n.\n\u00b6\n\n\nNesse momento a cor de realce est\u00e1 fixa dentro da diretiva. Nessa se\nCurrently the highlight color is hard-coded within the directive. That's inflexible. Nesta se\u00e7\u00e3o, daremos ao desenvolvedor a possibilidade de informar a cor de realce ao usar a diretiva.\n\n\nInicie adicionando a propriedade \nhighlightColor\n na classe da diretiva.:\n\n\n1\n@\nInput\n()\n \nhighlightColor\n:\n \nstring\n;\n\n\n\n\n\n\n\nLigando-se a uma propriedade \n@Input\n\u00b6\n\n\nNote o decorador \n@Input\n. Ele adiciona metadados \u00e0 classe que faz com que a propriedade \nhighlightColor\n esteja disponivel para o \nbind\n de dados.\n\n\nIsto \u00e9 chamado uma propriedade de entrada porque os dados fluem da express\u00e3o para a diretiva. Sem o metadado \n@Input\n o Angular rejeitaria o \nbind\n; Veja abaixo mais detalhes.\n\n\nVamos adicionar ao \nAppComponent\n varia\u00e7\u00f5es de uso da diretiva:\n\n\n1\n2\n<\np\n \nappHighlight\n \nhighlightColor\n=\n\"yellow\"\n>\nRealce em amarelo\n</\np\n>\n\n\n<\np\n \nappHighlight\n \n[\nhighlightColor\n]=\"'\norange\n'\"\n>\nRealce em laranja\n</\np\n>\n\n\n\n\n\n\n\nAdicione a propriedade \ncolor\n ao \nAppComponent\n.\n\n\n1\n2\n3\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ncolor\n \n=\n \n'yellow'\n;\n\n\n}\n\n\n\n\n\n\n\nVamos controlar a cor de realce com um \nbind\n de propriedade.\n\n\n1\n<\np\n \nappHighlight\n \n[\nhighlightColor\n]=\"\ncolor\n\"\n>\nCor de realce com a propriedade color do componente pai\n</\np\n>\n\n\n\n\n\n\n\nIsto \u00e9 bom, mas seria melhor aplicar simultaneamente a diretiva e a cor de realce no mesmo atributo. Como abaixo:    \n\n\n1\n<\np\n \n[\nappHighlight\n]=\"\ncolor\n\"\n>\nRealce me!\n</\np\n>\n\n\n\n\n\n\n\nO \nbind\n do atributo \n[appHighlight]\n tanto aplica a diretiva ao \n<p>\n como indica a cor de realce com um \nbind\n de propriedade. Voc\u00ea esta re-usando o seletor da diretiva para as duas a\u00e7\u00f5es. Essa \u00e9 uma sintaxe concisa e compacta.\n\n\nVoc\u00ea ter\u00e1 que renomear a propriedade da diretiva \nhighlightColor\n para \nappHighlight\n porque essa \u00e9 agora o nome da propriedade de \nbind\n.\n\n\n1\n@\nInput\n()\n \nappHighlight\n:\n \nstring\n;\n\n\n\n\n\n\n\nIsto \u00e9 desagrad\u00e1vel. A palavra, \nappHighlight\n, \u00e9 um nome terr\u00edvel para e n\u00e3o representa o intento da propriedade.\n\n\nCriando um apelido para o \n@Input\n\u00b6\n\n\nFelimente voc\u00ea pode nomear o nome da propriedade da diretiva do que desejar e dar um apelido para ser usado no \nbind\n.\n\n\nRestaure o nome original e especifique o seletor da diretiva com um argumento do \n@Input\n.\n\n\n1\n@\nInput\n(\n'appHighlight'\n)\n \nhighlightColor\n:\n \nstring\n;\n\n\n\n\n\n\n\nDentro da diretiva a propriedade \u00e9 conhecida como \nhighlightColor\n. Fora da diretiva, onde ele \u00e9 usado, ele \u00e9 conhecido como \nappHighlight\n.\n\n\nVoc\u00ea consegue o melhor de ambos os mundos: O nome da propriedade que voce gostaria e a sintaxe de \nbind\n desejada:\n\n\n1\n<\np\n \n[\nappHighlight\n]=\"\ncolor\n\"\n>\nRealce me!\n</\np\n>\n\n\n\n\n\n\n\nAgora que voc\u00ea pode usar \nhighlightColor\n, modifique o m\u00e9todo \nonMouseEnter()\n para us\u00e1-la. Se alg\u00e9m n\u00e3o informar um valor para a cor de realce, use a cor vermelha por padr\u00e3o:\n\n\n1\n2\n3\n@\nHostListener\n(\n'mouseenter'\n)\n \nonMouseEnter\n()\n \n{\n\n  \nthis\n.\nhighlight\n(\nthis\n.\nhighlightColor\n \n||\n \n'red'\n);\n\n\n}\n\n\n\n\n\n\n\nVers\u00e3o final da diretiva.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \n{\n \nDirective\n,\n \nElementRef\n,\n \nHostListener\n,\n \nInput\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nDirective\n({\n\n  \nselector\n:\n \n'[appHighlight]'\n\n\n})\n\n\nexport\n \nclass\n \nHighlightDirective\n \n{\n\n\n  \nconstructor\n(\nprivate\n \nel\n:\n \nElementRef\n)\n \n{\n \n}\n\n\n  \n@\nInput\n(\n'appHighlight'\n)\n \nhighlightColor\n:\n \nstring\n;\n\n\n  \n@\nHostListener\n(\n'mouseenter'\n)\n \nonMouseEnter\n()\n \n{\n\n    \nthis\n.\nhighlight\n(\nthis\n.\nhighlightColor\n \n||\n \n'red'\n);\n\n  \n}\n\n\n  \n@\nHostListener\n(\n'mouseleave'\n)\n \nonMouseLeave\n()\n \n{\n\n    \nthis\n.\nhighlight\n(\nnull\n);\n\n  \n}\n\n\n  \nprivate\n \nhighlight\n(\ncolor\n:\n \nstring\n)\n \n{\n\n    \nthis\n.\nel\n.\nnativeElement\n.\nstyle\n.\nbackgroundColor\n \n=\n \ncolor\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nWrite a harness to try it\n\u00b6\n\n\nPode ser dif\u00edcil imaginar como esta diretiva realmente funciona. Nesta se\u00e7\u00e3o, voc\u00ea transformar\u00e1 o \nAppComponent\n para permitir que voc\u00ea escolha a cor de destaque com um bot\u00e3o de op\u00e7\u00e3o e vincule sua escolha de cor \u00e0 diretiva.\n\n\nModifique \napp.component.html\n como segue:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<\nh1\n>\nMinha primeira Diretiva de Atributo\n</\nh1\n>\n\n\n\n<\nh4\n>\nSelecione uma cor de marca\u00e7\u00e3o:\n</\nh4\n>\n\n\n<\ndiv\n>\n\n  \n<\ninput\n \ntype\n=\n\"radio\"\n \nname\n=\n\"colors\"\n \n(\nclick\n)=\"\ncolor\n=\n'lightgreen'\n\"\n>\n Verde\n  \n<\ninput\n \ntype\n=\n\"radio\"\n \nname\n=\n\"colors\"\n \n(\nclick\n)=\"\ncolor\n=\n'yellow'\n\"\n>\n Amarela\n  \n<\ninput\n \ntype\n=\n\"radio\"\n \nname\n=\n\"colors\"\n \n(\nclick\n)=\"\ncolor\n=\n'cyan'\n\"\n>\n Ciano\n\n</\ndiv\n>\n\n\n<\np\n \n[\nappHighlight\n]=\"\ncolor\n\"\n>\nMarque me!\n</\np\n>\n\n\n\n\n\n\n\nAltere a propriedade \nAppComponent.color\n para que ela n\u00e3o tenha um valor inicial.\n\n\n1\n2\n3\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ncolor\n:\n \nstring\n;\n\n\n}\n\n\n\n\n\n\n\nVeja o uso da diretiva em a\u00e7\u00e3o.\n\n\n\n\nBind\n a uma segunda propriedade\n\u00b6\n\n\nNossa diretiva tem apenas uma propriedade parametrizada. Numa aplica\u00e7\u00e3o real, pode-se precisar de mais.\n\n\nAtualmente, a cor \ndefault\n \u2014 a cor que \u00e9 usada at\u00e9 que o usu\u00e1rio selecione uma cor \u2014 est\u00e1 fixa no c\u00f3digo como \"vermelha\". Vamos possibilitar o desenvolvedor informar essa cor.\n\n\nAdicione uma segunda propriedade a \nHighlightDirective\n chamada de \ndefaultColor\n:\n\n\n1\n@\nInput\n()\n \ndefaultColor\n:\n \nstring\n;\n\n\n\n\n\n\n\nRevise o m\u00e9todo \nonMouseEnter\n da diretiva para que ele primeiro tente usar a cor da propriedade \nhighlightColor\n, se ela n\u00e3o estiver definida tente usar a \ndefaultColor\n, e se essa tamb\u00e9m n\u00e3o estiver definida use a cor \"vermelha\".\n\n\n1\n2\n3\n@\nHostListener\n(\n'mouseenter'\n)\n \nonMouseEnter\n()\n \n{\n\n  \nthis\n.\nhighlight\n(\nthis\n.\nhighlightColor\n \n||\n \nthis\n.\ndefaultColor\n \n||\n \n'red'\n);\n\n\n}\n\n\n\n\n\n\n\nComo fazer o \nbind\n a uma segunda propriedade quando j\u00e1 se est\u00e1 usando o atributo \nappHighlight\n?\n\n\nAssim como componentes, voc\u00ea pode adicionar tantas propriedades quanto voc\u00ea precisa. O desenvolvedor poderia escrever o seguinte c\u00f3digo HTML para fazer o \nbind\n da propriedade \nAppComponent.color\n bem como a informar a cor 'violeta' como default..\n\n\n1\n2\n3\n<\np\n \n[\nappHighlight\n]=\"\ncolor\n\"\n \ndefaultColor\n=\n\"violet\"\n>\n\n  Realce me tamb\u00e9m!\n\n</\np\n>\n\n\n\n\n\n\n\nAngular sabe que o \nbinding\n \ndefaultColor\n pertence a \nHighlightDirective\n porque voc\u00ea a tornou p\u00fablica com o decorador \n@Input\n.\n\n\nVeja como ir\u00e1 funcionar quando voc\u00ea tiver conclu\u00eddo a codific\u00e3o.\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nexercicio-attribute-directives/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- highlight.directive.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\nEsta p\u00e1gina mostrou como fazer:\n\n\n\n\nConstruir uma diretiva de atributo que modifica o comportamento de um elemento.\n\n\nUsar a diretiva num elemento de um template HTML.\n\n\nResponder a eventos que mudam o comportamento da diretiva.\n\n\nPassar valores a uma diretiva.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 13",
            "title": "12 - Diretivas de Atributo"
        },
        {
            "location": "/exercicios/exercicio-12/#exercicio-12",
            "text": "",
            "title": "Exerc\u00edcio 12"
        },
        {
            "location": "/exercicios/exercicio-12/#objetivos",
            "text": "Criar a nossa pr\u00f3pria diretiva de atributo",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-12/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-12/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-attribute-directives  e deixe-a rodando:  1\n2\n3 ng new exercicio-attribute-directives cd  exercicio-attribute-directives\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-12/#construindo-uma-diretiva-de-atributo",
            "text": "Diretivas de atributos s\u00e3o usadas como atributos de elementos.  A diretiva  NgStyle , por exemplo, pode mudar v\u00e1rios estilos CSS de um elemento ao mesmo tempo.  Minimamente, uma diretiva de atributo \u00e9 uma classe anotada com o decorador  @Directive , que especifica o seletor que identifica a diretiva. A classe deve implementar o comportamento desejado para a diretiva.  Nesse exerc\u00edcio, vamos construir uma diretiva de atributo simples, chamada  appHighlight , que modifica a cor de background de um elemento quando o usu\u00e1rio passa o mouse por cima desse elemento.   Voc\u00ea pode aplicar a diretiva como a seguir:  1 < p   appHighlight > Marque me! </ p >",
            "title": "Construindo uma diretiva de atributo"
        },
        {
            "location": "/exercicios/exercicio-12/#escrevendo-a-diretiva",
            "text": "Crie o arquivo  src/app/highlight.directive.ts :  1\n2\n3\n4\n5\n6\n7\n8 import   {   Directive ,   ElementRef ,   Input   }   from   '@angular/core' ;  @ Directive ({   selector :   '[appHighlight]'   })  export   class   HighlightDirective   { \n     constructor ( el :   ElementRef )   { \n        el . nativeElement . style . backgroundColor   =   'yellow' ; \n     }  }    Importamos os seguintes s\u00edmbolos da biblioteca Angular core:   Directive  prov\u00ea a funcionalidade do decorador  @Directive .  ElementRef  \u00e9 injetado no construtor da diretiva, para que tenhamos acesso ao elemento DOM.  Input  permite o binding de propriedade na diretiva.   A propriedade  selector  do decorador  @Directive  identifica a diretiva no template HTML. O seletor utiliza colchetes para indicar que a diretiva \u00e9 um atributo. Dessa forma, o seletor  [appHighlight]  indica que o Angular deve localizar todos os elementos no template que t\u00eam um atributo com nome  appHighlight .",
            "title": "Escrevendo a diretiva"
        },
        {
            "location": "/exercicios/exercicio-12/#por-que-nao-simplesmente-chama-la-highlight",
            "text": "Apesar de o nome  highlight  funcionar e ser mais conciso do que o nome  appHighlight , uma boa pr\u00e1tica \u00e9 sempre usar um prefixo no nome da diretiva. Isso garante que o nome da diretiva n\u00e3o ir\u00e1 conflitar com nomes de atributos padr\u00f5es HTML ou at\u00e9 mesmo com nomes de outras diretivas customizadas.  Tenha cuidado em n\u00e3o usar o prefixo  ng , porque esse \u00e9 o prefixo reservado para o pr\u00f3prio Angular. Para o nosso exemplo, o prefixo  app  \u00e9 suficiente para distinguir a nossa diretiva customizada.  Abaixo do decorador  @Directive , vem a classe propriamente dita da diretiva, chamada  HighlightDirective , que cont\u00e9m a l\u00f3gica dessa diretiva. Para torn\u00e1-la acess\u00edvel a partir de outros componentes, exportamos a classe  HighlightDirective .  O Angular cria uma nova inst\u00e2ncia da diretiva para cada elemento que a utiliza, injetando o  ElementRef  no construtor da classe. O  ElementRef  \u00e9 um servi\u00e7o que permite o acesso direto ao elemento DOM, a partir da sua propriedade  nativeElement .",
            "title": "Por que n\u00e3o simplesmente cham\u00e1-la highlight?"
        },
        {
            "location": "/exercicios/exercicio-12/#usando-a-diretiva-de-atributo",
            "text": "Para usar a nova diretiva  HighlightDirective , crie um template e aplique a diretiva como um atributo de um elemento  <p> . Em termos do Angular, o elemento  <p>  \u00e9 o  host  da diretiva.  Escreva, ent\u00e3o, o seguinte template no arquivo  app.component.html :  1\n2 < h1 > Minha primeira Diretiva de Atributo </ h1 >  < p   appHighlight > Marque me! </ p >    Referencie o template no  AppComponent :  1\n2\n3\n4\n5\n6\n7\n8\n9 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'app-root' , \n   templateUrl :   './app.component.html'  })  export   class   AppComponent   { \n   color :   string ;  }    Em seguida, modifique o  AppModule  para incluir a classe  HighlightDirective  no array  declarations  do decorador  NgModule . Dessa forma, o Angular ir\u00e1 reconhecer a diretiva quando encontrar um atributo  appHighlight  em um template HTML.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   {   NgModule   }   from   '@angular/core' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   AppComponent   }   from   './app.component' ;  import   {   HighlightDirective   }   from   './highlight.directive' ;  @ NgModule ({ \n   imports :   [   BrowserModule   ], \n   declarations :   [ \n     AppComponent , \n     HighlightDirective \n   ], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {   }    Agora, quando a aplica\u00e7\u00e3o suibr, a diretiva  appHighlight  destaca o par\u00e1grafo como abaixo:   Em resumo, o Angular achou o atributo  appHighlight  no elemento  <p>  e criou uma inst\u00e2ncia da classe  HighlightDirective , injetando a refer\u00eancia para o elemento  <p>  no construtor da diretiva, que, por sua vez, mudou a cor do background para amarelo.",
            "title": "Usando a diretiva de atributo"
        },
        {
            "location": "/exercicios/exercicio-12/#respondendo-a-eventos-do-usuario",
            "text": "Nesse momento, a diretiva  appHighlight  simplesmente define a cor de um elemento. A diretiva poderia ser mais din\u00e2mica. Ela poderia, por exemplo, detectar quando o usu\u00e1rio passa o mouse por cima do elemento e quando o usu\u00e1rio tira o mouse de cima do elemento para, em resposta a esses eventos, setar ou remover a cor de destaque do elemento.  Comece adicionando o s\u00edmbolo  HostListener  \u00e0 lista de s\u00edmbolos importados. Adicione o s\u00edmbolo  Input  tamb\u00e9m, pois iremos precisar dele em breve.  1 import   {   Directive ,   ElementRef ,   HostListener ,   Input   }   from   '@angular/core' ;    Ent\u00e3o, adicione dois m\u00e9todos com o decorador  HostListener . Eles ser\u00e3o os handlers dos eventos  mouseenter  e  mouseleave .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 @ HostListener ( 'mouseenter' )   onMouseEnter ()   { \n   this . highlight ( 'yellow' );  }  @ HostListener ( 'mouseleave' )   onMouseLeave ()   { \n   this . highlight ( null );  }  private   highlight ( color :   string )   { \n   this . el . nativeElement . style . backgroundColor   =   color ;  }    O decorador  @HostListener  permite que voc\u00ea escute a eventos do elemento DOM que hospeda a diretiva de atributo. No nosso caso, \u00e9 o elemento  <p> .  Obviamente, poderia-se acessar o DOM com JavaScript padr\u00e3o e anexar o observador de eventos manualmente. \nExiste pelo menos tr\u00eas problemas com essas abordagem.   Voc\u00ea tem que escrever os observadores de eventos corretamente.  O c\u00f3digo deve desanexar o observador quando a diretiva for destroida para evitar vazamentos de mem\u00f3ria.  Conversar diretamento com a API DOM n\u00e3o \u00e9 uma boa pr\u00e1tica.   Os tratadores delegam a um m\u00e9todo auxiliar a modifica\u00e7\u00e3o da cor no elemento DOM,  el , o qual \u00e9 declarado e inicializado no construtor.  1 constructor ( private   el :   ElementRef )   {   }    Aqui est\u00e1 a diretiva modificada completa:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   Directive ,   ElementRef ,   HostListener ,   Input   }   from   '@angular/core' ;  @ Directive ({ \n   selector :   '[appHighlight]'  })  export   class   HighlightDirective   { \n   constructor ( private   el :   ElementRef )   {   } \n\n   @ HostListener ( 'mouseenter' )   onMouseEnter ()   { \n     this . highlight ( 'yellow' ); \n   } \n\n   @ HostListener ( 'mouseleave' )   onMouseLeave ()   { \n     this . highlight ( null ); \n   } \n\n   private   highlight ( color :   string )   { \n     this . el . nativeElement . style . backgroundColor   =   color ; \n   }    Execute a aplica\u00e7\u00e3o e veja que cor de fundo aparece quando o mouse passa sobre o  <p>  e desaparece quando ele se move fora dele.",
            "title": "Respondendo a eventos do usu\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-12/#passe-valores-para-a-diretiva-com-o-input",
            "text": "Nesse momento a cor de realce est\u00e1 fixa dentro da diretiva. Nessa se\nCurrently the highlight color is hard-coded within the directive. That's inflexible. Nesta se\u00e7\u00e3o, daremos ao desenvolvedor a possibilidade de informar a cor de realce ao usar a diretiva.  Inicie adicionando a propriedade  highlightColor  na classe da diretiva.:  1 @ Input ()   highlightColor :   string ;",
            "title": "Passe valores para a diretiva com o @Input."
        },
        {
            "location": "/exercicios/exercicio-12/#ligando-se-a-uma-propriedade-input",
            "text": "Note o decorador  @Input . Ele adiciona metadados \u00e0 classe que faz com que a propriedade  highlightColor  esteja disponivel para o  bind  de dados.  Isto \u00e9 chamado uma propriedade de entrada porque os dados fluem da express\u00e3o para a diretiva. Sem o metadado  @Input  o Angular rejeitaria o  bind ; Veja abaixo mais detalhes.  Vamos adicionar ao  AppComponent  varia\u00e7\u00f5es de uso da diretiva:  1\n2 < p   appHighlight   highlightColor = \"yellow\" > Realce em amarelo </ p >  < p   appHighlight   [ highlightColor ]=\"' orange '\" > Realce em laranja </ p >    Adicione a propriedade  color  ao  AppComponent .  1\n2\n3 export   class   AppComponent   { \n   color   =   'yellow' ;  }    Vamos controlar a cor de realce com um  bind  de propriedade.  1 < p   appHighlight   [ highlightColor ]=\" color \" > Cor de realce com a propriedade color do componente pai </ p >    Isto \u00e9 bom, mas seria melhor aplicar simultaneamente a diretiva e a cor de realce no mesmo atributo. Como abaixo:      1 < p   [ appHighlight ]=\" color \" > Realce me! </ p >    O  bind  do atributo  [appHighlight]  tanto aplica a diretiva ao  <p>  como indica a cor de realce com um  bind  de propriedade. Voc\u00ea esta re-usando o seletor da diretiva para as duas a\u00e7\u00f5es. Essa \u00e9 uma sintaxe concisa e compacta.  Voc\u00ea ter\u00e1 que renomear a propriedade da diretiva  highlightColor  para  appHighlight  porque essa \u00e9 agora o nome da propriedade de  bind .  1 @ Input ()   appHighlight :   string ;    Isto \u00e9 desagrad\u00e1vel. A palavra,  appHighlight , \u00e9 um nome terr\u00edvel para e n\u00e3o representa o intento da propriedade.",
            "title": "Ligando-se a uma propriedade @Input"
        },
        {
            "location": "/exercicios/exercicio-12/#criando-um-apelido-para-o-input",
            "text": "Felimente voc\u00ea pode nomear o nome da propriedade da diretiva do que desejar e dar um apelido para ser usado no  bind .  Restaure o nome original e especifique o seletor da diretiva com um argumento do  @Input .  1 @ Input ( 'appHighlight' )   highlightColor :   string ;    Dentro da diretiva a propriedade \u00e9 conhecida como  highlightColor . Fora da diretiva, onde ele \u00e9 usado, ele \u00e9 conhecido como  appHighlight .  Voc\u00ea consegue o melhor de ambos os mundos: O nome da propriedade que voce gostaria e a sintaxe de  bind  desejada:  1 < p   [ appHighlight ]=\" color \" > Realce me! </ p >    Agora que voc\u00ea pode usar  highlightColor , modifique o m\u00e9todo  onMouseEnter()  para us\u00e1-la. Se alg\u00e9m n\u00e3o informar um valor para a cor de realce, use a cor vermelha por padr\u00e3o:  1\n2\n3 @ HostListener ( 'mouseenter' )   onMouseEnter ()   { \n   this . highlight ( this . highlightColor   ||   'red' );  }    Vers\u00e3o final da diretiva.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   {   Directive ,   ElementRef ,   HostListener ,   Input   }   from   '@angular/core' ;  @ Directive ({ \n   selector :   '[appHighlight]'  })  export   class   HighlightDirective   { \n\n   constructor ( private   el :   ElementRef )   {   } \n\n   @ Input ( 'appHighlight' )   highlightColor :   string ; \n\n   @ HostListener ( 'mouseenter' )   onMouseEnter ()   { \n     this . highlight ( this . highlightColor   ||   'red' ); \n   } \n\n   @ HostListener ( 'mouseleave' )   onMouseLeave ()   { \n     this . highlight ( null ); \n   } \n\n   private   highlight ( color :   string )   { \n     this . el . nativeElement . style . backgroundColor   =   color ; \n   }  }",
            "title": "Criando um apelido para o @Input"
        },
        {
            "location": "/exercicios/exercicio-12/#write-a-harness-to-try-it",
            "text": "Pode ser dif\u00edcil imaginar como esta diretiva realmente funciona. Nesta se\u00e7\u00e3o, voc\u00ea transformar\u00e1 o  AppComponent  para permitir que voc\u00ea escolha a cor de destaque com um bot\u00e3o de op\u00e7\u00e3o e vincule sua escolha de cor \u00e0 diretiva.  Modifique  app.component.html  como segue:  1\n2\n3\n4\n5\n6\n7\n8\n9 < h1 > Minha primeira Diretiva de Atributo </ h1 >  < h4 > Selecione uma cor de marca\u00e7\u00e3o: </ h4 >  < div > \n   < input   type = \"radio\"   name = \"colors\"   ( click )=\" color = 'lightgreen' \" >  Verde\n   < input   type = \"radio\"   name = \"colors\"   ( click )=\" color = 'yellow' \" >  Amarela\n   < input   type = \"radio\"   name = \"colors\"   ( click )=\" color = 'cyan' \" >  Ciano </ div >  < p   [ appHighlight ]=\" color \" > Marque me! </ p >    Altere a propriedade  AppComponent.color  para que ela n\u00e3o tenha um valor inicial.  1\n2\n3 export   class   AppComponent   { \n   color :   string ;  }    Veja o uso da diretiva em a\u00e7\u00e3o.",
            "title": "Write a harness to try it"
        },
        {
            "location": "/exercicios/exercicio-12/#bind-a-uma-segunda-propriedade",
            "text": "Nossa diretiva tem apenas uma propriedade parametrizada. Numa aplica\u00e7\u00e3o real, pode-se precisar de mais.  Atualmente, a cor  default  \u2014 a cor que \u00e9 usada at\u00e9 que o usu\u00e1rio selecione uma cor \u2014 est\u00e1 fixa no c\u00f3digo como \"vermelha\". Vamos possibilitar o desenvolvedor informar essa cor.  Adicione uma segunda propriedade a  HighlightDirective  chamada de  defaultColor :  1 @ Input ()   defaultColor :   string ;    Revise o m\u00e9todo  onMouseEnter  da diretiva para que ele primeiro tente usar a cor da propriedade  highlightColor , se ela n\u00e3o estiver definida tente usar a  defaultColor , e se essa tamb\u00e9m n\u00e3o estiver definida use a cor \"vermelha\".  1\n2\n3 @ HostListener ( 'mouseenter' )   onMouseEnter ()   { \n   this . highlight ( this . highlightColor   ||   this . defaultColor   ||   'red' );  }    Como fazer o  bind  a uma segunda propriedade quando j\u00e1 se est\u00e1 usando o atributo  appHighlight ?  Assim como componentes, voc\u00ea pode adicionar tantas propriedades quanto voc\u00ea precisa. O desenvolvedor poderia escrever o seguinte c\u00f3digo HTML para fazer o  bind  da propriedade  AppComponent.color  bem como a informar a cor 'violeta' como default..  1\n2\n3 < p   [ appHighlight ]=\" color \"   defaultColor = \"violet\" > \n  Realce me tamb\u00e9m! </ p >    Angular sabe que o  binding   defaultColor  pertence a  HighlightDirective  porque voc\u00ea a tornou p\u00fablica com o decorador  @Input .  Veja como ir\u00e1 funcionar quando voc\u00ea tiver conclu\u00eddo a codific\u00e3o.",
            "title": "Bind a uma segunda propriedade"
        },
        {
            "location": "/exercicios/exercicio-12/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 exercicio-attribute-directives/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- highlight.directive.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-12/#resumo",
            "text": "Esta p\u00e1gina mostrou como fazer:   Construir uma diretiva de atributo que modifica o comportamento de um elemento.  Usar a diretiva num elemento de um template HTML.  Responder a eventos que mudam o comportamento da diretiva.  Passar valores a uma diretiva.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-12/#proximo-passo",
            "text": "Exerc\u00edcio 13",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-13/",
            "text": "Exerc\u00edcio 13\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nCriar o nossa pr\u00f3prio pipe\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n30 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-13-pipes\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-13-pipes\n\ncd\n exercicio-13-pipes\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nPipes customizados\n\u00b6\n\n\n\n\n\nVoc\u00ea pode criar o seu pr\u00f3prio pipe customizado. Abaixo temos um pipe customizado chamado \nExponentialStrengthPipe\n que pode aumentar os poderes do her\u00f3i:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \n{\n \nPipe\n,\n \nPipeTransform\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n/*\n\n\n * Aumenta o valor exponencialmente.\n\n\n *\n\n\n * Uso:\n\n\n *   value | exponentialStrength:exponent\n\n\n * Exemplo:\n\n\n *   {{ 2 | exponentialStrength:10 }}\n\n\n *   resulta em: 1024\n\n\n*/\n\n\n@\nPipe\n({\n \nname\n:\n \n'exponentialStrength'\n \n})\n\n\nexport\n \nclass\n \nExponentialStrengthPipe\n \nimplements\n \nPipeTransform\n \n{\n\n  \ntransform\n(\nvalue\n:\n \nnumber\n,\n \nexponent\n:\n \nstring\n)\n:\n \nnumber\n \n{\n\n    \nconst\n \nexp\n \n=\n \nparseFloat\n(\nexponent\n);\n\n    \nreturn\n \nMath\n.\npow\n(\nvalue\n,\n \nisNaN\n(\nexp\n)\n \n?\n \n1\n \n:\n \nexp\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nEssa defini\u00e7\u00e3o de pipe nos mostra o seguinte:\n\n\n\n\nUm pipe \u00e9 uma \nclasse decorada\n por pelos metadados de pipe (\n@Pipe({})\n).\n\n\nA classe pipe implementa o m\u00e9todo \ntransform()\n da interface \nPipeTransform\n que recebe como entrada o valor (\nvalue\n) seguido do par\u00e2metro de exponencial (\nexponent\n) e retorna o valor transformado.\n\n\nExistir\u00e1 um argumento adicional para o m\u00e9todo \ntransform\n para cada par\u00e2metro passado ao pipe. No exemplo, o seu pipe tem apenas um par\u00e2metro que \u00e9 o \nexponent\n.\n\n\nPara informar ao Angular que essa classe \u00e9 um pipe, voc\u00ea deve aplicar o \ndecorator\n \n@Pipe\n, que voc\u00ea deve importar da biblioteca \ncore\n do Angular.\n\n\nO \ndecorator\n \n@Pipe\n permite voc\u00ea definir um nome para o pipe e esse nome ser\u00e1 usado nos templates. Esse nome deve ser um identificador Javascript v\u00e1lido. Conforme o exemplo, o nome do seu pipe \u00e9 \nexponentialStrength\n.\n\n\n\n\nAgora, voc\u00ea precisa de um componente para demonstrar o uso do pipe.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'power-booster'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Power Booster</h2>\n\n\n    <p>Super poder aumentado: {{2 | exponentialStrength: 10}}</p>\n\n\n  `\n\n\n})\n\n\nexport\n \nclass\n \nPowerBoosterComponent\n \n{}\n\n\n\n\n\n\n\n\n\nNote o seguinte:\n\n\n\n\nVoc\u00ea usa o seu pipe customizado da mesma forma que os pipes nativos (\nbuilt-in pipes\n).\n\n\nVoc\u00ea deve incluir o seu pipe nas declara\u00e7\u00e3o de \narray\n do \nAppModule\n.\n\n\n\n\nCalculadora do Aumento de Poder\n\u00b6\n\n\nN\u00e3o \u00e9 muito divertio atualizar o template para testar o pipe customizado. Atualize o exemplo para \"Calculadora do Aumento de Poder\" que ir\u00e1 combinar o uso do pipe com \ntwo-way data binding\n do \nngModel\n.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'power-boost-calculator'\n,\n\n  \ntemplate\n:\n \n`\n\n\n    <h2>Calculadora do Aumento de Poder</h2>\n\n\n    <div>Poder normal: <input [(ngModel)]=\"power\"></div>\n\n\n    <div>Fator de Aumento: <input [(ngModel)]=\"factor\"></div>\n\n\n    <p>\n\n\n      Supder poder do Her\u00f3i: {{power | exponentialStrength: factor}}\n\n\n    </p>\n\n\n  `\n\n\n})\n\n\nexport\n \nclass\n \nPowerBoostCalculatorComponent\n \n{\n\n  \npower\n \n=\n \n5\n;\n\n  \nfactor\n \n=\n \n1\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nPipes e \nchange detection\n\u00b6\n\n\nAngular procura por mudan\u00e7as nos valores no \ndata-bind\n atrav\u00e9s de um processo de \nchange detection\n que executa ap\u00f3s \ncada evento de DOM\n: qualquer uso do teclado, movimento do mouse, \ntick\n do \ntimer\n (do navegador) e respostas do servidor. Isso pode ser \nmuito custoso\n. Angular se esfor\u00e7a para diminuir os custos sempre que poss\u00edvel.\n\n\nAngular usa um algoritimo simples e r\u00e1pido de detec\u00e7\u00e3o de mudan\u00e7a (\nchange detection\n) quando voc\u00ea usa um pipe.\n\n\nSem pipe\n\u00b6\n\n\nNo pr\u00f3ximo exemplo, o componente usa a estrat\u00e9gia padr\u00e3o de \nchange detection\n para monitorar e atualizar a tela em cada her\u00f3i da lista de her\u00f3is (\nheroes\n \narray\n). Veja o template:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nNovo her\u00f3i:\n  \n<\ninput\n \ntype\n=\n\"text\"\n \n#\nbox\n\n          \n(\nkeyup\n.\nenter\n)=\"\naddHero\n(\nbox\n.\nvalue\n);\n \nbox\n.\nvalue\n=\n''\n\"\n\n          \nplaceholder\n=\n\"Nome do her\u00f3i\"\n>\n\n  \n<\nbutton\n \ntype\n=\n\"reset\"\n \n(\nclick\n)=\"\nreset\n()\"\n>\nLimpar\n</\nbutton\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let hero of heroes\"\n>\n\n    {{hero.name}}\n  \n</\ndiv\n>\n\n\n\n\n\n\n\n\n\n\nA classe complementar do comopnente prov\u00ea: uma lista de her\u00f3is, um m\u00e9todo para adicionar um her\u00f3i \u00e0 lista e um m\u00e9todo para limpar a lista.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nexport\n \nclass\n \nFlyingHeroesComponent\n \n{\n\n  \nheroes\n:\n \nany\n[]\n \n=\n \n[];\n\n  \ncanFly\n \n=\n \ntrue\n;\n\n\n  \nconstructor\n()\n \n{\n\n    \nthis\n.\nreset\n();\n\n  \n}\n\n\n  \naddHero\n(\nname\n:\n \nstring\n)\n \n{\n\n    \nname\n \n=\n \nname\n.\ntrim\n();\n\n    \nif\n \n(\n!\nname\n)\n \n{\n\n      \nreturn\n;\n\n    \n}\n\n    \nlet\n \nhero\n \n=\n \n{\n \nname\n,\n \ncanFly\n:\n \nthis\n.\ncanFly\n \n};\n\n    \nthis\n.\nheroes\n.\npush\n(\nhero\n);\n\n  \n}\n\n\n  \nreset\n()\n \n{\n\n    \nthis\n.\nheroes\n \n=\n \nHEROES\n.\nslice\n();\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nVoc\u00ea pode adicionar her\u00f3is e o Angular ir\u00e1 atualizar a tela quando voc\u00ea fizer isso.\nSe voc\u00ea clicar o bot\u00e3o de \"limpar\", o Angular ir\u00e1 substituir a lista de her\u00f3is por um novo \narray\n com os her\u00f3is originais e ir\u00e1 atualizar a tela.\nSe voc\u00ea adicionar a funcionalidade de remover ou alterar um her\u00f3i, o Angular iria detectar essas mudan\u00e7as e tamb\u00e9m iria atualizar a tela.\n\n\nFlyingHeroesPipe\n\u00b6\n\n\nAdicione o pipe \nFlyingHeroesPipe\n ao \n*ngFor\n para filtrar a lista de her\u00f3is e mostrar apenas os her\u00f3is que podem voar (\ncanFly=true\n).\n\n\n1\n2\n3\n<\ndiv\n \n*\nngFor\n=\n\"let hero of (heroes | flyingHeroes)\"\n>\n\n  {{hero.name}}\n\n</\ndiv\n>\n\n\n\n\n\n\n\nAqui est\u00e1 a implementa\u00e7\u00e3o do \nFlyingHeroesPipe\n, que segue o padr\u00e3o de pipe customizado conforme descrevemos anteriormente.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nimport\n \n{\n \nPipe\n,\n \nPipeTransform\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nFlyer\n \n}\n \nfrom\n \n'./heroes'\n;\n\n\n\n@\nPipe\n({\n \nname\n:\n \n'flyingHeroes'\n \n})\n\n\nexport\n \nclass\n \nFlyingHeroesPipe\n \nimplements\n \nPipeTransform\n \n{\n\n  \ntransform\n(\nallHeroes\n:\n \nFlyer\n[])\n \n{\n\n    \nreturn\n \nallHeroes\n.\nfilter\n(\nhero\n \n=>\n \nhero\n.\ncanFly\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nRepare no comportamento estranho no exemplo ( \nlive example\n / \ndownload example\n ):\nquando voc\u00ea adiciona her\u00f3is que voam, nenhum deles \u00e9 apresentado na lista de \"Her\u00f3is que voam\"\n\n\nApesar de voc\u00ea n\u00e3o conseguir o comportamento que voc\u00ea queria, o Angular n\u00e3o est\u00e1 quebrado. Ele est\u00e1 apenas usando um algoritmo diferente de \nchange-detection\n que ignora as mudan\u00e7as na na lista ou em qualquer de seus itens.\n\n\nRepare como um her\u00f3i \u00e9 adicionado:\n\n\n1\nthis\n.\nheroes\n.\npush\n(\nhero\n);\n\n\n\n\n\n\n\nVoc\u00ea adiciona um her\u00f3i na lista de her\u00f3is (o \narray\n). A refer\u00eancia ao \narray\n n\u00e3o mudou. \u00c9 o mesmo array. E \u00e9 s\u00f3 isso que importa pro Angular agora. Partindo dessa perspectiva: mesmo \narray\n, sem mudan\u00e7as, sem tela pra atualizar.\n\n\nPara \"consertar\" isso, crie um novo \narray\n como o novo her\u00f3i e atribua \u00e0 lista de her\u00f3is. Dessa forma, o Angular detecta que a refer\u00eancia ao \narray\n mudou. Isso executa o \npipe\n e atualiza a tela com o novo array (que cont\u00e9m o novo her\u00f3i).\n\n\nSe voc\u00ea modifica o \narray\n, nenhum \npipe\n \u00e9 invocado e a tela n\u00e3o \u00e9 atualizada. Se voc\u1ebd substituir o \narray\n, o \npipe\n \u00e9 executado e a tela \u00e9 atualizada. A aplica\u00e7\u00e3o \"\nFlying Heroes\n\" estende o c\u00f3digo com um checkbox e dois exemplos de visualiza\u00e7\u00e3o (com e sem pipe) para te ajudar a perceber esses comportamentos.\n\n\n\n\nSubstituindo o \narray\n \u00e9 uma forma eficiente de avisar ao Angular para atualizar a tela. Quando voc\u00ea substitui o \narray\n? Quando o dado mudar. Essa \u00e9 uma regra f\u00e1cil de seguir nesse exemplo onde a \u00fanica altera\u00e7\u00e3o no dado \u00e9 atrav\u00e9s da adi\u00e7\u00e3o de um her\u00f3i.\n\n\nPor\u00e9m, \u00e9 bem comum voc\u00ea passar por situa\u00e7\u00f5es nas quais voc\u00ea n\u00e3o sabe quando o dado foi alterado, especialmente em aplica\u00e7\u00f5es que alteram o dado de diferentes formas ou em locais diferentes e/ou distantes. Um componente nesse tipo de aplica\u00e7\u00e3o normalmente n\u00e3o consegue saber sobre essas mudan\u00e7as. Al\u00e9m disso, \u00e9 imprudente deformar o projeto do componente para adaptar um \npipe\n. Tente manter a classe do componente independente do HTML. O componente deve desconhecer a exist\u00eancia dos \npipes\n.\n\n\nPara o filtro dos her\u00f3is que voam, considere o uso de \npipes impuros\n.\n\n\nPipes Puros e Impuros\n\u00b6\n\n\n\n\n\nExistem duas categorias de pipes: puros e impuros. Pipes s\u00e3o puros por padr\u00e3o. Todos os pipes que voc\u00ea viu at\u00e9 agora tem sido os puros. Voc\u00ea define um pipe como impuro adicionando uma \nflag\n \npure: false\n ao seu \ndecorator\n. Voc\u00ea poderia definir o pipe \nFlyingHeroesPipe\n como impuro da seguinte forma:\n\n\n1\n2\n3\n4\n@\nPipe\n({\n\n  \nname\n:\n \n'flyingHeroesImpure'\n,\n\n  \npure\n:\n \nfalse\n\n\n})\n\n\n\n\n\n\n\nAntes de fazer isso, entenda a diferen\u00e7a entre puro e impuro - come\u00e7ando com um pipe puro.\n\n\nPipes Puros\n\u00b6\n\n\nO Angular executa um pipe puro apenas quando ele detecta uma mudan\u00e7a \"pura\" no valor de entrada (\ninput\n).\nUma mudan\u00e7a pura pode ser tanto uma mudan\u00e7a em uma entrada do \"tipo primitivo\" (\nString\n, \nNumber\n, \nBoolean\n, \nSymbol\n) quanto uma mudan\u00e7a na refer\u00eancia ao objeto (\nDate\n, \nArray\n, \nFunction\n, \nObject\n).\n\n\nO Angular ignora as mudan\u00e7as dentro de objetos compostos. Ou seja, o pipe puro n\u00e3o ser\u00e1 executado se voc\u00ea: fizer uma mudan\u00e7a no m\u00eas de uma data, adicionar um elemento ao \narray\n de entrada, ou atualizar uma propriedade de um objeto de entrada.\n\n\nIsso pode parecer restritivo mas tamb\u00e9m \u00e9 r\u00e1pido. A verifica\u00e7\u00e3o da refer\u00eancia a um objeto \u00e9 muito mais r\u00e1pida que uma verifica\u00e7\u00e3o profunda (\ndeep check\n). Ent\u00e3o, o Angular consegue rapidamente determinar se pode pular ambas as estapas de execu\u00e7\u00e3o de pipe e atualiza\u00e7\u00e3o da tela.\n\n\nPor essa raz\u00e3o, pipes puros s\u00e3o prefer\u00edveis quando voc\u00ea pode conviver com a estrat\u00e9gia de detec\u00e7\u00e3o de mudan\u00e7as. Quando voc\u00ea n\u00e3o consegue, voc\u00ea pode usar os pipes impuros.\n\n\nPipes Impuros\n\u00b6\n\n\nO Angular executa um pipe impuro durante todo ciclo de detec\u00e7\u00e3o de mudan\u00e7a do componente. Um pipe impuro \u00e9 chamado com frequ\u00eancia, t\u00e3o frequente quanto qualquer evento de teclado ou mouse.\n\n\nCom essa preocupa\u00e7\u00e3o em mente, implemente fun\u00e7\u00f5es impuras com muito cuidado. Um pipe custose ou de longa dura\u00e7\u00e3o pode destruir a experi\u00eancia do usu\u00e1rio.\n\n\nUm pipe impuro do \nFlyingHeroesPipe\n\u00b6\n\n\nUma simples flag transforma o \nFlyingHeroesPipe\n em um \nFlyingHeroesImpurePipe\n.\nA implementa\u00e7\u00e3o completa \u00e9 a seguinte:\n\n\n1\n2\n3\n4\n5\n@\nPipe\n({\n\n  \nname\n:\n \n'flyingHeroesImpure'\n,\n\n  \npure\n:\n \nfalse\n\n\n})\n\n\nexport\n \nclass\n \nFlyingHeroesImpurePipe\n \nextends\n \nFlyingHeroesPipe\n \n{}\n\n\n\n\n\n\n\nVoc\u00ea herda do \nFlyingHeroesPipe\n pra provar o ponto de que nada mudou internamente. A \u00fanica diferen\u00e7a \u00e9 a flag \npure\n no metadado.\n\n\nEsse \u00e9 um bom candidato a fun\u00e7\u00e3o impura pois a fun\u00e7\u00e3o de transforma\u00e7\u00e3o \u00e9 trivial e r\u00e1pida.\n\n\n1\nreturn\n \nallHeroes\n.\nfilter\n(\nhero\n \n=>\n \nhero\n.\ncanFly\n);\n\n\n\n\n\n\n\nVoc\u00ea pode derivar o componente \nFlyingHeroesImpureComponent\n do \nFlyingHeroesComponent\n.\n\n\n1\n2\n3\n<\ndiv\n \n*\nngFor\n=\n\"let hero of (heroes | flyingHeroesImpure)\"\n>\n\n  {{hero.name}}\n\n</\ndiv\n>\n\n\n\n\n\n\n\nA \u00fanica mudan\u00e7a real \u00e9 o \npipe\n no template. Voc\u00ea pode confirmar no \nexemplo\n que a lista de her\u00f3is que voam atualiza assim que voc\u00ea adiciona novos her\u00f3is ou modifique um her\u00f3i do \narray\n.\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nexercicio-13-pipes/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- exponential-strength.pipe.ts\n|  |  |-- flying-heroes-impure.component.html\n|  |  |-- flying-heroes-impure.component.ts\n|  |  |-- flying-heroes-impure.pipe.html\n|  |  |-- flying-heroes.component.html\n|  |  |-- flying-heroes.component.ts\n|  |  |-- flying-heroes.pipe.ts\n|  |  |-- heroes.ts\n|  |  |-- power-boost-calculator.component.ts\n|  |  |-- power-booster.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nOutros pipes (ainda n\u00e3o traduzidos)\n\u00b6\n\n\n\n\nAsyncPipe\n - Ex.: \nmessage$ | async\n - Para trabalhar com Observables.\n\n\nFetchJsonPipe\n - Um exemplo de como usar pipes impuros para fazer cache de dados de APIs.\n\n\nJsonPipe\n - pode ajudar no debug. Ex.: \nmyData | json\n\n\nDiferente do AngularJS, o Angular (2+) n\u00e3o oferece pipes para filtro/ordena\u00e7\u00e3o no \n*ngFor\n. Saiba os motivos na \nrefer\u00eancia oficial\n.\n\n\n\n\nResumo\n\u00b6\n\n\nPipes oferecem um \u00f3timo jeito de encapsular e compartilhar transforma\u00e7\u00f5es comuns de tela-valor. Use eles como estilos, aplicando em express\u00f5es do template para enriquecer recursos e usabilidade de suas telas.\n\n\nConhe\u00e7a os pipes embutidos do Angular acessando a \nRefer\u00eancia da API\n. Tente escrever pipes customizados e, quem sabe, contribuir com a comunidade.\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 14",
            "title": "13 - Pipes"
        },
        {
            "location": "/exercicios/exercicio-13/#exercicio-13",
            "text": "",
            "title": "Exerc\u00edcio 13"
        },
        {
            "location": "/exercicios/exercicio-13/#objetivos",
            "text": "Criar o nossa pr\u00f3prio pipe",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-13/#duracao",
            "text": "30 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-13/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-13-pipes  e deixe-a rodando:  1\n2\n3 ng new exercicio-13-pipes cd  exercicio-13-pipes\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-13/#pipes-customizados",
            "text": "Voc\u00ea pode criar o seu pr\u00f3prio pipe customizado. Abaixo temos um pipe customizado chamado  ExponentialStrengthPipe  que pode aumentar os poderes do her\u00f3i:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   {   Pipe ,   PipeTransform   }   from   '@angular/core' ;  /*   * Aumenta o valor exponencialmente.   *   * Uso:   *   value | exponentialStrength:exponent   * Exemplo:   *   {{ 2 | exponentialStrength:10 }}   *   resulta em: 1024  */  @ Pipe ({   name :   'exponentialStrength'   })  export   class   ExponentialStrengthPipe   implements   PipeTransform   { \n   transform ( value :   number ,   exponent :   string ) :   number   { \n     const   exp   =   parseFloat ( exponent ); \n     return   Math . pow ( value ,   isNaN ( exp )   ?   1   :   exp ); \n   }  }    Essa defini\u00e7\u00e3o de pipe nos mostra o seguinte:   Um pipe \u00e9 uma  classe decorada  por pelos metadados de pipe ( @Pipe({}) ).  A classe pipe implementa o m\u00e9todo  transform()  da interface  PipeTransform  que recebe como entrada o valor ( value ) seguido do par\u00e2metro de exponencial ( exponent ) e retorna o valor transformado.  Existir\u00e1 um argumento adicional para o m\u00e9todo  transform  para cada par\u00e2metro passado ao pipe. No exemplo, o seu pipe tem apenas um par\u00e2metro que \u00e9 o  exponent .  Para informar ao Angular que essa classe \u00e9 um pipe, voc\u00ea deve aplicar o  decorator   @Pipe , que voc\u00ea deve importar da biblioteca  core  do Angular.  O  decorator   @Pipe  permite voc\u00ea definir um nome para o pipe e esse nome ser\u00e1 usado nos templates. Esse nome deve ser um identificador Javascript v\u00e1lido. Conforme o exemplo, o nome do seu pipe \u00e9  exponentialStrength .   Agora, voc\u00ea precisa de um componente para demonstrar o uso do pipe.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'power-booster' , \n   template :   `      <h2>Power Booster</h2>      <p>Super poder aumentado: {{2 | exponentialStrength: 10}}</p>    `  })  export   class   PowerBoosterComponent   {}     Note o seguinte:   Voc\u00ea usa o seu pipe customizado da mesma forma que os pipes nativos ( built-in pipes ).  Voc\u00ea deve incluir o seu pipe nas declara\u00e7\u00e3o de  array  do  AppModule .",
            "title": "Pipes customizados"
        },
        {
            "location": "/exercicios/exercicio-13/#calculadora-do-aumento-de-poder",
            "text": "N\u00e3o \u00e9 muito divertio atualizar o template para testar o pipe customizado. Atualize o exemplo para \"Calculadora do Aumento de Poder\" que ir\u00e1 combinar o uso do pipe com  two-way data binding  do  ngModel .   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 import   {   Component   }   from   '@angular/core' ;  @ Component ({ \n   selector :   'power-boost-calculator' , \n   template :   `      <h2>Calculadora do Aumento de Poder</h2>      <div>Poder normal: <input [(ngModel)]=\"power\"></div>      <div>Fator de Aumento: <input [(ngModel)]=\"factor\"></div>      <p>        Supder poder do Her\u00f3i: {{power | exponentialStrength: factor}}      </p>    `  })  export   class   PowerBoostCalculatorComponent   { \n   power   =   5 ; \n   factor   =   1 ;  }",
            "title": "Calculadora do Aumento de Poder"
        },
        {
            "location": "/exercicios/exercicio-13/#pipes-e-change-detection",
            "text": "Angular procura por mudan\u00e7as nos valores no  data-bind  atrav\u00e9s de um processo de  change detection  que executa ap\u00f3s  cada evento de DOM : qualquer uso do teclado, movimento do mouse,  tick  do  timer  (do navegador) e respostas do servidor. Isso pode ser  muito custoso . Angular se esfor\u00e7a para diminuir os custos sempre que poss\u00edvel.  Angular usa um algoritimo simples e r\u00e1pido de detec\u00e7\u00e3o de mudan\u00e7a ( change detection ) quando voc\u00ea usa um pipe.",
            "title": "Pipes e change detection"
        },
        {
            "location": "/exercicios/exercicio-13/#sem-pipe",
            "text": "No pr\u00f3ximo exemplo, o componente usa a estrat\u00e9gia padr\u00e3o de  change detection  para monitorar e atualizar a tela em cada her\u00f3i da lista de her\u00f3is ( heroes   array ). Veja o template:  1\n2\n3\n4\n5\n6\n7\n8 Novo her\u00f3i:\n   < input   type = \"text\"   # box \n           ( keyup . enter )=\" addHero ( box . value );   box . value = '' \" \n           placeholder = \"Nome do her\u00f3i\" > \n   < button   type = \"reset\"   ( click )=\" reset ()\" > Limpar </ button > \n   < div   * ngFor = \"let hero of heroes\" > \n    {{hero.name}}\n   </ div >     A classe complementar do comopnente prov\u00ea: uma lista de her\u00f3is, um m\u00e9todo para adicionar um her\u00f3i \u00e0 lista e um m\u00e9todo para limpar a lista.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 export   class   FlyingHeroesComponent   { \n   heroes :   any []   =   []; \n   canFly   =   true ; \n\n   constructor ()   { \n     this . reset (); \n   } \n\n   addHero ( name :   string )   { \n     name   =   name . trim (); \n     if   ( ! name )   { \n       return ; \n     } \n     let   hero   =   {   name ,   canFly :   this . canFly   }; \n     this . heroes . push ( hero ); \n   } \n\n   reset ()   { \n     this . heroes   =   HEROES . slice (); \n   }  }    Voc\u00ea pode adicionar her\u00f3is e o Angular ir\u00e1 atualizar a tela quando voc\u00ea fizer isso.\nSe voc\u00ea clicar o bot\u00e3o de \"limpar\", o Angular ir\u00e1 substituir a lista de her\u00f3is por um novo  array  com os her\u00f3is originais e ir\u00e1 atualizar a tela.\nSe voc\u00ea adicionar a funcionalidade de remover ou alterar um her\u00f3i, o Angular iria detectar essas mudan\u00e7as e tamb\u00e9m iria atualizar a tela.",
            "title": "Sem pipe"
        },
        {
            "location": "/exercicios/exercicio-13/#flyingheroespipe",
            "text": "Adicione o pipe  FlyingHeroesPipe  ao  *ngFor  para filtrar a lista de her\u00f3is e mostrar apenas os her\u00f3is que podem voar ( canFly=true ).  1\n2\n3 < div   * ngFor = \"let hero of (heroes | flyingHeroes)\" > \n  {{hero.name}} </ div >    Aqui est\u00e1 a implementa\u00e7\u00e3o do  FlyingHeroesPipe , que segue o padr\u00e3o de pipe customizado conforme descrevemos anteriormente.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 import   {   Pipe ,   PipeTransform   }   from   '@angular/core' ;  import   {   Flyer   }   from   './heroes' ;  @ Pipe ({   name :   'flyingHeroes'   })  export   class   FlyingHeroesPipe   implements   PipeTransform   { \n   transform ( allHeroes :   Flyer [])   { \n     return   allHeroes . filter ( hero   =>   hero . canFly ); \n   }  }    Repare no comportamento estranho no exemplo (  live example  /  download example  ):\nquando voc\u00ea adiciona her\u00f3is que voam, nenhum deles \u00e9 apresentado na lista de \"Her\u00f3is que voam\"  Apesar de voc\u00ea n\u00e3o conseguir o comportamento que voc\u00ea queria, o Angular n\u00e3o est\u00e1 quebrado. Ele est\u00e1 apenas usando um algoritmo diferente de  change-detection  que ignora as mudan\u00e7as na na lista ou em qualquer de seus itens.  Repare como um her\u00f3i \u00e9 adicionado:  1 this . heroes . push ( hero );    Voc\u00ea adiciona um her\u00f3i na lista de her\u00f3is (o  array ). A refer\u00eancia ao  array  n\u00e3o mudou. \u00c9 o mesmo array. E \u00e9 s\u00f3 isso que importa pro Angular agora. Partindo dessa perspectiva: mesmo  array , sem mudan\u00e7as, sem tela pra atualizar.  Para \"consertar\" isso, crie um novo  array  como o novo her\u00f3i e atribua \u00e0 lista de her\u00f3is. Dessa forma, o Angular detecta que a refer\u00eancia ao  array  mudou. Isso executa o  pipe  e atualiza a tela com o novo array (que cont\u00e9m o novo her\u00f3i).  Se voc\u00ea modifica o  array , nenhum  pipe  \u00e9 invocado e a tela n\u00e3o \u00e9 atualizada. Se voc\u1ebd substituir o  array , o  pipe  \u00e9 executado e a tela \u00e9 atualizada. A aplica\u00e7\u00e3o \" Flying Heroes \" estende o c\u00f3digo com um checkbox e dois exemplos de visualiza\u00e7\u00e3o (com e sem pipe) para te ajudar a perceber esses comportamentos.   Substituindo o  array  \u00e9 uma forma eficiente de avisar ao Angular para atualizar a tela. Quando voc\u00ea substitui o  array ? Quando o dado mudar. Essa \u00e9 uma regra f\u00e1cil de seguir nesse exemplo onde a \u00fanica altera\u00e7\u00e3o no dado \u00e9 atrav\u00e9s da adi\u00e7\u00e3o de um her\u00f3i.  Por\u00e9m, \u00e9 bem comum voc\u00ea passar por situa\u00e7\u00f5es nas quais voc\u00ea n\u00e3o sabe quando o dado foi alterado, especialmente em aplica\u00e7\u00f5es que alteram o dado de diferentes formas ou em locais diferentes e/ou distantes. Um componente nesse tipo de aplica\u00e7\u00e3o normalmente n\u00e3o consegue saber sobre essas mudan\u00e7as. Al\u00e9m disso, \u00e9 imprudente deformar o projeto do componente para adaptar um  pipe . Tente manter a classe do componente independente do HTML. O componente deve desconhecer a exist\u00eancia dos  pipes .  Para o filtro dos her\u00f3is que voam, considere o uso de  pipes impuros .",
            "title": "FlyingHeroesPipe"
        },
        {
            "location": "/exercicios/exercicio-13/#pipes-puros-e-impuros",
            "text": "Existem duas categorias de pipes: puros e impuros. Pipes s\u00e3o puros por padr\u00e3o. Todos os pipes que voc\u00ea viu at\u00e9 agora tem sido os puros. Voc\u00ea define um pipe como impuro adicionando uma  flag   pure: false  ao seu  decorator . Voc\u00ea poderia definir o pipe  FlyingHeroesPipe  como impuro da seguinte forma:  1\n2\n3\n4 @ Pipe ({ \n   name :   'flyingHeroesImpure' , \n   pure :   false  })    Antes de fazer isso, entenda a diferen\u00e7a entre puro e impuro - come\u00e7ando com um pipe puro.",
            "title": "Pipes Puros e Impuros"
        },
        {
            "location": "/exercicios/exercicio-13/#pipes-puros",
            "text": "O Angular executa um pipe puro apenas quando ele detecta uma mudan\u00e7a \"pura\" no valor de entrada ( input ).\nUma mudan\u00e7a pura pode ser tanto uma mudan\u00e7a em uma entrada do \"tipo primitivo\" ( String ,  Number ,  Boolean ,  Symbol ) quanto uma mudan\u00e7a na refer\u00eancia ao objeto ( Date ,  Array ,  Function ,  Object ).  O Angular ignora as mudan\u00e7as dentro de objetos compostos. Ou seja, o pipe puro n\u00e3o ser\u00e1 executado se voc\u00ea: fizer uma mudan\u00e7a no m\u00eas de uma data, adicionar um elemento ao  array  de entrada, ou atualizar uma propriedade de um objeto de entrada.  Isso pode parecer restritivo mas tamb\u00e9m \u00e9 r\u00e1pido. A verifica\u00e7\u00e3o da refer\u00eancia a um objeto \u00e9 muito mais r\u00e1pida que uma verifica\u00e7\u00e3o profunda ( deep check ). Ent\u00e3o, o Angular consegue rapidamente determinar se pode pular ambas as estapas de execu\u00e7\u00e3o de pipe e atualiza\u00e7\u00e3o da tela.  Por essa raz\u00e3o, pipes puros s\u00e3o prefer\u00edveis quando voc\u00ea pode conviver com a estrat\u00e9gia de detec\u00e7\u00e3o de mudan\u00e7as. Quando voc\u00ea n\u00e3o consegue, voc\u00ea pode usar os pipes impuros.",
            "title": "Pipes Puros"
        },
        {
            "location": "/exercicios/exercicio-13/#pipes-impuros",
            "text": "O Angular executa um pipe impuro durante todo ciclo de detec\u00e7\u00e3o de mudan\u00e7a do componente. Um pipe impuro \u00e9 chamado com frequ\u00eancia, t\u00e3o frequente quanto qualquer evento de teclado ou mouse.  Com essa preocupa\u00e7\u00e3o em mente, implemente fun\u00e7\u00f5es impuras com muito cuidado. Um pipe custose ou de longa dura\u00e7\u00e3o pode destruir a experi\u00eancia do usu\u00e1rio.",
            "title": "Pipes Impuros"
        },
        {
            "location": "/exercicios/exercicio-13/#um-pipe-impuro-do-flyingheroespipe",
            "text": "Uma simples flag transforma o  FlyingHeroesPipe  em um  FlyingHeroesImpurePipe .\nA implementa\u00e7\u00e3o completa \u00e9 a seguinte:  1\n2\n3\n4\n5 @ Pipe ({ \n   name :   'flyingHeroesImpure' , \n   pure :   false  })  export   class   FlyingHeroesImpurePipe   extends   FlyingHeroesPipe   {}    Voc\u00ea herda do  FlyingHeroesPipe  pra provar o ponto de que nada mudou internamente. A \u00fanica diferen\u00e7a \u00e9 a flag  pure  no metadado.  Esse \u00e9 um bom candidato a fun\u00e7\u00e3o impura pois a fun\u00e7\u00e3o de transforma\u00e7\u00e3o \u00e9 trivial e r\u00e1pida.  1 return   allHeroes . filter ( hero   =>   hero . canFly );    Voc\u00ea pode derivar o componente  FlyingHeroesImpureComponent  do  FlyingHeroesComponent .  1\n2\n3 < div   * ngFor = \"let hero of (heroes | flyingHeroesImpure)\" > \n  {{hero.name}} </ div >    A \u00fanica mudan\u00e7a real \u00e9 o  pipe  no template. Voc\u00ea pode confirmar no  exemplo  que a lista de her\u00f3is que voam atualiza assim que voc\u00ea adiciona novos her\u00f3is ou modifique um her\u00f3i do  array .",
            "title": "Um pipe impuro do FlyingHeroesPipe"
        },
        {
            "location": "/exercicios/exercicio-13/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 exercicio-13-pipes/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- exponential-strength.pipe.ts\n|  |  |-- flying-heroes-impure.component.html\n|  |  |-- flying-heroes-impure.component.ts\n|  |  |-- flying-heroes-impure.pipe.html\n|  |  |-- flying-heroes.component.html\n|  |  |-- flying-heroes.component.ts\n|  |  |-- flying-heroes.pipe.ts\n|  |  |-- heroes.ts\n|  |  |-- power-boost-calculator.component.ts\n|  |  |-- power-booster.component.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-13/#outros-pipes-ainda-nao-traduzidos",
            "text": "AsyncPipe  - Ex.:  message$ | async  - Para trabalhar com Observables.  FetchJsonPipe  - Um exemplo de como usar pipes impuros para fazer cache de dados de APIs.  JsonPipe  - pode ajudar no debug. Ex.:  myData | json  Diferente do AngularJS, o Angular (2+) n\u00e3o oferece pipes para filtro/ordena\u00e7\u00e3o no  *ngFor . Saiba os motivos na  refer\u00eancia oficial .",
            "title": "Outros pipes (ainda n\u00e3o traduzidos)"
        },
        {
            "location": "/exercicios/exercicio-13/#resumo",
            "text": "Pipes oferecem um \u00f3timo jeito de encapsular e compartilhar transforma\u00e7\u00f5es comuns de tela-valor. Use eles como estilos, aplicando em express\u00f5es do template para enriquecer recursos e usabilidade de suas telas.  Conhe\u00e7a os pipes embutidos do Angular acessando a  Refer\u00eancia da API . Tente escrever pipes customizados e, quem sabe, contribuir com a comunidade.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-13/#proximo-passo",
            "text": "Exerc\u00edcio 14",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-14/",
            "text": "Exerc\u00edcio 14\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nConstruir um formul\u00e1rio com a abordagem \ntemplate-driven\n, com \ntwo-way data binding\n, controle de estado e valida\u00e7\u00f5es customizadas.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-angular-forms\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-angular-forms\n\ncd\n exercicio-angular-forms\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nIntrodu\u00e7\u00e3o\n\u00b6\n\n\nVoc\u00ea pode construir qualquer formul\u00e1rio na abordagem \ntemplate-driven\n: voc\u00ea pode fazer binding de elementos de formul\u00e1rios (por exemplo: \n<input>\n, \n<select>\n) ao modelo de dados da sua aplica\u00e7\u00e3o; voc\u00ea pode especificar regras de valida\u00e7\u00e3o (e exibir os erros quando alguma regra falhar); voc\u00ea pode habilitar (ou desabilitar) elementos de formul\u00e1rios espec\u00edficos condicionalmente; e muito mais. O Angular torna ese processo mais f\u00e1cil, ao tratar muitas das tarefas repetitivas na constru\u00e7\u00e3o de formul\u00e1rios.\n\n\nNesse exerc\u00edcio, iremos construir um formul\u00e1rio como abaixo:\n\n\n\n\nDois dos tr\u00eas campos desse formul\u00e1rio s\u00e3o de preenchimento obrigat\u00f3rio. Campos obrigat\u00f3rios s\u00e3o marcados com uma barra verde \u00e0 esquerda, para facilitar sua identifica\u00e7\u00e3o.\n\n\nSe voc\u00ea apagar o nome do her\u00f3i, o formul\u00e1rio ir\u00e1 exibir um erro de valida\u00e7\u00e3o:\n\n\n\n\nObserve que o bot\u00e3o \"Submit\" est\u00e1 desabilitado, e que a cor da barra \u00e0 esquerda do campo obrigat\u00f3rio muda de verde para vermelho.\n\n\nVoc\u00ea ir\u00e1 construir esse formul\u00e1rio seguindo os passos:\n\n\n\n\nCriar a classe de modelo \nHero\n\n\nCriar o componente que controla o formul\u00e1rio\n\n\nCriar o template inicial do formul\u00e1rio\n\n\nFazer o binding entre os elementos do formul\u00e1rio e as propriedades do componente com \nngModel\n\n\nAdicionar um atributo \nname\n para cada elemento do formul\u00e1rio\n\n\nAdicionar CSS para um feedback visual\n\n\nExibir e esconder mensagens de erro de valida\u00e7\u00e3o\n\n\nTratar submiss\u00e3o de formul\u00e1rio com \nngSubmit\n\n\nDesabilitar o bot\u00e3o de submiss\u00e3o do formul\u00e1rio at\u00e9 que o formul\u00e1rio esteja v\u00e1lido\n\n\n\n\nCrie a classe de modelo \nHero\n\u00b6\n\n\nNa medida em que o usu\u00e1rio preenche o formul\u00e1rio, voc\u00ea ir\u00e1 capturar as mudan\u00e7as e atualizar uma inst\u00e2ncia de um modelo de dados. Ent\u00e3o, para criar uma estrutura inicial do formul\u00e1rio, precisamos saber como \u00e9 a estrutura desse modelo de dados.\n\n\nUma classe de modelo pode ser simples como uma \"sacola de propriedades\", que guarda fatos sobre uma entidade da sua aplica\u00e7\u00e3o. Essa \u00e9 uma boa descri\u00e7\u00e3o para a classe \nHero\n com seus tr\u00eas campos obrigat\u00f3rios (\nid\n, \nname\n e \npower\n) e um campo opcional (\nalterEgo\n).\n\n\nUsando o Angular CLI, gere uma nova classe chamada \nHero\n:\n\n\n1\nng generate class Hero\n\n\n\n\n\n\nO conte\u00fado da classe deve ser como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nexport\n \nclass\n \nHero\n \n{\n\n\n  \nconstructor\n(\n\n    \npublic\n \nid\n:\n \nnumber\n,\n\n    \npublic\n \nname\n:\n \nstring\n,\n\n    \npublic\n \npower\n:\n \nstring\n,\n\n    \npublic\n \nalterEgo\n?:\n \nstring\n\n  \n)\n \n{\n  \n}\n\n\n\n}\n\n\n\n\n\n\n\n\u00c9 um modelo an\u00eamico, com poucos requisitos e nenhum comportamento. Perfeito para o nosso exerc\u00edcio.\n\n\nO compilador TypeScript gera uma propriedade p\u00fablica para cada um dos par\u00e2metros p\u00fablicos do construtor, e automaticamente atribui o valor do par\u00e2metro \u00e0 propriedade correspondente.\n\n\nO par\u00e2metro \nalterEgo\n \u00e9 opcional, ent\u00e3o o construtor permite que voc\u00ea omita esse par\u00e2metro na constru\u00e7\u00e3o de uma nova inst\u00e2ncia (note o ponto de interroga\u00e7\u00e3o \"?\" no par\u00e2metro \nalterEgo?\n)\n\n\nVoc\u00ea pode, ent\u00e3o, criar um novo her\u00f3i na seguinte forma:\n\n\n1\n2\nconst\n \nmyHero\n \n=\n  \nnew\n \nHero\n(\n42\n,\n \n'SkyDog'\n,\n \n'Fetch any object at any distance'\n,\n \n'Leslie Rollover'\n);\n\n\nconsole\n.\nlog\n(\n'My hero is called '\n \n+\n \nmyHero\n.\nname\n);\n \n// \"My hero is called SkyDog\"\n\n\n\n\n\n\n\nCrie o componente que controla o formul\u00e1rio\n\u00b6\n\n\nUm formul\u00e1rio Angular possui duas partes: um template (baseado em HTML) e uma classe de componente para tratar os dados do formul\u00e1rio e a intera\u00e7\u00e3o do usu\u00e1rio programaticamente.\n\n\nUsando o Angular CLI, gere um novo componente chamado \nHeroForm\n:\n\n\n1\nng generate component HeroForm\n\n\n\n\n\n\nO conte\u00fado deve ser o seguinte:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nHero\n \n}\n    \nfrom\n \n'../hero'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-form'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-form.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./hero-form.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nHeroFormComponent\n \n{\n\n\n  \npowers\n \n=\n \n[\n'Really Smart'\n,\n \n'Super Flexible'\n,\n\n            \n'Super Hot'\n,\n \n'Weather Changer'\n];\n\n\n  \nmodel\n \n=\n \nnew\n \nHero\n(\n18\n,\n \n'Dr IQ'\n,\n \nthis\n.\npowers\n[\n0\n],\n \n'Chuck Overstreet'\n);\n\n\n  \nsubmitted\n \n=\n \nfalse\n;\n\n\n  \nonSubmit\n()\n \n{\n \nthis\n.\nsubmitted\n \n=\n \ntrue\n;\n \n}\n\n\n  \n// TODO: remover isso when we're done\n\n  \nget\n \ndiagnostic\n()\n \n{\n \nreturn\n \nJSON\n.\nstringify\n(\nthis\n.\nmodel\n);\n \n}\n\n\n}\n\n\n\n\n\n\n\nN\u00e3o h\u00e1 nada de especial sobre esse componente; nada relacionado a formul\u00e1rios e nada que o diferencie dos outros componentes que j\u00e1 escrevemos em exerc\u00edcios anteriores.\n\n\nJ\u00e1 cobrimos os seguintes conceitos anteriormente:\n\n\n\n\nO c\u00f3digo importa a biblioteca \n@angular/core\n e a classe \nHero\n que acabamos de criar.\n\n\nO seletor \nhero-form\n do decorador \n@Component\n significa que voc\u00ea pode usar esse componente em um template com a tag customizada \n<hero-form>\n.\n\n\nA propriedade \ntemplateUrl\n aponta para um arquivo separado do template HTML.\n\n\nDefinimos dados de teste para o \nmodel\n e \npowers\n, para facilitar a demonstra\u00e7\u00e3o.\n\n\nAdicionamos uma propriedade de diagn\u00f3stico para retornar a representa\u00e7\u00e3o JSON do modelo. Ela ir\u00e1 nos ajudar durante a constru\u00e7\u00e3o do formul\u00e1rio, mas pode ser apagada posteriormente.\n\n\n\n\nRevise o arquivo \napp.module.ts\n\u00b6\n\n\nO arquivo \napp.module.ts\n define o m\u00f3dulo raiz da aplica\u00e7\u00e3o. Nesse m\u00f3dulo, voc\u00ea identifica os m\u00f3dulos externos que voc\u00ea ir\u00e1 usar na sua aplica\u00e7\u00e3o e declara os componentes que pertencem ao seu m\u00f3dulo, tal como o \nHeroFormComponent\n.\n\n\nPara utilizar as diretivas espec\u00edficas de formul\u00e1rios na abordagem \ntemplate-driven\n, voc\u00ea precisa adicionar o m\u00f3dulo \nFormsModule\n (da biblioteca \n@angular/forms\n) ao array \nimports\n do m\u00f3dulo da sua aplica\u00e7\u00e3o.\n\n\nAtualize o arquivo \napp.module.ts\n como a seguir:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nimport\n \n{\n \nNgModule\n \n}\n      \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nFormsModule\n \n}\n   \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n  \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroFormComponent\n \n}\n \nfrom\n \n'./hero-form/hero-form.component'\n;\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nFormsModule\n\n  \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHeroFormComponent\n\n  \n],\n\n  \nproviders\n:\n \n[],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nS\u00e3o duas altera\u00e7\u00f5es:\n\n\n\n\nVoc\u00ea importou o s\u00edmbolo \nFormsModule\n.\n\n\nVoc\u00ea adicionou o \nFormsModule\n \u00e0 lista de \nimports\n definida no decorador \n@NgModule\n. Isso d\u00e1 \u00e0 aplica\u00e7\u00e3o o acesso a todas as funcionalidades de formul\u00e1rios da abordagem \ntemplate-driven\n (incluindo a diretiva \nngModel\n).\n\n\n\n\nRevise o arquivo \napp.component.html\n\u00b6\n\n\nO componente \nAppComponent\n \u00e9 o componente raiz da aplica\u00e7\u00e3o. Ele ir\u00e1 usar o novo componente \nHeroFormComponent\n.\n\n\nTroque o conte\u00fado do template do \nAppComponent\n pelo seguinte:\n\n\n1\n<\napp-hero-form\n></\napp-hero-form\n>\n\n\n\n\n\n\n\nCrie o template inicial do formul\u00e1rio\n\u00b6\n\n\nModifique o conte\u00fado do arquivo \nhero-form.component.html\n para ficar como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n<\ndiv\n \nclass\n=\n\"container\"\n>\n\n    \n<\nh1\n>\nHero Form\n</\nh1\n>\n\n    \n<\nform\n>\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nfor\n=\n\"name\"\n>\nNome\n</\nlabel\n>\n\n        \n<\ninput\n \nid\n=\n\"name\"\n \ntype\n=\n\"text\"\n \nclass\n=\n\"form-control\"\n \nrequired\n>\n\n      \n</\ndiv\n>\n\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nfor\n=\n\"alterEgo\"\n>\nAlter Ego\n</\nlabel\n>\n\n        \n<\ninput\n \nid\n=\n\"alterEgo\"\n \ntype\n=\n\"text\"\n \nclass\n=\n\"form-control\"\n>\n\n      \n</\ndiv\n>\n\n\n      \n<\nbutton\n \ntype\n=\n\"submit\"\n \nclass\n=\n\"btn btn-success\"\n>\nSubmit\n</\nbutton\n>\n\n\n    \n</\nform\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nEstamos usando HTML5 puro. Estamos representando dois dos campos da classe de modelo \nHero\n (\nname\n e \nalterEgo\n) como elementos \n<input>\n.\n\n\nO elemento \n<input>\n para a propriedade \nname\n possui o atributo HTML \nrequired\n; o elemento \n<input>\n para a propriedade \nalterEgo\n n\u00e3o possui esse atributo, pois ele \u00e9 opcional.\n\n\nAo final do formul\u00e1rio, adicionamos o bot\u00e3o do tipo \nsubmit\n.\n\n\nPerceba que voc\u00ea n\u00e3o est\u00e1 usando nada do Angular ainda. N\u00e3o h\u00e1 bindings ou diretivas extras, somente layout.\n\n\nAs classes CSS \ncontainer\n, \nform-group\n, \nform-control\n e \nbtn\n s\u00e3o da biblioteca \nBootstrap\n. Essas classes s\u00e3o puramente visuais, e n\u00e3o afetam o \nfuncionamento\n do formul\u00e1rio de nenhuma forma.\n\n\nPara adicionar a folha de estilos do Bootstrap, abra o arquivo \nstyles.css\n e adicione a seguinte linha:\n\n\n1\n@\nimport\n \nurl\n(\n'https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css'\n)\n;\n\n\n\n\n\n\n\n\n\nDICA: bootstrap\n\n\nA forma descrita acima \nn\u00e3o \u00e9\n recomendada para projetos reais.\nO melhor jeito de instalar o bootstrap em projetos angular est\u00e1 descrito na \nwiki do Angular CLI\n.\n\n\n\n\nAdicione poderes com \n*ngFor\n\u00b6\n\n\nO her\u00f3i precisa escolher um super-poder a partir de uma lista fixa de poderes pr\u00e9-aprovados pela Ag\u00eancia de RH. Voc\u00ea mant\u00e9m essa lista internamente no \nHeroFormComponent\n.\n\n\nVoc\u00ea vai adicionar um \n<select>\n ao formul\u00e1rio e fazer o binding das op\u00e7\u00f5es com a lista de super-poderes usando a diretiva \nngFor\n. J\u00e1 vimos como fazer isso em um exerc\u00edcio anterior, ent\u00e3o adicione o seguinte trecho HTML abaixo do \nform-group\n para a propriedade \nalterEgo\n:\n\n\n1\n2\n3\n4\n5\n6\n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n  \n<\nlabel\n \nfor\n=\n\"power\"\n>\nHero Power\n</\nlabel\n>\n\n  \n<\nselect\n \nid\n=\n\"power\"\n \nclass\n=\n\"form-control\"\n \nrequired\n>\n\n    \n<\noption\n \n*\nngFor\n=\n\"let pow of powers\"\n \n[\nvalue\n]=\"\npow\n\"\n>\n{{pow}}\n</\noption\n>\n\n  \n</\nselect\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nEsse c\u00f3digo repete a tag \n<option>\n para cada poder na lista de super-poderes. A vari\u00e1vel de template \npow\n guarda um poder diferente em cada itera\u00e7\u00e3o; voc\u00ea exibe o nome do super-poder usando a sintaxe de interpola\u00e7\u00e3o (\n{{pow}}\n).\n\n\nTwo-way data binding\n com \nngModel\n\u00b6\n\n\nSe voc\u00ea rodar a aplica\u00e7\u00e3o agora, ver\u00e1 algo como:\n\n\n\n\nAinda n\u00e3o estamos vendo os dados do her\u00f3i que definimos no componente, pois n\u00e3o fizemos os bindings dos elementos HTML com a propriedade \nhero\n do componente.\n\n\nPara fazer o binding dos elementos do formul\u00e1rio com o modelo de dados, vamos usar a sintaxe \n[(ngModel)]\n.\n\n\nModifique o \n<input>\n para o nome do her\u00f3i como abaixo:\n\n\n1\n2\n3\n<\ninput\n \ntype\n=\n\"text\"\n \nid\n=\n\"name\"\n \nname\n=\n\"name\"\n \nrequired\n \nclass\n=\n\"form-control\"\n\n       \n[(\nngModel\n)]=\"\nmodel\n.\nname\n\"\n>\n\nTODO: remover isso: {{model.name}}\n\n\n\n\n\n\nDefina uma vari\u00e1vel de template para o formul\u00e1rio. Atualize a tag \n<form>\n com \n#heroForm=\"ngForm\"\n como abaixo:\n\n\n1\n<\nform\n \n#\nheroForm\n=\n\"ngForm\"\n>\n\n\n\n\n\n\n\nA vari\u00e1vel \nheroForm\n agora \u00e9 uma refer\u00eancia para a diretiva \nNgForm\n que governa o formul\u00e1rio como um todo.\n\n\nA diretiva \nNgForm\n\u00b6\n\n\nO Angular automaticamente cria e liga uma diretiva \nNgForm\n ao elemento \n<form>\n.\n\n\nA diretiva \nNgForm\n \u00e9 um \"suplemento\" ao elemento de formul\u00e1rio, adicionando novas funcionalidades, guardando a refer\u00eancia dos controles que voc\u00ea criou para os elementos HTML com a diretiva \nngModel\n, monitorando as propriedades e o status de valida\u00e7\u00e3o desses controles, e o status de valida\u00e7\u00e3o do formul\u00e1rio como um todo.\n\n\nSe voc\u00ea rodar a aplica\u00e7\u00e3o agora e come\u00e7ar a digitar no campo do nome do her\u00f3i, adicionando e removendo caracteres, voc\u00ea ir\u00e1 ver o resultado na mensagem de diagn\u00f3stico:\n\n\n\n\nO diagn\u00f3stico \u00e9 uma evid\u00eancia de que as mudan\u00e7as nos valores do \n<input>\n est\u00e3o atualizando o modelo, e vice-versa. Isso \u00e9 o \ntwo-way data binding\n.\n\n\nNote que voc\u00ea tamb\u00e9m adicionou um atributo \nname\n ao elemento \n<input>\n com o valor \n\"name\"\n. A defini\u00e7\u00e3o desse atributo \u00e9 um pr\u00e9-requisito quando voc\u00ea usa a diretiva \n[(ngModel)]\n em um formul\u00e1rio.\n\n\nInternamente, para cada elemento HTML com \n[(ngModel)]\n, o Angular cria uma inst\u00e2ncia do tipo \nFormControl\n e a registra \u00e0 diretiva \nNgForm\n, usando o nome definido no atributo \nname\n.\n\n\nAdicione, agora, bindings \n[(ngModel)]\n para o \nalterEgo\n e \npower\n. O formul\u00e1rio deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n{{diagnostic}}\n\n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n  \n<\nlabel\n \nfor\n=\n\"name\"\n>\nNome\n</\nlabel\n>\n\n  \n<\ninput\n \nid\n=\n\"name\"\n \nname\n=\n\"name\"\n\n         \ntype\n=\n\"text\"\n \nclass\n=\n\"form-control\"\n\n         \nrequired\n\n         \n[(\nngModel\n)]=\"\nmodel\n.\nname\n\"\n>\n\n\n</\ndiv\n>\n\n\n\n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n  \n<\nlabel\n \nfor\n=\n\"alterEgo\"\n>\nAlter Ego\n</\nlabel\n>\n\n  \n<\ninput\n \nid\n=\n\"alterEgo\"\n \nname\n=\n\"alterEgo\"\n\n         \ntype\n=\n\"text\"\n \nclass\n=\n\"form-control\"\n\n         \n[(\nngModel\n)]=\"\nmodel\n.\nalterEgo\n\"\n>\n\n\n</\ndiv\n>\n\n\n\n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n  \n<\nlabel\n \nfor\n=\n\"power\"\n>\nHero Power\n</\nlabel\n>\n\n  \n<\nselect\n \nid\n=\n\"power\"\n \nname\n=\n\"power\"\n\n          \nclass\n=\n\"form-control\"\n\n          \nrequired\n\n          \n[(\nngModel\n)]=\"\nmodel\n.\npower\n\"\n>\n\n    \n<\noption\n \n*\nngFor\n=\n\"let pow of powers\"\n \n[\nvalue\n]=\"\npow\n\"\n>\n{{pow}}\n</\noption\n>\n\n  \n</\nselect\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nNote que:\n\n\n\n\nSubstitu\u00edmos a mensagem de diagn\u00f3stico espec\u00edfica para o nome do her\u00f3i, por uma mensagem de diagn\u00f3stico \"global\", que serve para todo o modelo.\n\n\nCada elemento \n<input>\n tem uma propriedade \nid\n que \u00e9 usada pelo elemento \n<label>\n.\n\n\nCada elemento \n<input>\n tem uma propriedade \nname\n que \u00e9 obrigat\u00f3ria para a constru\u00e7\u00e3o de formul\u00e1rios com a diretiva \nngModel\n.\n\n\n\n\nExecute a aplica\u00e7\u00e3o novamente e verifique as mudan\u00e7as ao modelo do her\u00f3i:\n\n\n\n\nA mensagem de diagn\u00f3stico no topo do formul\u00e1rio confirma que todas as suas mudan\u00e7as s\u00e3o refletidas no modelo. Se quiser, voc\u00ea j\u00e1 pode apagar o binding \n{{diagnostic}}\n, pois ele j\u00e1 serviu o seu prop\u00f3sito.\n\n\nMantendo controle do estado e da valida\u00e7\u00e3o com \nngModel\n\u00b6\n\n\nAo usar a diretiva \nngModel\n em um formul\u00e1rio, voc\u00ea ganha mais do que somente o \ntwo-way data binding\n. \n\n\nA diretiva n\u00e3o s\u00f3 controla o estado do elemento, mas tamb\u00e9m adiciona (e remove) classes CSS especiais que refletem o estado do elemento. Voc\u00ea pode usar essas classes CSS para modificar a apar\u00eancia do elemento:\n\n\n\n\n\n\n\n\nEstado\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\n\n\n\n\nO controle foi visitado?\n\n\nng-touched\n\n\nng-untouched\n\n\n\n\n\n\nO valor do controle foi modificado?\n\n\nng-dirty\n\n\nng-pristine\n\n\n\n\n\n\nO valor do controle \u00e9 v\u00e1lido?\n\n\nng-valid\n\n\nng-invalid\n\n\n\n\n\n\n\n\nTemporariamente, adicione uma vari\u00e1vel de refer\u00eancia (\n#spy\n) para inspecionar as classes CSS do elemento \n<input>\n do nome do her\u00f3i como abaixo:\n\n\n1\n2\n3\n4\n5\n<\ninput\n \ntype\n=\n\"text\"\n \nclass\n=\n\"form-control\"\n \nid\n=\n\"name\"\n\n  \nrequired\n\n  \n[(\nngModel\n)]=\"\nmodel\n.\nname\n\"\n \nname\n=\n\"name\"\n\n  \n#\nspy\n>\n\n\n<\nbr\n>\nTODO: remover isso: {{spy.className}}\n\n\n\n\n\n\nAgora, execute a aplica\u00e7\u00e3o e siga precisamente os seguintes passos:\n\n\n\n\nOlhe o formul\u00e1rio e n\u00e3o toque em nada.\n\n\nClique dentro do \n<input>\n do nome do her\u00f3i e ent\u00e3o clique fora do \n<input>\n.\n\n\nAdicione barras (\n/\n) ao final do nome.\n\n\nApague o nome.\n\n\n\n\nO efeito esperado \u00e9 como abaixo:\n\n\n\n\nVoc\u00ea deve ver as seguintes transi\u00e7\u00f5es nas classes CSS:\n\n\n\n\nO par \nng-valid\n/\nng-invalid\n \u00e9 o mais interessante, porque voc\u00ea quer mostrar um feedback visual para quando os valores estiverem inv\u00e1lido. Voc\u00ea tamb\u00e9m quer marcar os campos obrigat\u00f3rios. Para criar esse feedback, vamos adiciona regras para as classes CSS \nng-*\n.\n\n\nSe quiser, voc\u00ea pode apagar a vari\u00e1vel de refer\u00eancia \n#spy\n, pois ela j\u00e1 serviu o seu prop\u00f3sito.\n\n\nAdicione CSS para feedback visual\n\u00b6\n\n\nQueremos marcar os elementos do formul\u00e1rio de acordo com o estado e o status da valida\u00e7\u00e3o, como abaixo:\n\n\n\n\nPara conseguir esse efeito, crie um novo arquivo \nforms.css\n na pasta \nsrc/assets\n com o seguinte conte\u00fado:\n\n\n1\n2\n3\n4\n5\n6\n7\n.\nng-valid\n[\nrequired\n],\n \n.\nng-valid\n.\nrequired\n  \n{\n\n  \nborder-left\n:\n \n5\npx\n \nsolid\n \n#42A948\n;\n \n/* green */\n\n\n}\n\n\n\n.\nng-invalid\n:\nnot\n(\nform\n)\n  \n{\n\n  \nborder-left\n:\n \n5\npx\n \nsolid\n \n#a94442\n;\n \n/* red */\n\n\n}\n\n\n\n\n\n\n\nAtualize o \n<head>\n do arquivo \nindex.html\n para incluir o arquivo \nforms.css\n.\n\n\n1\n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"assets/forms.css\"\n>\n\n\n\n\n\n\n\nExibindo mensagens de erro de valida\u00e7\u00e3o\n\u00b6\n\n\nVoc\u00ea pode melhorar esse formul\u00e1rio.\n\n\nO \n<input>\n para o nome do her\u00f3i \u00e9 obrigat\u00f3rio e, se voc\u00ea apagar o seu conte\u00fado, a barra muda de verde para vermelho. Isso mostra que algo est\u00e1 errado, mas n\u00e3o diz exatamente o que o usu\u00e1rio deve fazer para consertar o erro.\n\n\nQuando o usu\u00e1rio apagar o nome, o formul\u00e1rio deveria mostrar uma mensagem como abaixo:\n\n\n\n\nPara fazer isso, siga os seguintes passos:\n\n\n\n\nAdicione uma vari\u00e1vel de refer\u00eancia para o \n<input>\n\n\nAdicione um novo elemento \n<div>\n com a mensagem \nO campo \"nome\" \u00e9 obrigat\u00f3rio\n logo abaixo do \n<input>\n. Esse novo \n<div>\n s\u00f3 deve ser exibido quando o controle estiver inv\u00e1lido.\n\n\n\n\nO template, ent\u00e3o, dever\u00e1 ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n<\nlabel\n \nfor\n=\n\"name\"\n>\nNome\n</\nlabel\n>\n\n\n<\ninput\n \ntype\n=\n\"text\"\n\n       \nid\n=\n\"name\"\n \nname\n=\n\"name\"\n\n       \nrequired\n\n       \nclass\n=\n\"form-control\"\n\n       \n[(\nngModel\n)]=\"\nmodel\n.\nname\n\"\n\n       \n#\nname\n=\n\"ngModel\"\n>\n\n\n<\ndiv\n \n[\nhidden\n]=\"\nname\n.\nvalid\n \n||\n \nname\n.\npristine\n\"\n\n     \nclass\n=\n\"alert alert-danger\"\n>\n\n  O campo \"nome\" \u00e9 obrigat\u00f3rio\n\n</\ndiv\n>\n\n\n\n\n\n\n\nPara acessar o controle associado ao \n<input>\n, voc\u00ea precisa de uma vari\u00e1vel de refer\u00eancia. Aqui, voc\u00ea criou a vari\u00e1vel de refer\u00eancia \nname\n e atribuiu o valor \nngModel\n (\n#name=\"ngModel\"\n).\n\n\nPor que \n\"ngModel\"\n? A propriedade \nexportAs\n de uma diretiva define como fazer o link entre uma vari\u00e1vel de refer\u00eancia para a diretiva. O valor da propriedade \nexportAs\n da diretiva \nngModel\n \u00e9 tamb\u00e9m \nngModel\n.\n\n\nVoc\u00ea controla a visibilidade da mensagem de erro com um binding entre a propriedade \nhidden\n do \n<div>\n e as propriedades \nvalid\n e \npristine\n da vari\u00e1vel de refer\u00eancia \nname\n.\n\n\n1\n2\n<\ndiv\n \n[\nhidden\n]=\"\nname\n.\nvalid\n \n||\n \nname\n.\npristine\n\"\n\n     \nclass\n=\n\"alert alert-danger\"\n>\n\n\n\n\n\n\n\nNesse exemplo, voc\u00ea esconde a mensagem de erro se o controle estiver v\u00e1lido (\nvalid\n) ou \"limpo\" (\npristine\n). O estado \npristine\n signifca que o usu\u00e1rio ainda n\u00e3o modificou o valor do controle.\n\n\nA experi\u00eancia do usu\u00e1rio \u00e9 uma decis\u00e3o do desenvolvedor. Se voc\u00ea ignorar o estado \npristine\n, a mensagem de erro de valida\u00e7\u00e3o s\u00f3 seria escondida quando o controle estivesse v\u00e1lido. Se voc\u00ea chegar nesse componente com um novo her\u00f3i (vazio) ou um her\u00f3i inv\u00e1lido, voc\u00ea iria ver a mensagem de erro imediatamente, antes de fazer qualquer coisa.\n\n\nA propriedade \nalterEgo\n do her\u00f3i \u00e9 opcional. N\u00e3o h\u00e1 nada para fazer com o elemento \n<input>\n associado.\n\n\nA sele\u00e7\u00e3o do super-poder \u00e9 obrigat\u00f3ria. Voc\u00ea pode adicionar a mesma l\u00f3gica de tratamento de erro para o elemento \n<select>\n se voc\u00ea quiser, mas n\u00e3o \u00e9 obrigat\u00f3rio, j\u00e1 que o pr\u00f3prio elemento \n<select>\n se encarrega de exibir somente op\u00e7\u00f5es de poderes v\u00e1lidos.\n\n\nAgora, voc\u00ea ir\u00e1 adicionar um novo her\u00f3i nesse formul\u00e1rio. Inclua um novo bot\u00e3o ao final do formul\u00e1rio como abaixo:\n\n\n1\n<\nbutton\n \ntype\n=\n\"button\"\n \nclass\n=\n\"btn btn-default\"\n \n(\nclick\n)=\"\nnewHero\n()\"\n>\nNovo Her\u00f3i\n</\nbutton\n>\n\n\n\n\n\n\n\nO bot\u00e3o faz um binding do evento \nclick\n com o m\u00e9todo \nnewHero()\n. Adicione, ent\u00e3o o novo m\u00e9todo ao componente:\n\n\n1\n2\n3\nnewHero\n()\n \n{\n\n  \nthis\n.\nmodel\n \n=\n \nnew\n \nHero\n(\n42\n,\n \n''\n,\n \n''\n);\n\n\n}\n\n\n\n\n\n\n\nExecute a aplica\u00e7\u00e3o novamente e clique no bot\u00e3o \"Novo Her\u00f3i\". O formul\u00e1rio \u00e9 limpado. Os campos obrigat\u00f3rios s\u00e3o marcados em vermelho, como esperado. As mensagens de erro est\u00e3o escondidas porque o formul\u00e1rio est\u00e1 \npristine\n, j\u00e1 que voc\u00ea n\u00e3o mudou nenhum elemento do formul\u00e1rio (mudamos somente o modelo de dados).\n\n\nAgora, informe um nome qualquer e clique no bot\u00e3o \"Novo Her\u00f3i\" novamente. Agora, a aplica\u00e7\u00e3o exibe a mensagem de nome obrigat\u00f3rio. Voc\u00ea n\u00e3o quer mensagens de erro quando criamos um novo her\u00f3i (vazio). Por que a aplica\u00e7\u00e3o est\u00e1 exibindo o erro?\n\n\nInspecionar o elemento nas ferramentas do desenvolvedor do navegador ir\u00e1 revelar que o \n<input>\n associado ao nome do her\u00f3i n\u00e3o est\u00e1 mais \npristine\n. O formul\u00e1rio \"lembra\" que voc\u00ea informou um nome antes de clicar no bot\u00e3o \"Novo Her\u00f3i\". Trocar o objeto \nhero\n n\u00e3o restaurou o estado \npristine\n do controle.\n\n\nVoc\u00ea precisa restaurar o estado imperativamente, o que voc\u00ea pode fazer chamando o m\u00e9todo \nreset()\n do formul\u00e1rio ap\u00f3s a chamada ao m\u00e9todo \nnewHero()\n:\n\n\n1\n<\nbutton\n \ntype\n=\n\"button\"\n \nclass\n=\n\"btn btn-default\"\n \n(\nclick\n)=\"\nnewHero\n();\n \nheroForm\n.\nreset\n()\"\n>\nNovo Her\u00f3i\n</\nbutton\n>\n\n\n\n\n\n\n\nAgora, ao clicar no bot\u00e3o \"Novo Her\u00f3i\", tanto o formul\u00e1rio quanto o estado do formul\u00e1rio s\u00e3o resetados.\n\n\nSubmetendo o formul\u00e1rio com \nngSubmit\n\u00b6\n\n\nAp\u00f3s preencher o formul\u00e1rio, o usu\u00e1rio deve poder submet\u00ea-lo.\n\n\nO bot\u00e3o \"Submit\" ao final do formul\u00e1rio n\u00e3o faz nada por si s\u00f3. No entanto, como \u00e9 um bot\u00e3o de submiss\u00e3o (\ntype=\"submit\"\n), ao ser clicado, ele ir\u00e1 disparar a submiss\u00e3o do formul\u00e1rio.\n\n\nA submiss\u00e3o do formul\u00e1rio, nesse momento, n\u00e3o faz nada. Para fazer alguma coisa, crie um binding ligando o evento \nngSubmit\n com o m\u00e9todo \nonSubmit()\n do componente:\n\n\n1\n<\nform\n \n(\nngSubmit\n)=\"\nonSubmit\n()\"\n \n#\nheroForm\n=\n\"ngForm\"\n>\n\n\n\n\n\n\n\nPara desabilitar o bot\u00e3o de submiss\u00e3o enquanto o formul\u00e1rio como um todo estiver inv\u00e1lido, vamos usar a vari\u00e1vel de refer\u00eancia \n#heroForm\n que definimos anteriormente. O c\u00f3digo \u00e9 o seguinte:\n\n\n1\n<\nbutton\n \ntype\n=\n\"submit\"\n \nclass\n=\n\"btn btn-success\"\n \n[\ndisabled\n]=\"!\nheroForm\n.\nform\n.\nvalid\n\"\n>\nSubmit\n</\nbutton\n>\n\n\n\n\n\n\n\nSe voc\u00ea rodar a aplica\u00e7\u00e3o agora e apagar o nome do her\u00f3i, voc\u00ea ir\u00e1 violar a regra \nrequired\n do elemento \n<input>\n (o que fica visualmente claro por conta da mensagem de erro de valida\u00e7\u00e3o), e o bot\u00e3o \"Submit\" ir\u00e1 ser desabilitado.\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nexercicio-angular-forms/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- hero-form/\n|  |  |  |-- hero-form.component.css\n|  |  |  |-- hero-form.component.html\n|  |  |  |-- hero-form.component.ts\n|  |  |  app.component.css\n|  |  |  app.component.html\n|  |  |  app.component.ts\n|  |  |  app.module.ts\n|  |  |  hero.ts\n|  |-- assets/\n|  |  |-- forms.css\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\nNesse exerc\u00edcio, aprendemos a:\n\n\n\n\nConstruir um template de formul\u00e1rio na abordagem \ntemplate-driven\n.\n\n\nUsar a sintaxe \n[(ngModel)]\n para \ntwo-way data binding\n.\n\n\nUsar classes CSS especiais para prover um feedback visual sobre a valida\u00e7\u00e3o dos elementos de formul\u00e1rio.\n\n\nUsar vari\u00e1veis de refer\u00eancia de template para inspecionar e usar propriedades dos elementos de formul\u00e1rio.\n\n\nHabilitar/desabilitar o bot\u00e3o de submiss\u00e3o do formul\u00e1rio de acordo com o status de valida\u00e7\u00e3o do formul\u00e1rio.\n\n\nTratar a submiss\u00e3o do formul\u00e1rio.\n\n\n\n\nPr\u00f3ximo passo\n\u00b6\n\n\nExerc\u00edcio 15",
            "title": "14 - Template-Driven Forms"
        },
        {
            "location": "/exercicios/exercicio-14/#exercicio-14",
            "text": "",
            "title": "Exerc\u00edcio 14"
        },
        {
            "location": "/exercicios/exercicio-14/#objetivos",
            "text": "Construir um formul\u00e1rio com a abordagem  template-driven , com  two-way data binding , controle de estado e valida\u00e7\u00f5es customizadas.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-14/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-14/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-angular-forms  e deixe-a rodando:  1\n2\n3 ng new exercicio-angular-forms cd  exercicio-angular-forms\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-14/#introducao",
            "text": "Voc\u00ea pode construir qualquer formul\u00e1rio na abordagem  template-driven : voc\u00ea pode fazer binding de elementos de formul\u00e1rios (por exemplo:  <input> ,  <select> ) ao modelo de dados da sua aplica\u00e7\u00e3o; voc\u00ea pode especificar regras de valida\u00e7\u00e3o (e exibir os erros quando alguma regra falhar); voc\u00ea pode habilitar (ou desabilitar) elementos de formul\u00e1rios espec\u00edficos condicionalmente; e muito mais. O Angular torna ese processo mais f\u00e1cil, ao tratar muitas das tarefas repetitivas na constru\u00e7\u00e3o de formul\u00e1rios.  Nesse exerc\u00edcio, iremos construir um formul\u00e1rio como abaixo:   Dois dos tr\u00eas campos desse formul\u00e1rio s\u00e3o de preenchimento obrigat\u00f3rio. Campos obrigat\u00f3rios s\u00e3o marcados com uma barra verde \u00e0 esquerda, para facilitar sua identifica\u00e7\u00e3o.  Se voc\u00ea apagar o nome do her\u00f3i, o formul\u00e1rio ir\u00e1 exibir um erro de valida\u00e7\u00e3o:   Observe que o bot\u00e3o \"Submit\" est\u00e1 desabilitado, e que a cor da barra \u00e0 esquerda do campo obrigat\u00f3rio muda de verde para vermelho.  Voc\u00ea ir\u00e1 construir esse formul\u00e1rio seguindo os passos:   Criar a classe de modelo  Hero  Criar o componente que controla o formul\u00e1rio  Criar o template inicial do formul\u00e1rio  Fazer o binding entre os elementos do formul\u00e1rio e as propriedades do componente com  ngModel  Adicionar um atributo  name  para cada elemento do formul\u00e1rio  Adicionar CSS para um feedback visual  Exibir e esconder mensagens de erro de valida\u00e7\u00e3o  Tratar submiss\u00e3o de formul\u00e1rio com  ngSubmit  Desabilitar o bot\u00e3o de submiss\u00e3o do formul\u00e1rio at\u00e9 que o formul\u00e1rio esteja v\u00e1lido",
            "title": "Introdu\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-14/#crie-a-classe-de-modelo-hero",
            "text": "Na medida em que o usu\u00e1rio preenche o formul\u00e1rio, voc\u00ea ir\u00e1 capturar as mudan\u00e7as e atualizar uma inst\u00e2ncia de um modelo de dados. Ent\u00e3o, para criar uma estrutura inicial do formul\u00e1rio, precisamos saber como \u00e9 a estrutura desse modelo de dados.  Uma classe de modelo pode ser simples como uma \"sacola de propriedades\", que guarda fatos sobre uma entidade da sua aplica\u00e7\u00e3o. Essa \u00e9 uma boa descri\u00e7\u00e3o para a classe  Hero  com seus tr\u00eas campos obrigat\u00f3rios ( id ,  name  e  power ) e um campo opcional ( alterEgo ).  Usando o Angular CLI, gere uma nova classe chamada  Hero :  1 ng generate class Hero   O conte\u00fado da classe deve ser como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 export   class   Hero   { \n\n   constructor ( \n     public   id :   number , \n     public   name :   string , \n     public   power :   string , \n     public   alterEgo ?:   string \n   )   {    }  }    \u00c9 um modelo an\u00eamico, com poucos requisitos e nenhum comportamento. Perfeito para o nosso exerc\u00edcio.  O compilador TypeScript gera uma propriedade p\u00fablica para cada um dos par\u00e2metros p\u00fablicos do construtor, e automaticamente atribui o valor do par\u00e2metro \u00e0 propriedade correspondente.  O par\u00e2metro  alterEgo  \u00e9 opcional, ent\u00e3o o construtor permite que voc\u00ea omita esse par\u00e2metro na constru\u00e7\u00e3o de uma nova inst\u00e2ncia (note o ponto de interroga\u00e7\u00e3o \"?\" no par\u00e2metro  alterEgo? )  Voc\u00ea pode, ent\u00e3o, criar um novo her\u00f3i na seguinte forma:  1\n2 const   myHero   =    new   Hero ( 42 ,   'SkyDog' ,   'Fetch any object at any distance' ,   'Leslie Rollover' );  console . log ( 'My hero is called '   +   myHero . name );   // \"My hero is called SkyDog\"",
            "title": "Crie a classe de modelo Hero"
        },
        {
            "location": "/exercicios/exercicio-14/#crie-o-componente-que-controla-o-formulario",
            "text": "Um formul\u00e1rio Angular possui duas partes: um template (baseado em HTML) e uma classe de componente para tratar os dados do formul\u00e1rio e a intera\u00e7\u00e3o do usu\u00e1rio programaticamente.  Usando o Angular CLI, gere um novo componente chamado  HeroForm :  1 ng generate component HeroForm   O conte\u00fado deve ser o seguinte:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   {   Component   }   from   '@angular/core' ;  import   {   Hero   }      from   '../hero' ;  @ Component ({ \n   selector :   'app-hero-form' , \n   templateUrl :   './hero-form.component.html' , \n   styleUrls :   [ './hero-form.component.css' ]  })  export   class   HeroFormComponent   { \n\n   powers   =   [ 'Really Smart' ,   'Super Flexible' , \n             'Super Hot' ,   'Weather Changer' ]; \n\n   model   =   new   Hero ( 18 ,   'Dr IQ' ,   this . powers [ 0 ],   'Chuck Overstreet' ); \n\n   submitted   =   false ; \n\n   onSubmit ()   {   this . submitted   =   true ;   } \n\n   // TODO: remover isso when we're done \n   get   diagnostic ()   {   return   JSON . stringify ( this . model );   }  }    N\u00e3o h\u00e1 nada de especial sobre esse componente; nada relacionado a formul\u00e1rios e nada que o diferencie dos outros componentes que j\u00e1 escrevemos em exerc\u00edcios anteriores.  J\u00e1 cobrimos os seguintes conceitos anteriormente:   O c\u00f3digo importa a biblioteca  @angular/core  e a classe  Hero  que acabamos de criar.  O seletor  hero-form  do decorador  @Component  significa que voc\u00ea pode usar esse componente em um template com a tag customizada  <hero-form> .  A propriedade  templateUrl  aponta para um arquivo separado do template HTML.  Definimos dados de teste para o  model  e  powers , para facilitar a demonstra\u00e7\u00e3o.  Adicionamos uma propriedade de diagn\u00f3stico para retornar a representa\u00e7\u00e3o JSON do modelo. Ela ir\u00e1 nos ajudar durante a constru\u00e7\u00e3o do formul\u00e1rio, mas pode ser apagada posteriormente.",
            "title": "Crie o componente que controla o formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-14/#revise-o-arquivo-appmodulets",
            "text": "O arquivo  app.module.ts  define o m\u00f3dulo raiz da aplica\u00e7\u00e3o. Nesse m\u00f3dulo, voc\u00ea identifica os m\u00f3dulos externos que voc\u00ea ir\u00e1 usar na sua aplica\u00e7\u00e3o e declara os componentes que pertencem ao seu m\u00f3dulo, tal como o  HeroFormComponent .  Para utilizar as diretivas espec\u00edficas de formul\u00e1rios na abordagem  template-driven , voc\u00ea precisa adicionar o m\u00f3dulo  FormsModule  (da biblioteca  @angular/forms ) ao array  imports  do m\u00f3dulo da sua aplica\u00e7\u00e3o.  Atualize o arquivo  app.module.ts  como a seguir:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 import   {   NgModule   }        from   '@angular/core' ;  import   {   BrowserModule   }   from   '@angular/platform-browser' ;  import   {   FormsModule   }     from   '@angular/forms' ;  import   {   AppComponent   }    from   './app.component' ;  import   {   HeroFormComponent   }   from   './hero-form/hero-form.component' ;  @ NgModule ({ \n   imports :   [ \n     BrowserModule , \n     FormsModule \n   ], \n   declarations :   [ \n     AppComponent , \n     HeroFormComponent \n   ], \n   providers :   [], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {   }    S\u00e3o duas altera\u00e7\u00f5es:   Voc\u00ea importou o s\u00edmbolo  FormsModule .  Voc\u00ea adicionou o  FormsModule  \u00e0 lista de  imports  definida no decorador  @NgModule . Isso d\u00e1 \u00e0 aplica\u00e7\u00e3o o acesso a todas as funcionalidades de formul\u00e1rios da abordagem  template-driven  (incluindo a diretiva  ngModel ).",
            "title": "Revise o arquivo app.module.ts"
        },
        {
            "location": "/exercicios/exercicio-14/#revise-o-arquivo-appcomponenthtml",
            "text": "O componente  AppComponent  \u00e9 o componente raiz da aplica\u00e7\u00e3o. Ele ir\u00e1 usar o novo componente  HeroFormComponent .  Troque o conte\u00fado do template do  AppComponent  pelo seguinte:  1 < app-hero-form ></ app-hero-form >",
            "title": "Revise o arquivo app.component.html"
        },
        {
            "location": "/exercicios/exercicio-14/#crie-o-template-inicial-do-formulario",
            "text": "Modifique o conte\u00fado do arquivo  hero-form.component.html  para ficar como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 < div   class = \"container\" > \n     < h1 > Hero Form </ h1 > \n     < form > \n       < div   class = \"form-group\" > \n         < label   for = \"name\" > Nome </ label > \n         < input   id = \"name\"   type = \"text\"   class = \"form-control\"   required > \n       </ div > \n\n       < div   class = \"form-group\" > \n         < label   for = \"alterEgo\" > Alter Ego </ label > \n         < input   id = \"alterEgo\"   type = \"text\"   class = \"form-control\" > \n       </ div > \n\n       < button   type = \"submit\"   class = \"btn btn-success\" > Submit </ button > \n\n     </ form >  </ div >    Estamos usando HTML5 puro. Estamos representando dois dos campos da classe de modelo  Hero  ( name  e  alterEgo ) como elementos  <input> .  O elemento  <input>  para a propriedade  name  possui o atributo HTML  required ; o elemento  <input>  para a propriedade  alterEgo  n\u00e3o possui esse atributo, pois ele \u00e9 opcional.  Ao final do formul\u00e1rio, adicionamos o bot\u00e3o do tipo  submit .  Perceba que voc\u00ea n\u00e3o est\u00e1 usando nada do Angular ainda. N\u00e3o h\u00e1 bindings ou diretivas extras, somente layout.  As classes CSS  container ,  form-group ,  form-control  e  btn  s\u00e3o da biblioteca  Bootstrap . Essas classes s\u00e3o puramente visuais, e n\u00e3o afetam o  funcionamento  do formul\u00e1rio de nenhuma forma.  Para adicionar a folha de estilos do Bootstrap, abra o arquivo  styles.css  e adicione a seguinte linha:  1 @ import   url ( 'https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css' ) ;     DICA: bootstrap  A forma descrita acima  n\u00e3o \u00e9  recomendada para projetos reais.\nO melhor jeito de instalar o bootstrap em projetos angular est\u00e1 descrito na  wiki do Angular CLI .",
            "title": "Crie o template inicial do formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-14/#adicione-poderes-com-ngfor",
            "text": "O her\u00f3i precisa escolher um super-poder a partir de uma lista fixa de poderes pr\u00e9-aprovados pela Ag\u00eancia de RH. Voc\u00ea mant\u00e9m essa lista internamente no  HeroFormComponent .  Voc\u00ea vai adicionar um  <select>  ao formul\u00e1rio e fazer o binding das op\u00e7\u00f5es com a lista de super-poderes usando a diretiva  ngFor . J\u00e1 vimos como fazer isso em um exerc\u00edcio anterior, ent\u00e3o adicione o seguinte trecho HTML abaixo do  form-group  para a propriedade  alterEgo :  1\n2\n3\n4\n5\n6 < div   class = \"form-group\" > \n   < label   for = \"power\" > Hero Power </ label > \n   < select   id = \"power\"   class = \"form-control\"   required > \n     < option   * ngFor = \"let pow of powers\"   [ value ]=\" pow \" > {{pow}} </ option > \n   </ select >  </ div >    Esse c\u00f3digo repete a tag  <option>  para cada poder na lista de super-poderes. A vari\u00e1vel de template  pow  guarda um poder diferente em cada itera\u00e7\u00e3o; voc\u00ea exibe o nome do super-poder usando a sintaxe de interpola\u00e7\u00e3o ( {{pow}} ).",
            "title": "Adicione poderes com *ngFor"
        },
        {
            "location": "/exercicios/exercicio-14/#two-way-data-binding-com-ngmodel",
            "text": "Se voc\u00ea rodar a aplica\u00e7\u00e3o agora, ver\u00e1 algo como:   Ainda n\u00e3o estamos vendo os dados do her\u00f3i que definimos no componente, pois n\u00e3o fizemos os bindings dos elementos HTML com a propriedade  hero  do componente.  Para fazer o binding dos elementos do formul\u00e1rio com o modelo de dados, vamos usar a sintaxe  [(ngModel)] .  Modifique o  <input>  para o nome do her\u00f3i como abaixo:  1\n2\n3 < input   type = \"text\"   id = \"name\"   name = \"name\"   required   class = \"form-control\" \n        [( ngModel )]=\" model . name \" > \nTODO: remover isso: {{model.name}}   Defina uma vari\u00e1vel de template para o formul\u00e1rio. Atualize a tag  <form>  com  #heroForm=\"ngForm\"  como abaixo:  1 < form   # heroForm = \"ngForm\" >    A vari\u00e1vel  heroForm  agora \u00e9 uma refer\u00eancia para a diretiva  NgForm  que governa o formul\u00e1rio como um todo.",
            "title": "Two-way data binding com ngModel"
        },
        {
            "location": "/exercicios/exercicio-14/#a-diretiva-ngform",
            "text": "O Angular automaticamente cria e liga uma diretiva  NgForm  ao elemento  <form> .  A diretiva  NgForm  \u00e9 um \"suplemento\" ao elemento de formul\u00e1rio, adicionando novas funcionalidades, guardando a refer\u00eancia dos controles que voc\u00ea criou para os elementos HTML com a diretiva  ngModel , monitorando as propriedades e o status de valida\u00e7\u00e3o desses controles, e o status de valida\u00e7\u00e3o do formul\u00e1rio como um todo.  Se voc\u00ea rodar a aplica\u00e7\u00e3o agora e come\u00e7ar a digitar no campo do nome do her\u00f3i, adicionando e removendo caracteres, voc\u00ea ir\u00e1 ver o resultado na mensagem de diagn\u00f3stico:   O diagn\u00f3stico \u00e9 uma evid\u00eancia de que as mudan\u00e7as nos valores do  <input>  est\u00e3o atualizando o modelo, e vice-versa. Isso \u00e9 o  two-way data binding .  Note que voc\u00ea tamb\u00e9m adicionou um atributo  name  ao elemento  <input>  com o valor  \"name\" . A defini\u00e7\u00e3o desse atributo \u00e9 um pr\u00e9-requisito quando voc\u00ea usa a diretiva  [(ngModel)]  em um formul\u00e1rio.  Internamente, para cada elemento HTML com  [(ngModel)] , o Angular cria uma inst\u00e2ncia do tipo  FormControl  e a registra \u00e0 diretiva  NgForm , usando o nome definido no atributo  name .  Adicione, agora, bindings  [(ngModel)]  para o  alterEgo  e  power . O formul\u00e1rio deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 {{diagnostic}} < div   class = \"form-group\" > \n   < label   for = \"name\" > Nome </ label > \n   < input   id = \"name\"   name = \"name\" \n          type = \"text\"   class = \"form-control\" \n          required \n          [( ngModel )]=\" model . name \" >  </ div >  < div   class = \"form-group\" > \n   < label   for = \"alterEgo\" > Alter Ego </ label > \n   < input   id = \"alterEgo\"   name = \"alterEgo\" \n          type = \"text\"   class = \"form-control\" \n          [( ngModel )]=\" model . alterEgo \" >  </ div >  < div   class = \"form-group\" > \n   < label   for = \"power\" > Hero Power </ label > \n   < select   id = \"power\"   name = \"power\" \n           class = \"form-control\" \n           required \n           [( ngModel )]=\" model . power \" > \n     < option   * ngFor = \"let pow of powers\"   [ value ]=\" pow \" > {{pow}} </ option > \n   </ select >  </ div >    Note que:   Substitu\u00edmos a mensagem de diagn\u00f3stico espec\u00edfica para o nome do her\u00f3i, por uma mensagem de diagn\u00f3stico \"global\", que serve para todo o modelo.  Cada elemento  <input>  tem uma propriedade  id  que \u00e9 usada pelo elemento  <label> .  Cada elemento  <input>  tem uma propriedade  name  que \u00e9 obrigat\u00f3ria para a constru\u00e7\u00e3o de formul\u00e1rios com a diretiva  ngModel .   Execute a aplica\u00e7\u00e3o novamente e verifique as mudan\u00e7as ao modelo do her\u00f3i:   A mensagem de diagn\u00f3stico no topo do formul\u00e1rio confirma que todas as suas mudan\u00e7as s\u00e3o refletidas no modelo. Se quiser, voc\u00ea j\u00e1 pode apagar o binding  {{diagnostic}} , pois ele j\u00e1 serviu o seu prop\u00f3sito.",
            "title": "A diretiva NgForm"
        },
        {
            "location": "/exercicios/exercicio-14/#mantendo-controle-do-estado-e-da-validacao-com-ngmodel",
            "text": "Ao usar a diretiva  ngModel  em um formul\u00e1rio, voc\u00ea ganha mais do que somente o  two-way data binding .   A diretiva n\u00e3o s\u00f3 controla o estado do elemento, mas tamb\u00e9m adiciona (e remove) classes CSS especiais que refletem o estado do elemento. Voc\u00ea pode usar essas classes CSS para modificar a apar\u00eancia do elemento:     Estado  true  false      O controle foi visitado?  ng-touched  ng-untouched    O valor do controle foi modificado?  ng-dirty  ng-pristine    O valor do controle \u00e9 v\u00e1lido?  ng-valid  ng-invalid     Temporariamente, adicione uma vari\u00e1vel de refer\u00eancia ( #spy ) para inspecionar as classes CSS do elemento  <input>  do nome do her\u00f3i como abaixo:  1\n2\n3\n4\n5 < input   type = \"text\"   class = \"form-control\"   id = \"name\" \n   required \n   [( ngModel )]=\" model . name \"   name = \"name\" \n   # spy >  < br > TODO: remover isso: {{spy.className}}   Agora, execute a aplica\u00e7\u00e3o e siga precisamente os seguintes passos:   Olhe o formul\u00e1rio e n\u00e3o toque em nada.  Clique dentro do  <input>  do nome do her\u00f3i e ent\u00e3o clique fora do  <input> .  Adicione barras ( / ) ao final do nome.  Apague o nome.   O efeito esperado \u00e9 como abaixo:   Voc\u00ea deve ver as seguintes transi\u00e7\u00f5es nas classes CSS:   O par  ng-valid / ng-invalid  \u00e9 o mais interessante, porque voc\u00ea quer mostrar um feedback visual para quando os valores estiverem inv\u00e1lido. Voc\u00ea tamb\u00e9m quer marcar os campos obrigat\u00f3rios. Para criar esse feedback, vamos adiciona regras para as classes CSS  ng-* .  Se quiser, voc\u00ea pode apagar a vari\u00e1vel de refer\u00eancia  #spy , pois ela j\u00e1 serviu o seu prop\u00f3sito.",
            "title": "Mantendo controle do estado e da valida\u00e7\u00e3o com ngModel"
        },
        {
            "location": "/exercicios/exercicio-14/#adicione-css-para-feedback-visual",
            "text": "Queremos marcar os elementos do formul\u00e1rio de acordo com o estado e o status da valida\u00e7\u00e3o, como abaixo:   Para conseguir esse efeito, crie um novo arquivo  forms.css  na pasta  src/assets  com o seguinte conte\u00fado:  1\n2\n3\n4\n5\n6\n7 . ng-valid [ required ],   . ng-valid . required    { \n   border-left :   5 px   solid   #42A948 ;   /* green */  }  . ng-invalid : not ( form )    { \n   border-left :   5 px   solid   #a94442 ;   /* red */  }    Atualize o  <head>  do arquivo  index.html  para incluir o arquivo  forms.css .  1 < link   rel = \"stylesheet\"   href = \"assets/forms.css\" >",
            "title": "Adicione CSS para feedback visual"
        },
        {
            "location": "/exercicios/exercicio-14/#exibindo-mensagens-de-erro-de-validacao",
            "text": "Voc\u00ea pode melhorar esse formul\u00e1rio.  O  <input>  para o nome do her\u00f3i \u00e9 obrigat\u00f3rio e, se voc\u00ea apagar o seu conte\u00fado, a barra muda de verde para vermelho. Isso mostra que algo est\u00e1 errado, mas n\u00e3o diz exatamente o que o usu\u00e1rio deve fazer para consertar o erro.  Quando o usu\u00e1rio apagar o nome, o formul\u00e1rio deveria mostrar uma mensagem como abaixo:   Para fazer isso, siga os seguintes passos:   Adicione uma vari\u00e1vel de refer\u00eancia para o  <input>  Adicione um novo elemento  <div>  com a mensagem  O campo \"nome\" \u00e9 obrigat\u00f3rio  logo abaixo do  <input> . Esse novo  <div>  s\u00f3 deve ser exibido quando o controle estiver inv\u00e1lido.   O template, ent\u00e3o, dever\u00e1 ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 < label   for = \"name\" > Nome </ label >  < input   type = \"text\" \n        id = \"name\"   name = \"name\" \n        required \n        class = \"form-control\" \n        [( ngModel )]=\" model . name \" \n        # name = \"ngModel\" >  < div   [ hidden ]=\" name . valid   ||   name . pristine \" \n      class = \"alert alert-danger\" > \n  O campo \"nome\" \u00e9 obrigat\u00f3rio </ div >    Para acessar o controle associado ao  <input> , voc\u00ea precisa de uma vari\u00e1vel de refer\u00eancia. Aqui, voc\u00ea criou a vari\u00e1vel de refer\u00eancia  name  e atribuiu o valor  ngModel  ( #name=\"ngModel\" ).  Por que  \"ngModel\" ? A propriedade  exportAs  de uma diretiva define como fazer o link entre uma vari\u00e1vel de refer\u00eancia para a diretiva. O valor da propriedade  exportAs  da diretiva  ngModel  \u00e9 tamb\u00e9m  ngModel .  Voc\u00ea controla a visibilidade da mensagem de erro com um binding entre a propriedade  hidden  do  <div>  e as propriedades  valid  e  pristine  da vari\u00e1vel de refer\u00eancia  name .  1\n2 < div   [ hidden ]=\" name . valid   ||   name . pristine \" \n      class = \"alert alert-danger\" >    Nesse exemplo, voc\u00ea esconde a mensagem de erro se o controle estiver v\u00e1lido ( valid ) ou \"limpo\" ( pristine ). O estado  pristine  signifca que o usu\u00e1rio ainda n\u00e3o modificou o valor do controle.  A experi\u00eancia do usu\u00e1rio \u00e9 uma decis\u00e3o do desenvolvedor. Se voc\u00ea ignorar o estado  pristine , a mensagem de erro de valida\u00e7\u00e3o s\u00f3 seria escondida quando o controle estivesse v\u00e1lido. Se voc\u00ea chegar nesse componente com um novo her\u00f3i (vazio) ou um her\u00f3i inv\u00e1lido, voc\u00ea iria ver a mensagem de erro imediatamente, antes de fazer qualquer coisa.  A propriedade  alterEgo  do her\u00f3i \u00e9 opcional. N\u00e3o h\u00e1 nada para fazer com o elemento  <input>  associado.  A sele\u00e7\u00e3o do super-poder \u00e9 obrigat\u00f3ria. Voc\u00ea pode adicionar a mesma l\u00f3gica de tratamento de erro para o elemento  <select>  se voc\u00ea quiser, mas n\u00e3o \u00e9 obrigat\u00f3rio, j\u00e1 que o pr\u00f3prio elemento  <select>  se encarrega de exibir somente op\u00e7\u00f5es de poderes v\u00e1lidos.  Agora, voc\u00ea ir\u00e1 adicionar um novo her\u00f3i nesse formul\u00e1rio. Inclua um novo bot\u00e3o ao final do formul\u00e1rio como abaixo:  1 < button   type = \"button\"   class = \"btn btn-default\"   ( click )=\" newHero ()\" > Novo Her\u00f3i </ button >    O bot\u00e3o faz um binding do evento  click  com o m\u00e9todo  newHero() . Adicione, ent\u00e3o o novo m\u00e9todo ao componente:  1\n2\n3 newHero ()   { \n   this . model   =   new   Hero ( 42 ,   '' ,   '' );  }    Execute a aplica\u00e7\u00e3o novamente e clique no bot\u00e3o \"Novo Her\u00f3i\". O formul\u00e1rio \u00e9 limpado. Os campos obrigat\u00f3rios s\u00e3o marcados em vermelho, como esperado. As mensagens de erro est\u00e3o escondidas porque o formul\u00e1rio est\u00e1  pristine , j\u00e1 que voc\u00ea n\u00e3o mudou nenhum elemento do formul\u00e1rio (mudamos somente o modelo de dados).  Agora, informe um nome qualquer e clique no bot\u00e3o \"Novo Her\u00f3i\" novamente. Agora, a aplica\u00e7\u00e3o exibe a mensagem de nome obrigat\u00f3rio. Voc\u00ea n\u00e3o quer mensagens de erro quando criamos um novo her\u00f3i (vazio). Por que a aplica\u00e7\u00e3o est\u00e1 exibindo o erro?  Inspecionar o elemento nas ferramentas do desenvolvedor do navegador ir\u00e1 revelar que o  <input>  associado ao nome do her\u00f3i n\u00e3o est\u00e1 mais  pristine . O formul\u00e1rio \"lembra\" que voc\u00ea informou um nome antes de clicar no bot\u00e3o \"Novo Her\u00f3i\". Trocar o objeto  hero  n\u00e3o restaurou o estado  pristine  do controle.  Voc\u00ea precisa restaurar o estado imperativamente, o que voc\u00ea pode fazer chamando o m\u00e9todo  reset()  do formul\u00e1rio ap\u00f3s a chamada ao m\u00e9todo  newHero() :  1 < button   type = \"button\"   class = \"btn btn-default\"   ( click )=\" newHero ();   heroForm . reset ()\" > Novo Her\u00f3i </ button >    Agora, ao clicar no bot\u00e3o \"Novo Her\u00f3i\", tanto o formul\u00e1rio quanto o estado do formul\u00e1rio s\u00e3o resetados.",
            "title": "Exibindo mensagens de erro de valida\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-14/#submetendo-o-formulario-com-ngsubmit",
            "text": "Ap\u00f3s preencher o formul\u00e1rio, o usu\u00e1rio deve poder submet\u00ea-lo.  O bot\u00e3o \"Submit\" ao final do formul\u00e1rio n\u00e3o faz nada por si s\u00f3. No entanto, como \u00e9 um bot\u00e3o de submiss\u00e3o ( type=\"submit\" ), ao ser clicado, ele ir\u00e1 disparar a submiss\u00e3o do formul\u00e1rio.  A submiss\u00e3o do formul\u00e1rio, nesse momento, n\u00e3o faz nada. Para fazer alguma coisa, crie um binding ligando o evento  ngSubmit  com o m\u00e9todo  onSubmit()  do componente:  1 < form   ( ngSubmit )=\" onSubmit ()\"   # heroForm = \"ngForm\" >    Para desabilitar o bot\u00e3o de submiss\u00e3o enquanto o formul\u00e1rio como um todo estiver inv\u00e1lido, vamos usar a vari\u00e1vel de refer\u00eancia  #heroForm  que definimos anteriormente. O c\u00f3digo \u00e9 o seguinte:  1 < button   type = \"submit\"   class = \"btn btn-success\"   [ disabled ]=\"! heroForm . form . valid \" > Submit </ button >    Se voc\u00ea rodar a aplica\u00e7\u00e3o agora e apagar o nome do her\u00f3i, voc\u00ea ir\u00e1 violar a regra  required  do elemento  <input>  (o que fica visualmente claro por conta da mensagem de erro de valida\u00e7\u00e3o), e o bot\u00e3o \"Submit\" ir\u00e1 ser desabilitado.",
            "title": "Submetendo o formul\u00e1rio com ngSubmit"
        },
        {
            "location": "/exercicios/exercicio-14/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 exercicio-angular-forms/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- hero-form/\n|  |  |  |-- hero-form.component.css\n|  |  |  |-- hero-form.component.html\n|  |  |  |-- hero-form.component.ts\n|  |  |  app.component.css\n|  |  |  app.component.html\n|  |  |  app.component.ts\n|  |  |  app.module.ts\n|  |  |  hero.ts\n|  |-- assets/\n|  |  |-- forms.css\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-14/#resumo",
            "text": "Nesse exerc\u00edcio, aprendemos a:   Construir um template de formul\u00e1rio na abordagem  template-driven .  Usar a sintaxe  [(ngModel)]  para  two-way data binding .  Usar classes CSS especiais para prover um feedback visual sobre a valida\u00e7\u00e3o dos elementos de formul\u00e1rio.  Usar vari\u00e1veis de refer\u00eancia de template para inspecionar e usar propriedades dos elementos de formul\u00e1rio.  Habilitar/desabilitar o bot\u00e3o de submiss\u00e3o do formul\u00e1rio de acordo com o status de valida\u00e7\u00e3o do formul\u00e1rio.  Tratar a submiss\u00e3o do formul\u00e1rio.",
            "title": "Resumo"
        },
        {
            "location": "/exercicios/exercicio-14/#proximo-passo",
            "text": "Exerc\u00edcio 15",
            "title": "Pr\u00f3ximo passo"
        },
        {
            "location": "/exercicios/exercicio-15/",
            "text": "Exerc\u00edcio 15\n\u00b6\n\n\nObjetivos\n\u00b6\n\n\n\n\nConstruir um formul\u00e1rio com a abordagem \nreactive\n, com \ntwo-way data binding\n, controle de estado e valida\u00e7\u00f5es customizadas.\n\n\n\n\nDura\u00e7\u00e3o\n\u00b6\n\n\n45 minutos\n\n\nPreparando o ambiente\n\u00b6\n\n\nCrie uma nova aplica\u00e7\u00e3o chamada \nexercicio-angular-reactive-forms\n e deixe-a rodando:\n\n\n1\n2\n3\nng new exercicio-angular-reactive-forms\n\ncd\n exercicio-angular-reactive-forms\nnpm run start\n\n\n\n\n\n\nO comando \nnpm run start\n iniciar\u00e1 um servidor local para desenvolvimento em \"\nwatch mode\n\", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local: \nhttp://localhost:4200/\n.\n\n\nIntrodu\u00e7\u00e3o\n\u00b6\n\n\nO Angular oferece duas abordagens para a constru\u00e7\u00e3o de formul\u00e1rios: a abordagem \nreactive\n e a abordagem \ntemplate-driven\n. As duas tecnologias pertencem \u00e0 biblioteca \n@angular/forms\n e compartilham um conjunto comum de classes de controle de formul\u00e1rios.\n\n\nNo entanto, elas divergem na filosofia, no estilo e na t\u00e9cnica de programa\u00e7\u00e3o. Elas at\u00e9 tem seus m\u00f3dulos distintos: o \nReactiveFormsModule\n (abordagem \nreactive\n) e o \nFormsModule\n (abordagem \ntemplate-driven\n).\n\n\nA abordagem \nreactive\n\u00b6\n\n\nA abordagem \nreactive\n facilita o uso do estilo de programa\u00e7\u00e3o \"reativo\", que favorece o controle expl\u00edcito do fluxo de dados entre um modelo de dados n\u00e3o-UI (geralmente, recuperados a partir de um servidor backend), e um modelo de dados de formul\u00e1rios orientado \u00e0 UI (que ret\u00e9m os estados e valores dos controles HTML da tela). A abordagem \nreactive\n facilita, ent\u00e3o, a implementa\u00e7\u00e3o, os testes e as valida\u00e7\u00f5es nesse padr\u00e3o de programa\u00e7\u00e3o \"reativo\".\n\n\nNos formul\u00e1rios reativos, voc\u00ea cria, na classe do seu componente, uma \u00e1rvore de objetos de controle de formul\u00e1rios (ex: \nFormControl\n), fazendo o binding desses objetos com os elementos nativos HTML de controle de formul\u00e1rios (ex: \n<input>\n, \n<form>\n) no template do componente.\n\n\nVoc\u00ea cria e manipula os objetos de controle de formul\u00e1rios diretamente na classe do seu componente. Como o componente tem acesso imediato tanto ao modelo de dados quanto ao modelo de formul\u00e1rio, voc\u00ea pode atualizar os valores do modelo de formul\u00e1rio a partir do modelo de dados e vice-versa.\n\n\nSeguindo o paradigma reativo de programa\u00e7\u00e3o, o componente preserva a imutabilidade do modelo de dados, tratando-o como uma fonte de valores \"originais\" e imut\u00e1veis. Ao inv\u00e9s de atualizar o modelo de dados diretamente, o componente extrai as mudan\u00e7as do usu\u00e1rio e as direciona para um componente ou um servi\u00e7o externo, que, por sua vez, faz alguma coisa com esses dados (por exemplo: \"salva\" os dados), retornando um novo estado do modelo de dados que reflete essas mudan\u00e7as.\n\n\nUsar as diretivas da abordagem \nreativa\n n\u00e3o obriga voc\u00ea a seguir todos os princ\u00edpios desse padr\u00e3o de programa\u00e7\u00e3o; a ideia \u00e9 facilitar a implementa\u00e7\u00e3o de seus componentes caso voc\u00ea opte por usar esse paradigma.\n\n\nA abordagem \ntemplate-driven\n\u00b6\n\n\nOs formul\u00e1rios \ntemplate-driven\n tem uma abordagem completamente diferente.\n\n\n\n\nVoc\u00ea faz um binding dos controle de formul\u00e1rios nativos HTML (como o \n<input>\n e o \n<select>\n) no template diretamente com o modelo de dados no componente, usando diretivas como o \nngModel\n.\n\n\nVoc\u00ea n\u00e3o cria objetos de controle de formul\u00e1rios no seu componente (como o \nFormControl\n). As diretivas Angular v\u00e3o criar esses objetos para voc\u00ea automaticamente.\n\n\nVoc\u00ea n\u00e3o atualiza os valores do modelo de formul\u00e1rios explicitamente. A diretiva \nngModel\n faz isso para voc\u00ea.\n\n\nO Angular atualiza o modelo de dados (que \u00e9 mut\u00e1vel) na medida em que as mudan\u00e7as acontecem (como, por exemplo, quando o usu\u00e1rio digita um valor em um \n<input>\n).\n\n\n\n\nEm outras palavras, o controle do fluxo de dados entre o modelo de dados e o modelo de formul\u00e1rio \u00e9 feito pelo pr\u00f3prio Angular. Isso significa que voc\u00ea vai escrever menos c\u00f3digo, mas isso pode complicar o desenvolvimento de cen\u00e1rios mais complexos.\n\n\nQual abordagem \u00e9 a melhor?\n\u00b6\n\n\nNenhuma\n das duas abordagens \u00e9 a melhor. As duas t\u00e9cnicas representam paradigmas diferentes, com suas pr\u00f3prias for\u00e7as e fraquezas. Escolha a abordagem que \u00e9 melhor para voc\u00ea. Voc\u00ea pode at\u00e9 escolher usar as duas abordagens na mesma aplica\u00e7\u00e3o.\n\n\nCrie um modelo de dados\n\u00b6\n\n\nO objetivo desse exerc\u00edcio \u00e9 criar um componente para a edi\u00e7\u00e3o de um her\u00f3i usando a abordagem \nreactive\n. Para isso, vamos precisar de uma classe que representa o her\u00f3i e de alguns dados para edi\u00e7\u00e3o.\n\n\nUsando o Angular CLI, gere uma nova classe com o nome \ndata-model\n:\n\n\n1\nng generate class data-model\n\n\n\n\n\n\nCopie o conte\u00fado abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n \n=\n \n0\n;\n\n  \nname\n \n=\n \n''\n;\n\n  \naddresses\n:\n \nAddress\n[];\n\n\n}\n\n\n\nexport\n \nclass\n \nAddress\n \n{\n\n  \nstreet\n \n=\n \n''\n;\n\n  \ncity\n   \n=\n \n''\n;\n\n  \nstate\n  \n=\n \n''\n;\n\n  \nzip\n    \n=\n \n''\n;\n\n\n}\n\n\n\nexport\n \nconst\n \nheroes\n:\n \nHero\n[]\n \n=\n \n[\n\n  \n{\n\n    \nid\n:\n \n1\n,\n\n    \nname\n:\n \n'Whirlwind'\n,\n\n    \naddresses\n:\n \n[\n\n      \n{\nstreet\n:\n \n'123 Main'\n,\n  \ncity\n:\n \n'Anywhere'\n,\n \nstate\n:\n \n'CA'\n,\n  \nzip\n:\n \n'94801'\n},\n\n      \n{\nstreet\n:\n \n'456 Maple'\n,\n \ncity\n:\n \n'Somewhere'\n,\n \nstate\n:\n \n'VA'\n,\n \nzip\n:\n \n'23226'\n},\n\n    \n]\n\n  \n},\n\n  \n{\n\n    \nid\n:\n \n2\n,\n\n    \nname\n:\n \n'Bombastic'\n,\n\n    \naddresses\n:\n \n[\n\n      \n{\nstreet\n:\n \n'789 Elm'\n,\n  \ncity\n:\n \n'Smallville'\n,\n \nstate\n:\n \n'OH'\n,\n  \nzip\n:\n \n'04501'\n},\n\n    \n]\n\n  \n},\n\n  \n{\n\n    \nid\n:\n \n3\n,\n\n    \nname\n:\n \n'Magneta'\n,\n\n    \naddresses\n:\n \n[\n \n]\n\n  \n},\n\n\n];\n\n\n\nexport\n \nconst\n \nstates\n \n=\n \n[\n'CA'\n,\n \n'MD'\n,\n \n'OH'\n,\n \n'VA'\n];\n\n\n\n\n\n\n\nEsse arquivo exporta duas classes e duas constantes. As classes \nAddress\n e \nHero\n definem o modelo de dados da aplica\u00e7\u00e3o. As constantes \nheroes\n e \nstates\n fornecem dados para os testes.\n\n\nCrie o componente\n\u00b6\n\n\nGere um novo componente chamado \nHeroDetail\n:\n\n\n1\nng generate component HeroDetail\n\n\n\n\n\n\nInclua o \nimport\n abaixo:\n\n\n1\nimport\n \n{\n \nFormControl\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\n\n\n\n\nEm seguida, atualize o \nHeroDetailComponent\n incluindo um \nFormControl\n. \nFormControl\n \u00e9 uma diretiva que permite a cria\u00e7\u00e3o e a gest\u00e3o de inst\u00e2ncias de objetos de controle de formul\u00e1rios diretamente.\n\n\n1\n2\n3\nexport\n \nclass\n \nHeroDetailComponent1\n \n{\n\n  \nname\n \n=\n \nnew\n \nFormControl\n();\n\n\n}\n\n\n\n\n\n\n\nNesse trecho, voc\u00ea est\u00e1 criando uma propriedade do tipo \nFormControl\n com o nome \nname\n. Logo mais, iremos fazer um binding dessa propriedade com um elemento HTML \n<input>\n no template do componente.\n\n\nO construtor de um \nFormControl\n aceita tr\u00eas par\u00e2metros (opcionais): o valor inicial do objeto, um array de validadores e um array de validadores ass\u00edncronos.\n\n\nNo nosso exemplo, o objeto n\u00e3o possui dados iniciais nem valida\u00e7\u00f5es. No entanto, em aplica\u00e7\u00f5es reais, a maioria dos controles de formul\u00e1rios possuem ambos.\n\n\nCrie o template\n\u00b6\n\n\nAgora, atualize o template do componente como abaixo:\n\n\n1\n2\n3\n4\n5\n<\nh2\n>\nHero Detail\n</\nh2\n>\n\n\n<\nh3\n><\ni\n>\nJust a FormControl\n</\ni\n></\nh3\n>\n\n\n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nName:\n  \n<\ninput\n \nclass\n=\n\"form-control\"\n \n[\nformControl\n]=\"\nname\n\"\n>\n\n\n</\nlabel\n>\n\n\n\n\n\n\n\nPara avisar ao Angular que esse \u00e9 o input que voc\u00ea quer associar ao \nFormControl\n que criamos no componente, voc\u00ea precisa usar o binding \n[formControl]=\"name\"\n.\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nA classe CSS \nform-control\n pertence \u00e0 biblioteca \nBootstrap\n (e n\u00e3o ao Angular), e serve somente para definir estilos do \n<input>\n, sem nenhum impacto sobre a l\u00f3gica do formul\u00e1rio.\n\n\n\n\nImporte o m\u00f3dulo \nReactiveFormsModule\n\u00b6\n\n\nO template do componente \nHeroDetailComponent\n usa a diretiva \nformControlName\n do m\u00f3dulo \nReactiveFormsModule\n.\n\n\nAtualize, ent\u00e3o, o \napp.module.ts\n como abaixo:\n\n\n\n\nAdicione um \nimport\n JavaScript para usar o simbolo \nReactiveFormsModule\n.\n\n\nAdicione o m\u00f3dulo \nReactiveFormsModule\n na lista de imports do m\u00f3dulo \nAppModule\n.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nimport\n \n{\n \nNgModule\n \n}\n            \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nBrowserModule\n \n}\n       \nfrom\n \n'@angular/platform-browser'\n;\n\n\nimport\n \n{\n \nReactiveFormsModule\n \n}\n \nfrom\n \n'@angular/forms'\n;\n  \n// <-- #1 import module\n\n\n\nimport\n \n{\n \nAppComponent\n \n}\n        \nfrom\n \n'./app.component'\n;\n\n\nimport\n \n{\n \nHeroDetailComponent\n \n}\n \nfrom\n \n'./hero-detail/hero-detail.component'\n;\n \n// <-- #1 import component\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \nBrowserModule\n,\n\n    \nReactiveFormsModule\n \n// <-- #2 add to @NgModule imports\n\n  \n],\n\n  \ndeclarations\n:\n \n[\n\n    \nAppComponent\n,\n\n    \nHeroDetailComponent\n,\n\n  \n],\n\n  \nbootstrap\n:\n \n[\n \nAppComponent\n \n]\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{\n \n}\n\n\n\n\n\n\n\nExiba o componente \nHeroDetailComponent\n\u00b6\n\n\nModifique o template do \nAppComponent\n para exibir o componente \nHeroDetailComponent\n.\n\n\n1\n2\n3\n4\n<\ndiv\n \nclass\n=\n\"container\"\n>\n\n  \n<\nh1\n>\nReactive Forms\n</\nh1\n>\n\n  \n<\napp-hero-detail\n></\napp-hero-detail\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nClasses de formul\u00e1rio essenciais\n\u00b6\n\n\nLeia um pouco sobre as classes de formul\u00e1rio essenciais da biblioteca \n@angular/forms\n:\n\n\n\n\n\n\n\n\nNome\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nAbstractControl\n\n\n\u00c9 a classe abstrata base para as classes concretas: \nFormControl\n, \nFormGroup\n e \nFormArray\n. Prov\u00ea propriedades e comportamentos comuns \u00e0s tr\u00eas classes.\n\n\n\n\n\n\nFormControl\n\n\nGerencia o valor e valida\u00e7\u00e3o de um controle de formul\u00e1rio individual. Corresponde a um elemento de formul\u00e1rio HTML (como um \n<input>\nou um \n<select>\n, por exemplo).\n\n\n\n\n\n\nFormGroup\n\n\nGerencia o valor e valida\u00e7\u00e3o de um grupo de inst\u00e2ncias do tipo \nAbstractControl\n. Dentre as propriedades do grupo, s\u00e3o inclu\u00eddos os controles \"filhos\".\n\n\n\n\n\n\nFormArray\n\n\nGerencia o valor e valida\u00e7\u00e3o de um array (indexado numericamente) de inst\u00e2ncias do tipo \nAbstractControl\n.\n\n\n\n\n\n\n\n\nVamos aprender mais sobre elas no decorrer desse exerc\u00edcio.\n\n\nAdicione estilos do Bootstrap\n\u00b6\n\n\nNo template dos componentes \nAppComponent\n e \nHeroDetailComponent\n, n\u00f3s usamos classes CSS da biblioteca Bootstrap. Adicione, ent\u00e3o, as folhas de estilo CSS do Bootstrap ao arquivo \nstyles.css\n como abaixo:\n\n\n1\n@\nimport\n \nurl\n(\n'https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css'\n)\n;\n\n\n\n\n\n\n\nAgora que o CSS est\u00e1 configurado, o navegador deve exibir algo como:\n\n\n\n\nAdicione um \nFormGroup\n\u00b6\n\n\nNormalmente, se voc\u00ea possui m\u00faltiplos \nFormControl\ns, voc\u00ea os registra dentro de um \nFormGroup\n pai. Para criar um \nFormGroup\n, adicione o \nimport\n abaixo ao arquivo \nhero-detail.component.ts\n:\n\n\n1\n2\nimport\n \n{\n \nComponent\n \n}\n              \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormControl\n,\n \nFormGroup\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\n\n\n\n\nNa classe, empacote o \nFormControl\n dentro do \nFormGroup\n (de nome \nheroForm\n) como a seguir:\n\n\n1\n2\n3\n4\n5\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \nheroForm\n \n=\n \nnew\n \nFormGroup\n \n({\n\n    \nname\n:\n \nnew\n \nFormControl\n()\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\nAgora que voc\u00ea modificou a classe do componente, precisamos refatorar o template. Troque o conte\u00fado do arquivo \nhero-detail.component.html\n pelo seguinte:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n<\nh2\n>\nHero Detail\n</\nh2\n>\n\n\n<\nh3\n><\ni\n>\nFormControl in a FormGroup\n</\ni\n></\nh3\n>\n\n\n<\nform\n \n[\nformGroup\n]=\"\nheroForm\n\"\n \nnovalidate\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nName:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"name\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n</\nform\n>\n\n\n\n\n\n\n\nNote que o \n<input>\n est\u00e1 dentro de um elemento \n<form>\n.\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nO atributo \nnovalidate\n do elemento \n<form>\n previne que o navegador tente fazer valida\u00e7\u00f5es nativas do HTML\n\n\n\n\nA diretiva \nformGroup\n \u00e9 uma diretiva do m\u00f3dulo \nReactiveFormsModule\n que recebe uma inst\u00e2ncia do tipo \nFormGroup\n e o associa a um elemento HTML. Nesse caso, a diretiva associa o \nheroForm\n que criamos no componente ao elemento \n<form>\n.\n\n\nAgora que o \nFormControl\n faz parte de um \nFormGroup\n, \u00e9 preciso usar a sintaxe \nformControlName=\"name\"\n para associar o \nFormControl\n ao elemento HTML \n<input>\n. Essa sintqxe indica que o objeto de controle de formul\u00e1rio (isto \u00e9, o \nFormControl\n) deve ser procurado dentro do \nFormGroup\n pai do elemento (nesse caso, o \nheroForm\n).\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nAssim como a classe CSS \nform-control\n, a classe CSS \nform-group\n pertence \u00e0 biblioteca \nBootstrap\n (e n\u00e3o ao Angular), e serve somente para definir estilos do \n<form>\n, sem nenhum impacto sobre a l\u00f3gica do formul\u00e1rio.\n\n\n\n\nOk, o formul\u00e1rio est\u00e1 estiloso. Mas, para onde vai o valor informado pelo usu\u00e1rio no \n<input>\n?\n\n\nO modelo do formul\u00e1rio\n\u00b6\n\n\nO valor informado pelo usu\u00e1rio \u00e9 guardado no \nmodelo do formul\u00e1rio\n por tr\u00e1s do \nFormControl\n.\n\n\nPara ver o modelo do formul\u00e1rio, adicione as seguintes linhas ao final do template \nhero-detail.component.html\n:\n\n\n1\n<\np\n>\nForm value: {{ heroForm.value | json }}\n</\np\n>\n\n\n\n\n\n\n\nA express\u00e3o \nheroForm.value\n retorna o \nmodelo do formul\u00e1rio\n. Usando o \nJsonPipe\n, esse modelo \u00e9 impresso no formato JSON:\n\n\n\n\nO valor inicial da propriedade \nname\n \u00e9 uma string vazia. Se voc\u00ea come\u00e7ar a digitar um valor no \n<input>\n, voc\u00ea ir\u00e1 ver as mudan\u00e7as sendo refletidas no modelo do formul\u00e1rio.\n\n\nIntrodu\u00e7\u00e3o ao \nFormBuilder\n\u00b6\n\n\nEm aplica\u00e7\u00f5es reais, os formul\u00e1rios crescem rapidamente. Para facilitar o desenvolvimento e a manuten\u00e7\u00e3o dos formul\u00e1rios, usamos o \nFormBuilder\n.\n\n\nA classe \nFormBuilder\n ajuda a reduzir a repeti\u00e7\u00e3o ao gerenciar os detalhes de constru\u00e7\u00e3o de controles para voc\u00ea.\n\n\nPara usar o \nFormBuilder\n, voc\u00ea precisa import\u00e1-lo no \nhero-detail.component.ts\n:\n\n\n1\n2\nimport\n \n{\n \nComponent\n \n}\n              \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormBuilder\n,\n \nFormGroup\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\n\n\n\n\nVamos ent\u00e3o refatorar o \nHeroDetailComponent\n para torn\u00e1-lo um pouco mais simples e mais f\u00e1cil de ler:\n\n\n\n\nDefina o tipo da propriedade \nheroForm\n explicitamente; ela ser\u00e1 inicializada depois.\n\n\nInjete a classe \nFormBuilder\n no construtor.\n\n\nAdicione um novo m\u00e9todo (\ncreateForm\n) que usa o \nFormBuilder\n para inicializar o \nheroForm\n.\n\n\nChame o m\u00e9todo \ncreateForm\n no construtor.\n\n\n\n\nO componente \nHeroDetailComponent\n deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \nheroForm\n:\n \nFormGroup\n;\n \n// <--- heroForm is of type FormGroup\n\n\n  \nconstructor\n(\nprivate\n \nfb\n:\n \nFormBuilder\n)\n \n{\n \n// <--- inject FormBuilder\n\n    \nthis\n.\ncreateForm\n();\n\n  \n}\n\n\n  \ncreateForm\n()\n \n{\n\n    \nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n      \nname\n:\n \n''\n,\n \n// <--- the FormControl called \"name\"\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nO \nFormBuilder.group\n \u00e9 um m\u00e9todo que cria um \nFormGroup\n, e recebe como par\u00e2metro um objeto cujas chaves s\u00e3o os nomes dos \nFormControl\ns e cujos valores s\u00e3o as defini\u00e7\u00f5es desses \nFormControl\ns. Nesse exemplo, o controle \nname\n \u00e9 definido por seu valor inicial (uma string vazia).\n\n\nDefinir um grupo de controles em um \u00fanico objeto \u00e9 uma forma compacta e leg\u00edvel de definir os \nFormControl\ns do seu componente (bem mais simples do que uma s\u00e9rie equivalente de linhas \nnew FormControl(...)\n).\n\n\nA valida\u00e7\u00e3o \nValidators.required\n\u00b6\n\n\nApesar de esse exerc\u00edcio n\u00e3o aprofundar em valida\u00e7\u00f5es, podemos demonstrar a simplicidade de se usar o \nValidators.required\n com a abordagem \nreactive\n.\n\n\nPrimeiro, importe o s\u00edmbolo \nValidators\n.\n\n\n1\n2\nimport\n \n{\n \nComponent\n \n}\n                          \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormBuilder\n,\n \nFormGroup\n,\n \nValidators\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\n\n\n\n\nPara tornar o controle \nname\n obrigat\u00f3rio, troque a propriedade \nname\n no \nFormGroup\n por um array. O primeiro item do array \u00e9 o valor inicial do \nFormControl\n; o segundo item do array \u00e9 a fun\u00e7\u00e3o de valida\u00e7\u00e3o \nValidators.required\n:\n\n\n1\n2\n3\nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n  \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n\n});\n\n\n\n\n\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nPara implementar a valida\u00e7\u00e3o de formul\u00e1rios na abordagem \nreactive\n, voc\u00ea s\u00f3 precisa definir as fun\u00e7\u00f5es de valida\u00e7\u00f5es (que s\u00e3o simples fun\u00e7\u00f5es JavaScripts); na abordagem \ntemplate-driven\n, voc\u00ea precisa empacotar as fun\u00e7\u00f5es de valida\u00e7\u00f5es em diretivas.\n\n\n\n\nAtualize a mensagem de diagn\u00f3stico ao final do template para exibir tamb\u00e9m o status da valida\u00e7\u00e3o do formul\u00e1rio, como abaixo:\n\n\n1\n2\n<\np\n>\nForm value: {{ heroForm.value | json }}\n</\np\n>\n\n\n<\np\n>\nForm status: {{ heroForm.status | json }}\n</\np\n>\n\n\n\n\n\n\n\nO navegador deve exibir algo como:\n\n\n\n\nA fun\u00e7\u00e3o \nValidators.required\n est\u00e1 funcionando como esperado. O status \u00e9 \nINVALID\n porque o \n<input>\n n\u00e3o possui nenhum valor. Digite algo na caixa de entrada e veja o status mudar para \nVALID\n.\n\n\nMais \nFormControl\ns\n\u00b6\n\n\nUm her\u00f3i possui mais que um nome. Um her\u00f3i possui um endere\u00e7o, um super-poder e, \u00e0s vezes, um sidekick.\n\n\nO usu\u00e1rio ir\u00e1 seleciona o estado (propriedade do endere\u00e7o do her\u00f3i) a partir de uma caixa de sele\u00e7\u00e3o (\n<select>\n). Para popular os elementos \n<option>\n com os estados que definimos no modelo de dados, importe os \nstates\n do arquivo \ndata-model.ts\n como abaixo:\n\n\n1\n2\n3\n4\nimport\n \n{\n \nComponent\n \n}\n                          \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormBuilder\n,\n \nFormGroup\n,\n \nValidators\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nstates\n \n}\n \nfrom\n \n'../data-model'\n;\n\n\n\n\n\n\n\nDefina a propriedade \nstates\n e adicione os \nFormControl\ns relacionados ao endere\u00e7o como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \nheroForm\n:\n \nFormGroup\n;\n\n  \nstates\n \n=\n \nstates\n;\n\n\n  \nconstructor\n(\nprivate\n \nfb\n:\n \nFormBuilder\n)\n \n{\n\n    \nthis\n.\ncreateForm\n();\n\n  \n}\n\n\n  \ncreateForm\n()\n \n{\n\n    \nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n      \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n      \nstreet\n:\n \n''\n,\n\n      \ncity\n:\n \n''\n,\n\n      \nstate\n:\n \n''\n,\n\n      \nzip\n:\n \n''\n,\n\n      \npower\n:\n \n''\n,\n\n      \nsidekick\n:\n \n''\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nMofique, ent\u00e3o, o \nhero-detail.component.html\n para incluir os elementos HTML correspondentes:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n<\nh2\n>\nHero Detail\n</\nh2\n>\n\n\n<\nh3\n><\ni\n>\nA FormGroup with multiple FormControls\n</\ni\n></\nh3\n>\n\n\n<\nform\n \n[\nformGroup\n]=\"\nheroForm\n\"\n \nnovalidate\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nName:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"name\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nStreet:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"street\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nCity:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"city\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nState:\n      \n<\nselect\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"state\"\n>\n\n          \n<\noption\n \n*\nngFor\n=\n\"let state of states\"\n \n[\nvalue\n]=\"\nstate\n\"\n>\n{{state}}\n</\noption\n>\n\n      \n</\nselect\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nZip Code:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"zip\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group radio\"\n>\n\n    \n<\nh4\n>\nSuper power:\n</\nh4\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"flight\"\n>\nFlight\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"x-ray vision\"\n>\nX-ray vision\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"strength\"\n>\nStrength\n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"checkbox\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\n\n      \n<\ninput\n \ntype\n=\n\"checkbox\"\n \nformControlName\n=\n\"sidekick\"\n>\nI have a sidekick.\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n</\nform\n>\n\n\n\n\n<\np\n>\nForm value: {{ heroForm.value | json }}\n</\np\n>\n\n\n\n\n\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nLembrete: voc\u00ea pode ignorar as men\u00e7\u00f5es \u00e0s classes CSS \nform-group\n, \nform-control\n, \ncenter-block\n, e \ncheckbox\n do Bootstrap. Preste aten\u00e7\u00e3o \u00e0s diretivas \n[formGroup]\n e \nformControlName\n. Elas s\u00e3o diretivas Angular que ligam os controles HTML \u00e0s propriedades \nFormGroup\n e \nFormControl\n do componente.\n\n\n\n\nA nova vers\u00e3o do template inclui novos \n<input>\n do tipo \ntext\n, um \n<select>\n para o estado, um \n<input>\n do tipo \nradio\n para o super-poder e um \n<input>\n do tipo \ncheckbox\n para o sidekick.\n\n\n\n\nObserva\u00e7\u00e3o\n:\n\n\nVoc\u00ea deve fazer o binding \n[value]=\"state\"\n no elemento \n<option>\n. Se voc\u00ea n\u00e3o fizer esse binding, o \n<select>\n ir\u00e1 mostrar a primeira op\u00e7\u00e3o da lista de estados do modelo de dados.\n\n\n\n\nO componente define as propriedades de controle sem levar em conta a sua representa\u00e7\u00e3o no template; isto \u00e9, o estado, o super-poder e o sidekick s\u00e3o definidos da mesma forma como voc\u00ea definiu o controle para o nome do her\u00f3i. O binding das propriedades com os elementos HTML tamb\u00e9m \u00e9 feita da mesma forma: com a diretiva \nformControlName\n.\n\n\nFormGroup\ns aninhados\n\u00b6\n\n\nO formul\u00e1rio est\u00e1 ficando muito grande. Voc\u00ea pode agrupar os \nFormControl\ns relacionados em um \nFormGroup\n aninhado. As propriedades \nstreet\n, \ncity\n, \nstate\n e \nzip\n s\u00e3o propriedades que formariam um bom \nFormGroup\n de endere\u00e7o. Aninhar grupos e controles dessa forma permite que voc\u00ea espelhe a estrutura do modelo de dados e ajuda a manter a valida\u00e7\u00e3o e o estado de um conjunto de controles relacionados.\n\n\nVoc\u00ea usou o \nFormBuilder\n para criar um \nFormGroup\n chamado \nheroForm\n. Use o \nFormBuilder\n novamente para criar um \nFormGroup\n filho que encapsula os controles relacionados ao endere\u00e7o; atribua o resultado a uma nova propriedade \naddress\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\nexport\n \nclass\n \nHeroDetailComponent\n \n{\n\n  \nheroForm\n:\n \nFormGroup\n;\n\n  \nstates\n \n=\n \nstates\n;\n\n\n  \nconstructor\n(\nprivate\n \nfb\n:\n \nFormBuilder\n)\n \n{\n\n    \nthis\n.\ncreateForm\n();\n\n  \n}\n\n\n  \ncreateForm\n()\n \n{\n\n    \nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n \n// <-- the parent FormGroup\n\n      \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n      \naddress\n:\n \nthis\n.\nfb\n.\ngroup\n({\n \n// <-- the child FormGroup\n\n        \nstreet\n:\n \n''\n,\n\n        \ncity\n:\n \n''\n,\n\n        \nstate\n:\n \n''\n,\n\n        \nzip\n:\n \n''\n\n      \n}),\n\n      \npower\n:\n \n''\n,\n\n      \nsidekick\n:\n \n''\n\n    \n});\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nComo fizemos altera\u00e7\u00f5es aos controles de formul\u00e1rios na classe do componente, precisamos fazer os ajustes correspondentes no template do componente.\n\n\nNo arquivo \nhero-detail.component.html\n, mova os \nFormControl\ns relacionados ao endere\u00e7o para dentro de uma \n<div>\n. Adicione uma diretiva \nformGroupName\n \u00e0 nova \n<div>\n com o valor \naddress\n. Essa \u00e9 a propriedade \naddress\n (\nFormGroup\n \"filho\") do \nheroForm\n (\nFormGroup\n \"pai\").\n\n\nPara tornar essa mudan\u00e7a visualmente \u00f3bvia, inclua um \n<h4>\n como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n<\ndiv\n \nformGroupName\n=\n\"address\"\n \nclass\n=\n\"well well-lg\"\n>\n\n  \n<\nh4\n>\nSecret Lair\n</\nh4\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nStreet:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"street\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nCity:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"city\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nState:\n      \n<\nselect\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"state\"\n>\n\n        \n<\noption\n \n*\nngFor\n=\n\"let state of states\"\n \n[\nvalue\n]=\"\nstate\n\"\n>\n{{state}}\n</\noption\n>\n\n      \n</\nselect\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nZip Code:\n      \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"zip\"\n>\n\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nAp\u00f3s essas mudan\u00e7as, o modelo do formul\u00e1rio (impresso no formato JSON ao final da p\u00e1gina) mostra a nova propriedade \naddress\n:\n\n\n\n\nInspecionando as propriedades do \nFormControl\n\u00b6\n\n\nNesse momento, voc\u00ea est\u00e1 mostrando todo o modelo do formul\u00e1rio na p\u00e1gina. \u00c0s vezes voc\u00ea est\u00e1 interessado somente no estado de um \nFormControl\n em particular.\n\n\nVoc\u00ea pode inspecionar um \nFormControl\n individual dentro de um formul\u00e1rio ao extra\u00ed-lo com o m\u00e9todo \n.get()\n. Voc\u00ea pode fazer isso dentro da classe do componente ou diretamente no template, com uma interpola\u00e7\u00e3o como abaixo:\n\n\n1\n<\np\n>\nName value: {{ heroForm.get('name').value }}\n</\np\n>\n\n\n\n\n\n\n\nPara recuperar o estado de um \nFormControl\n que est\u00e1 dentro de um \nFormGroup\n, use a nota\u00e7\u00e3o de ponto (\n.\n) para chegar no controle que voc\u00ea quer inspecionar:\n\n\n1\n<\np\n>\nStreet value: {{ heroForm.get('address.street').value}}\n</\np\n>\n\n\n\n\n\n\n\nVoc\u00ea pode usar essa t\u00e9cnica para exibir qualquer uma  propriedades de um \nFormControl\n. Segue abaixo algumas propriedades interessantes:\n\n\n\n\n\n\n\n\nPropriedade\n\n\nDescri\u00e7\u00e3o\n\n\n\n\n\n\n\n\n\n\nmyControl.value\n\n\no valor do \nFormControl\n.\n\n\n\n\n\n\nmyControl.status\n\n\no status de valida\u00e7\u00e3o do \nFormControl\n. Valores poss\u00edveis: \nVALID\n, \nINVALID\n, \nPENDING\n, ou \nDISABLED\n.\n\n\n\n\n\n\nmyControl.pristine\n\n\ntrue\n se o usu\u00e1rio n\u00e3o fez nenhuma mudan\u00e7a ao elemento UI. \u00c9 oposto \u00e0 propriedade \nmyControl.dirty\n.\n\n\n\n\n\n\nmyControl.untouched\n\n\ntrue\n se o usu\u00e1rio ainda n\u00e3o \"entrou\" no elemento UI e disparou seu evento \nblur\n. \u00c9 oposto \u00e0 propriedade \nmyControl.touched\n.\n\n\n\n\n\n\n\n\nVisite a refer\u00eancia da API do Angular para aprender mais sobre as outras propriedades do FormControl (e AbstractControl).\n\n\nO modelo de dados e o modelo de formul\u00e1rio\n\u00b6\n\n\nNesse momento, o formul\u00e1rio est\u00e1 exibindo valores vazios. O componente \nHeroDetailComponent\n deveria exibir valores de um her\u00f3i (possivelmente, recuperado a partir de um servidor remoto).\n\n\nNessa aplica\u00e7\u00e3o, o \nHeroDetailComponent\n ir\u00e1 recuperar o her\u00f3i a partir de um componente pai \nHeroListComponent\n.\n\n\nO her\u00f3i recuperado do componente pai \u00e9 o modelo de dados; a estrutura de \nFormControl\ns \u00e9 o modelo de formul\u00e1rio.\n\n\nO componente precisa copia o valor do her\u00f3i do modelo de dados para o modelo de formul\u00e1rio. Isso tem duas implica\u00e7\u00f5es:\n\n\n\n\nO desenvolvedor precisa entender como mapear as propriedades do modelo de dados para as propriedades do modelo de formul\u00e1rio.\n\n\nAs mudan\u00e7as fluem dos elementos DOM para o modelo de formul\u00e1rio, \ne n\u00e3o para o modelo de dados\n. O modelo de formul\u00e1rio nunca atualiza o modelo de dados.\n\n\n\n\nAs estruturas do modelo de formul\u00e1rio e do modelo de dados n\u00e3o precisam ser id\u00eanticas. Frequentemente, voc\u00ea apresenta somente um subconjunto do modelo de dados na tela. Mas tudo fica mais simples se a estrutura do modelo de formul\u00e1rio for parecida \u00e0 estrutura do modelo de dados.\n\n\nNo \nHeroDetailComponent\n, os dois modelos s\u00e3o bem parecidos.\n\n\nRelembre a defini\u00e7\u00e3o do \nHero\n no arquivo \ndata-model.ts\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nexport\n \nclass\n \nHero\n \n{\n\n  \nid\n \n=\n \n0\n;\n\n  \nname\n \n=\n \n''\n;\n\n  \naddresses\n:\n \nAddress\n[];\n\n\n}\n\n\n\nexport\n \nclass\n \nAddress\n \n{\n\n  \nstreet\n \n=\n \n''\n;\n\n  \ncity\n   \n=\n \n''\n;\n\n  \nstate\n  \n=\n \n''\n;\n\n  \nzip\n    \n=\n \n''\n;\n\n\n}\n\n\n\n\n\n\n\nA defini\u00e7\u00e3o do \nFormGroup\n \u00e9 como abaixo:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n  \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n  \naddress\n:\n \nthis\n.\nfb\n.\ngroup\n({\n\n    \nstreet\n:\n \n''\n,\n\n    \ncity\n:\n \n''\n,\n\n    \nstate\n:\n \n''\n,\n\n    \nzip\n:\n \n''\n\n  \n}),\n\n  \npower\n:\n \n''\n,\n\n  \nsidekick\n:\n \n''\n\n\n});\n\n\n\n\n\n\n\nExistem duas diferen\u00e7as significativas entre esses dois modelos:\n\n\n\n\nA classe \nHero\n tem uma propriedade \nid\n. O modelo de formul\u00e1rio n\u00e3o possui essa propriedade, porque geralmente voc\u00ea n\u00e3o apresenta a chave prim\u00e1rio aos usu\u00e1rios.\n\n\nA classe \nHero\n tem um array de endere\u00e7os. O modelo de formul\u00e1rio apresenta somente um \u00fanico endere\u00e7o (uma escolha que vamos revisitar a seguir).\n\n\n\n\nDe qualquer forma, os dois modelos s\u00e3o bem pr\u00f3ximos e voc\u00ea ir\u00e1 ver como esse alinhamento facilita a c\u00f3pia das propriedades do modelo de dados para o modelo de formul\u00e1rio com os m\u00e9todos \npatchValue\n e \nsetValue\n.\n\n\nRefatore a defini\u00e7\u00e3o do \nFormGroup\n \naddress\n como abaixo (para brevidade e maior clareza):\n\n\n1\n2\n3\n4\n5\n6\nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n  \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n  \naddress\n:\n \nthis\n.\nfb\n.\ngroup\n(\nnew\n \nAddress\n()),\n \n// <-- a FormGroup with a new address\n\n  \npower\n:\n \n''\n,\n\n  \nsidekick\n:\n \n''\n\n\n});\n\n\n\n\n\n\n\nAtualize os \nimport\ns para referenciar as classes \nHero\n e \nAddress\n:\n\n\n1\nimport\n \n{\n \nAddress\n,\n \nHero\n,\n \nstates\n \n}\n \nfrom\n \n'../data-model'\n;\n\n\n\n\n\n\n\nPopule o modelo de formul\u00e1rio com os m\u00e9todos \nsetValue\n e \npatchValue\n\u00b6\n\n\nAnteriomente, voc\u00ea criou um controle e o inicializou ao mesmo tempo. Voc\u00ea pode inicilizar (ou resetar) os valores de um controle mais tarde com os m\u00e9todos \nsetValue\n e \npatchValue\n.\n\n\nsetValue\n\u00b6\n\n\nCom o m\u00e9todo \nsetValue\n, voc\u00ea atribui um valor para cada \nFormControl\n de uma \u00fanica vez, ao passar um objeto de dados cujas propriedades coincidem com o modelo de formul\u00e1rio por tr\u00e1s do \nFormGroup\n:\n\n\n1\n2\n3\n4\nthis\n.\nheroForm\n.\nsetValue\n({\n\n  \nname\n:\n    \nthis\n.\nhero\n.\nname\n,\n\n  \naddress\n:\n \nthis\n.\nhero\n.\naddresses\n[\n0\n]\n \n||\n \nnew\n \nAddress\n()\n\n\n});\n\n\n\n\n\n\n\nO m\u00e9todo \nsetValue\n checa todo o objeto de dados antes de atribuir qualquer valor ao modelo de formul\u00e1rio.\n\n\nO m\u00e9todo n\u00e3o ir\u00e1 aceitar um objeto de dados que n\u00e3o coincide com a estrutura do \nFormGroup\n ou se faltar um valor para qualquer um dos controles do grupo. O m\u00e9todo \nsetValue\n ir\u00e1 retornar uma mensagem de erro nesse caso.\n\n\nNote que por pouco n\u00e3o usamos o pr\u00f3prio her\u00f3i como um argumtento para o m\u00e9todo \nsetValue\n, porque a sua estrutura \u00e9 quase que similar \u00e0 estrutura do \nFormGroup\n.\n\n\nNo entanto, como s\u00f3 podemos exibir um \u00fanico endere\u00e7o do her\u00f3i (e, como temos que prever a possibilidade de o her\u00f3i n\u00e3o ter nenhum endere\u00e7o), \u00e9 usada a atribui\u00e7\u00e3o condicional na propriedade \naddress\n:\n\n\n1\naddress\n:\n \nthis\n.\nhero\n.\naddresses\n[\n0\n]\n \n||\n \nnew\n \nAddress\n()\n\n\n\n\n\n\n\npatchValue\n\u00b6\n\n\nCom o m\u00e9todo \npatchValue\n, voc\u00ea pode atribuir valores para controles espec\u00edficos de um \nFormGroup\n ao fornecer um objeto com pares chave/valor somente para os controles de interesse.\n\n\nO exemplo a seguir modifica somente o controle \nname\n do formul\u00e1rio:\n\n\n1\n2\n3\nthis\n.\nheroForm\n.\n`patchValue`\n({\n\n  \nname\n:\n \nthis\n.\nhero\n.\nname\n\n\n});\n\n\n\n\n\n\n\nCom \npatchValue\n voc\u00ea tem uma maior flexibilidade para tratar modelos de dados e formul\u00e1rios divergentes; no entanto, ao contr\u00e1rio do \nsetValue\n, o m\u00e9todo \npatchValue\n n\u00e3o checa a falta de valores para controles e n\u00e3o devolve mensagens de erros.\n\n\nQuando setar o valor do modelo de formul\u00e1rio (\nngOnChanges\n)\n\u00b6\n\n\nAgora voc\u00ea sabe como setar os valores do modelo de formul\u00e1rio. Mas quando voc\u00ea deve set\u00e1-los? A resposta depende de quando o componente recupera os valores do modelo de dados.\n\n\nO componente \nHeroDetailComponent\n \u00e9 aninhado a um componente pai \nHeroListComponent\n (que iremos discutir a seguir). O componente \nHeroListComponent\n exibe os nomes dos her\u00f3is. Quando o usu\u00e1rio clica em um her\u00f3i da lista, o componente \nHeroListComponent\n passa o her\u00f3i selecionado para o \nHeroDetailComponent\n usando um binding de propriedade:\n\n\n1\n2\n3\n4\n5\n6\n7\n<\nnav\n>\n\n  \n<\na\n \n*\nngFor\n=\n\"let hero of heroes | async\"\n \n(\nclick\n)=\"\nselect\n(\nhero\n)\"\n>\n{{hero.name}}\n</\na\n>\n\n\n</\nnav\n>\n\n\n\n<\ndiv\n \n*\nngIf\n=\n\"selectedHero\"\n>\n\n  \n<\napp-hero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\napp-hero-detail\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nNessa abordagem, o valor do her\u00f3i no \nHeroDetailComponent\n ir\u00e1 mudar sempre que usu\u00e1rio selecionar um novo her\u00f3i. Voc\u00ea deve chamar o m\u00e9todo \nsetValue\n no m\u00e9todo \nngOnChanges\n, que \u00e9 chamado pelo Angular sempre que uma propriedade de input do componente \u00e9 alterada. \n\n\nPara fazer isso, importe os s\u00edmbolos \nOnChanges\n e \nInput\n no arquivo \nhero-detail.component.ts\n.\n\n\n1\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnChanges\n \n}\n             \nfrom\n \n'@angular/core'\n;\n\n\n\n\n\n\n\nAdicione a propriedade de input \nhero\n:\n\n\n1\n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n\n\n\n\n\nAdicione o m\u00e9todo \nngOnChanges\n:\n\n\n1\n2\n3\n4\n5\n6\nngOnChanges\n()\n \n{\n\n  \nthis\n.\nheroForm\n.\nsetValue\n({\n\n    \nname\n:\n    \nthis\n.\nhero\n.\nname\n,\n\n    \naddress\n:\n \nthis\n.\nhero\n.\naddresses\n[\n0\n]\n \n||\n \nnew\n \nAddress\n()\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\nResetando o formul\u00e1rio\n\u00b6\n\n\nVoc\u00ea deve resetar o formul\u00e1rio quando a propriedade de input \nhero\n mudar. Dessa forma, os valores e o status de valida\u00e7\u00e3o dos controles associados ao her\u00f3i anterior ser\u00e3o restaurados ao estado \npristine\n.\n\n\nVoc\u00ea poderia chamar o m\u00e9todo \nreset\n no topo do m\u00e9todo \nngOnChanges\n como a seguir:\n\n\n1\nthis\n.\nheroForm\n.\nreset\n();\n\n\n\n\n\n\n\nNo entanto, o m\u00e9todo \nreset\n recebe um par\u00e2metro opcional de forma que voc\u00ea pode restaurar o formul\u00e1rio e inicializar os valores dos controles ao mesmo tempo. Internamente, o m\u00e9todo \nreset\n passa o argumento para o m\u00e9todo \nsetValue\n. O m\u00e9todo \nngOnChanges\n ficaria, ent\u00e3o, como abaixo:\n\n\n1\n2\n3\n4\n5\n6\nngOnChanges\n()\n \n{\n\n  \nthis\n.\nheroForm\n.\nreset\n({\n\n    \nname\n:\n \nthis\n.\nhero\n.\nname\n,\n\n    \naddress\n:\n \nthis\n.\nhero\n.\naddresses\n[\n0\n]\n \n||\n \nnew\n \nAddress\n()\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\nCrie o componente \nHeroListComponent\n e o servi\u00e7o \nHeroService\n\u00b6\n\n\nO componente \nHeroDetailComponent\n \u00e9 um componente filho do \nHeroListComponent\n em uma vis\u00e3o do tipo mestre/detalhe. Juntos, eles forma a seguinte vis\u00e3o:\n\n\n\n\nO componente \nHeroListComponent\n usa o servi\u00e7o \nHeroService\n para recuperar os her\u00f3is a partir de um servidor e, ent\u00e3o, apresenta esses her\u00f3is para o usu\u00e1rio em uma s\u00e9rie de bot\u00f5es.\n\n\nO \nHeroService\n emula um servi\u00e7o HTTP. Ele retorna um \nObservable\n de her\u00f3is que s\u00e3o resolvidos ap\u00f3s um pequeno delay, para simular a lat\u00eancia de rede e indicar visualmente a natureza ass\u00edncrona da aplica\u00e7\u00e3o.\n\n\nQuando o usu\u00e1rio clica em um her\u00f3i, o componente seta a propriedade \nselectedHero\n, que faz um binding com a propriedade de input \nhero\n do componente \nHeroDetailComponent\n. O componente \nHeroDetailComponent\n detecta a mudan\u00e7a na propriedade \nhero\n e reseta o formul\u00e1rio com os dados do her\u00f3i selecionado.\n\n\nUm bot\u00e3o \"Refresh\" limpa a lista de her\u00f3is e o her\u00f3i selecionado antes de recuperar a lista novamente.\n\n\nOs detalhes de implementa\u00e7\u00e3o do \nHeroListComponent\n e \nHeroService\n n\u00e3o s\u00e3o relevantes para esse exerc\u00edcio (e reusam conceitos que j\u00e1 foram abordados em exerc\u00edcios anteriores). Por isso, n\u00e3o vamos abordar em detalhes essa implementa\u00e7\u00e3o.\n\n\nPara dar continuidade ao exerc\u00edcio, crie o componente \nHeroListComponent\n e o servi\u00e7o \nHeroService\n como a seguir:\n\n\n\n\nhero-list.component.ts\n:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nimport\n \n{\n \nComponent\n,\n \nOnInit\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nObservable\n,\n \npipe\n \n}\n        \nfrom\n \n'rxjs'\n;\n\n\nimport\n \n{\n \nfinalize\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\nimport\n \n{\n \nHero\n \n}\n        \nfrom\n \n'../data-model'\n;\n\n\nimport\n \n{\n \nHeroService\n \n}\n \nfrom\n \n'../hero.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-list'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-list.component.html'\n\n\n})\n\n\nexport\n \nclass\n \nHeroListComponent\n \nimplements\n \nOnInit\n \n{\n\n  \nheroes\n:\n \nObservable\n<\nHero\n[]\n>\n;\n\n  \nisLoading\n \n=\n \nfalse\n;\n\n  \nselectedHero\n:\n \nHero\n;\n\n\n  \nconstructor\n(\nprivate\n \nheroService\n:\n \nHeroService\n)\n \n{\n \n}\n\n\n  \nngOnInit\n()\n \n{\n \nthis\n.\ngetHeroes\n();\n \n}\n\n\n  \ngetHeroes\n()\n \n{\n\n    \nthis\n.\nisLoading\n \n=\n \ntrue\n;\n\n    \nthis\n.\nheroes\n \n=\n \nthis\n.\nheroService\n.\ngetHeroes\n()\n\n      \n.\npipe\n(\n\n            \n// Todo: error handling\n\n            \nfinalize\n(()\n \n=>\n \nthis\n.\nisLoading\n \n=\n \nfalse\n)\n\n      \n);\n\n    \nthis\n.\nselectedHero\n \n=\n \nundefined\n;\n\n  \n}\n\n\n  \nselect\n(\nhero\n:\n \nHero\n)\n \n{\n \nthis\n.\nselectedHero\n \n=\n \nhero\n;\n \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nhero-list.component.html\n:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n<\nh3\n \n*\nngIf\n=\n\"isLoading\"\n><\ni\n>\nLoading heroes ... \n</\ni\n></\nh3\n>\n\n\n<\nh3\n \n*\nngIf\n=\n\"!isLoading\"\n>\nSelect a hero:\n</\nh3\n>\n\n\n\n<\nnav\n>\n\n  \n<\nbutton\n \n(\nclick\n)=\"\ngetHeroes\n()\"\n \nclass\n=\n\"btn btn-primary\"\n>\nRefresh\n</\nbutton\n>\n\n  \n<\na\n \n*\nngFor\n=\n\"let hero of heroes | async\"\n \n(\nclick\n)=\"\nselect\n(\nhero\n)\"\n>\n{{hero.name}} \n</\na\n>\n\n\n</\nnav\n>\n\n\n\n<\ndiv\n \n*\nngIf\n=\n\"selectedHero\"\n>\n\n  \n<\nhr\n>\n\n  \n<\nh2\n>\nHero Detail\n</\nh2\n>\n\n  \n<\nh3\n>\nEditing: {{selectedHero.name}}\n</\nh3\n>\n\n  \n<\napp-hero-detail\n \n[\nhero\n]=\"\nselectedHero\n\"\n></\napp-hero-detail\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\n\n\nhero.service.ts\n:\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\nimport\n \n{\n \nInjectable\n \n}\n \nfrom\n \n'@angular/core'\n;\n\n\n\nimport\n \n{\n \nObservable\n,\n \nof\n \n}\n \nfrom\n \n'rxjs'\n;\n\n\nimport\n \n{\n \ndelay\n \n}\n \nfrom\n \n'rxjs/operators'\n;\n\n\n\nimport\n \n{\n \nHero\n,\n \nheroes\n \n}\n \nfrom\n \n'./data-model'\n;\n\n\n\n@\nInjectable\n()\n\n\nexport\n \nclass\n \nHeroService\n \n{\n\n\n  \ndelayMs\n \n=\n \n500\n;\n\n\n  \n// Fake server get; assume nothing can go wrong\n\n  \ngetHeroes\n()\n:\n \nObservable\n<\nHero\n[]\n>\n \n{\n\n    \nreturn\n \nof\n(\nheroes\n)\n\n      \n.\npipe\n(\n\n        \ndelay\n(\nthis\n.\ndelayMs\n)\n \n// simulate latency with delay\n\n      \n);\n\n  \n}\n\n\n  \n// Fake server update; assume nothing can go wrong\n\n  \nupdateHero\n(\nhero\n:\n \nHero\n)\n:\n \nObservable\n<\nHero\n>\n  \n{\n\n    \nconst\n \noldHero\n \n=\n \nheroes\n.\nfind\n(\nh\n \n=>\n \nh\n.\nid\n \n===\n \nhero\n.\nid\n);\n\n    \nconst\n \nnewHero\n \n=\n \nObject\n.\nassign\n(\noldHero\n,\n \nhero\n);\n \n// Demo: mutate cached hero\n\n    \nreturn\n \nof\n(\nnewHero\n)\n\n      \n.\npipe\n(\n\n        \ndelay\n(\nthis\n.\ndelayMs\n)\n \n// simulate latency with delay\n\n      \n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nN\u00e3o se esque\u00e7a de incluir o componente \nHeroListComponent\n ao array \ndeclarations\n e o \nHeroService\n ao array \nproviders\n do m\u00f3dulo \nAppModule\n.\n\n\nUsando o \nFormArray\n para apresentar um array de \nFormGroup\ns\n\u00b6\n\n\nAt\u00e9 agora, voc\u00ea trabalhou com \nFormControl\ns e \nFormGroup\ns. Um \nFormGroup\n \u00e9 um objeto cujas propriedades s\u00e3o \nFormControl\ns ou outros \nFormGroup\ns.\n\n\nAlgumas vezes, voc\u00ea precisa apresentar um n\u00famero arbitr\u00e1rio de controles ou grupos. Por exemplo, um her\u00f3i pode ter nenhum, um ou um n\u00famero qualquer de endere\u00e7os.\n\n\nA propriedade \nHero.addresses\n \u00e9 um array de inst\u00e2ncias do tipo \nAddress\n. Um \nFormGroup\n pode exibir somente um endere\u00e7o. No entanto, um \nFormArray\n pode exibir um array de \nFormGroup\ns.\n\n\nPara usar a classe \nFormArray\n, importe-a no arquivo \nhero-detail.component.ts\n:\n\n\n1\n2\n3\n4\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnChanges\n \n}\n                   \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormArray\n,\n \nFormBuilder\n,\n \nFormGroup\n,\n \nValidators\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nAddress\n,\n \nHero\n,\n \nstates\n \n}\n \nfrom\n \n'../data-model'\n;\n\n\n\n\n\n\n\nPara trabalhar com um \nFormArray\n, voc\u00ea faz o seguinte:\n\n\n\n\nDefina os itens (\nFormControl\ns ou \nFormGroup\ns) no array.\n\n\nInicialize o array com os itens criados a partir do modelo de dados.\n\n\nAdicione e remova itens conforme a necesssidade.\n\n\n\n\nNesse exerc\u00edcio, voc\u00ea define um \nFormArray\npara o \nHero.addresses\n e permite ao usu\u00e1rio adicionar ou modificar endere\u00e7os.\n\n\nPara isso, voc\u00ea precisa redefinir o modelo do formul\u00e1rio no componente \nHeroDetailComponent\n, que atualmente somente exibe o primeiro endere\u00e7o do her\u00f3i em um \nFormGroup\n:\n\n\n1\n2\n3\n4\n5\n6\nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n  \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n  \naddress\n:\n \nthis\n.\nfb\n.\ngroup\n(\nnew\n \nAddress\n()),\n \n// <-- a FormGroup with a new address\n\n  \npower\n:\n \n''\n,\n\n  \nsidekick\n:\n \n''\n\n\n});\n\n\n\n\n\n\n\nCovis secretos\n\u00b6\n\n\nPela perspectiva do usu\u00e1rio, os her\u00f3is n\u00e3o possuem endere\u00e7os. Endere\u00e7os s\u00e3o para meros mortais. Her\u00f3is possuem covis secretos!\n\n\nModifique a defini\u00e7\u00e3o do \nFormGroup\n com uma propriedade \nsecretLairs\n do tipo \nFormArray\n:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\ncreateForm\n()\n \n{\n\n  \nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n    \nname\n:\n \n[\n''\n,\n \nValidators\n.\nrequired\n \n],\n\n    \nsecretLairs\n:\n \nthis\n.\nfb\n.\narray\n([]),\n \n// <-- secretLairs as an empty FormArray\n\n    \npower\n:\n \n''\n,\n\n    \nsidekick\n:\n \n''\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\nAlterar o nome da propriedade no modelo de formul\u00e1rio traz \u00e0 tona uma importante observa\u00e7\u00e3o: o modelo de formul\u00e1rio n\u00e3o precisa ser exatamente igual ao modelo de dados. As necessidades de apresenta\u00e7\u00e3o normalmente s\u00e3o diferentes das necessidades do modelo de dados. A abordagem \nreactive\n enfatiza e facilita essa distin\u00e7\u00e3o.\n\n\nInicializar o \nsecretLairs\n\u00b6\n\n\nPara popular (e repopular) o \nFormArray\n \nsecretLairs\n a partir dos endere\u00e7os de um her\u00f3i, crie o m\u00e9todo \nsetAddresses\n como a seguir.\n\n\nO m\u00e9todo \nsetAddresses\n substitui a inst\u00e2ncia do \nsecretLairs\n por uma nova inst\u00e2ncia de um \nFormArray\n, inicializada a partir de um array de \nFormGroup\ns de endere\u00e7os do her\u00f3i.\n\n\n1\n2\n3\n4\n5\nsetAddresses\n(\naddresses\n:\n \nAddress\n[])\n \n{\n\n  \nconst\n \naddressFormGroups\n \n=\n \naddresses\n.\nmap\n(\naddress\n \n=>\n \nthis\n.\nfb\n.\ngroup\n(\naddress\n));\n\n  \nconst\n \naddressFormArray\n \n=\n \nthis\n.\nfb\n.\narray\n(\naddressFormGroups\n);\n\n  \nthis\n.\nheroForm\n.\nsetControl\n(\n'secretLairs'\n,\n \naddressFormArray\n);\n\n\n}\n\n\n\n\n\n\n\nModifique ent\u00e3o o m\u00e9todo \nngOnChanges\n para adicionar a chamada ao novo m\u00e9todo \nsetAddresses\n e para remover a defini\u00e7\u00e3o da propriedade \naddress\n:\n\n\n1\n2\n3\n4\n5\n6\nngOnChanges\n()\n \n{\n\n  \nthis\n.\nheroForm\n.\nreset\n({\n\n    \nname\n:\n \nthis\n.\nhero\n.\nname\n,\n\n  \n});\n\n  \nthis\n.\nsetAddresses\n(\nthis\n.\nhero\n.\naddresses\n);\n\n\n}\n\n\n\n\n\n\n\nNote que o \nFormArray\n \u00e9 substitu\u00eddo com o m\u00e9todo \nFormGroup.setControl\n, e n\u00e3o com o \nsetValue\n. N\u00f3s estamos mudando um controle, e n\u00e3o o valor de um controle.\n\n\nNote tamb\u00e9m que o \nsecretLairs\n cont\u00e9m \nFormGroup\ns (modelo de formul\u00e1rio) e n\u00e3o inst\u00e2ncias de \nAddress\n (modelo de dados).\n\n\nRecupere o \nFormArray\n\u00b6\n\n\nO componente \nHeroDetailComponent\n deve ser capaz de exibir, adicionar e remover itens do \nsecretLairs\n.\n\n\nUse o m\u00e9todo \nFormGroup.get\n para recuperar uma refer\u00eancia para o \nFormArray\n. Empacote essa express\u00e3o em um m\u00e9todo getter \nsecretLairs\n para reuso e clareza:\n\n\n1\n2\n3\nget\n \nsecretLairs\n()\n:\n \nFormArray\n \n{\n\n  \nreturn\n \nthis\n.\nheroForm\n.\nget\n(\n'secretLairs'\n)\n \nas\n \nFormArray\n;\n\n\n};\n\n\n\n\n\n\n\nExiba o \nFormArray\n\u00b6\n\n\nO template HTML atual exibe somente um \u00fanico endere\u00e7o. Vamos refator\u00e1-lo para exibir todos os endere\u00e7os de um her\u00f3i.\n\n\nPara fazer isso, basicamente vamos criar um novo \n<div>\n sobre o \n<div>\n que empacota o endere\u00e7o (que criamos anteriormente), e fazer uma itera\u00e7\u00e3o no novo \n<div>\n com a diretiva \n*ngFor\n para cada endere\u00e7o do her\u00f3i.\n\n\nO truque \u00e9 saber como escrever o \n*ngFor\n. S\u00e3o tr\u00eas pontos chaves:\n\n\n\n\nAdicione outro \n<div>\n sobre o \n<div>\n com o \n*ngFor\n, e use a diretiva \nformArrayName\n com o valor \nsecretLairs\n. Esse passo estabelece o \nFormArray\n \nsecretLairs\n como o contexto para os controles no template interno do \n*ngFor\n.\n\n\nA fonte de itens para a itera\u00e7\u00e3o \u00e9 o \nFormArray.controls\n e n\u00e3o o \nFormArray\n por si pr\u00f3prio. Cada controle \u00e9 um \nFormGroup\n de endere\u00e7o, exatamente como na vers\u00e3o anterior do template.\n\n\nCada \nFormGroup\n da itera\u00e7\u00e3o precisa de um \nformGroupName\n \u00fanico, que precisa ser o \u00edndice do \nFormGroup\n no \nFormArray\n. Voc\u00ea ir\u00e1 reusar o \u00edndice para compor um label para cada endere\u00e7o.\n\n\n\n\nEsse \u00e9 o esqueleto da se\u00e7\u00e3o de covis secretos no template HTML:\n\n\n1\n2\n3\n4\n5\n<\ndiv\n \nformArrayName\n=\n\"secretLairs\"\n \nclass\n=\n\"well well-lg\"\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let address of secretLairs.controls; let i=index\"\n \n[\nformGroupName\n]=\"\ni\n\"\n \n>\n\n    \n<!-- The repeated address template -->\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nE esse \u00e9 o template completo para a se\u00e7\u00e3o de covis secretos:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n<\ndiv\n \nformArrayName\n=\n\"secretLairs\"\n \nclass\n=\n\"well well-lg\"\n>\n\n  \n<\ndiv\n \n*\nngFor\n=\n\"let address of secretLairs.controls; let i=index\"\n \n[\nformGroupName\n]=\"\ni\n\"\n \n>\n\n    \n<!-- The repeated address template -->\n\n    \n<\nh4\n>\nAddress #{{i + 1}}\n</\nh4\n>\n\n    \n<\ndiv\n \nstyle\n=\n\"margin-left: 1em;\"\n>\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nStreet:\n          \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"street\"\n>\n\n        \n</\nlabel\n>\n\n      \n</\ndiv\n>\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nCity:\n          \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"city\"\n>\n\n        \n</\nlabel\n>\n\n      \n</\ndiv\n>\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nState:\n          \n<\nselect\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"state\"\n>\n\n            \n<\noption\n \n*\nngFor\n=\n\"let state of states\"\n \n[\nvalue\n]=\"\nstate\n\"\n>\n{{state}}\n</\noption\n>\n\n          \n</\nselect\n>\n\n        \n</\nlabel\n>\n\n      \n</\ndiv\n>\n\n      \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n        \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nZip Code:\n          \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"zip\"\n>\n\n        \n</\nlabel\n>\n\n      \n</\ndiv\n>\n\n    \n</\ndiv\n>\n\n    \n<\nbr\n>\n\n    \n<!-- End of the repeated address template -->\n\n  \n</\ndiv\n>\n\n\n</\ndiv\n>\n\n\n\n\n\n\n\nAdicionando um novo covil secreto\n\u00b6\n\n\nCrie o m\u00e9todo \naddLair\n que adiciona um novo \nFormGroup\n de endere\u00e7o ao \nFormArray\n \nsecretLairs\n:\n\n\n1\n2\n3\naddLair\n()\n \n{\n\n  \nthis\n.\nsecretLairs\n.\npush\n(\nthis\n.\nfb\n.\ngroup\n(\nnew\n \nAddress\n()));\n\n\n}\n\n\n\n\n\n\n\nInclua um novo bot\u00e3o ao formul\u00e1rio para que usu\u00e1rio possa adicionar um novo covil secreto. Fa\u00e7a o binding ao novo m\u00e9todo \naddLair\n:\n\n\n1\n<\nbutton\n \n(\nclick\n)=\"\naddLair\n()\"\n \ntype\n=\n\"button\"\n>\nAdd a Secret Lair\n</\nbutton\n>\n\n\n\n\n\n\n\nDe volta ao navegador, selecione o her\u00f3i \"Magneta\". O her\u00f3i \"Magneta\" n\u00e3o possui um endere\u00e7o, como voc\u00ea pode ver na mensagem de diagn\u00f3stico ao final do formul\u00e1rio.\n\n\n\n\nClique no bot\u00e3o \"Add a Secret Lair\". Uma nova se\u00e7\u00e3o de endere\u00e7o aparece. Muito bem!\n\n\nRemovendo um covil secreto\n\u00b6\n\n\nEsse exemplo mostra como adicionar endere\u00e7os, mas n\u00e3o mostra como remov\u00ea-los. Como tarefa de casa, escreva um m\u00e9todo \nremoveLair\n e adicione um bot\u00e3o para apagar um endere\u00e7o.\n\n\nSalvando dados do formul\u00e1rio\n\u00b6\n\n\nO componente \nHeroDetailComponent\n captura as mudan\u00e7as do usu\u00e1rio, mas n\u00e3o faz nada com essas mudan\u00e7as.\n\n\nEm aplica\u00e7\u00f5es reais, voc\u00ea provavelmente ir\u00e1 salvar essas mudan\u00e7as e voc\u00ea tamb\u00e9m gostaria de reverter mudan\u00e7as que n\u00e3o foram salvas.\n\n\nAp\u00f3s implementar essas funcionalidades, o formul\u00e1rio ir\u00e1 parecer como abaixo:\n\n\n\n\nSalvar\n\u00b6\n\n\nNesse exerc\u00edcio, quando o usu\u00e1rio submeter o formul\u00e1rio, o componente \nHeroDetailComponent\n ir\u00e1 passar uma inst\u00e2ncia de um her\u00f3i para o m\u00e9todo \nupdateHero\n do \nHeroService\n.\n\n\n1\n2\n3\n4\n5\nonSubmit\n()\n \n{\n\n  \nthis\n.\nhero\n \n=\n \nthis\n.\nprepareSaveHero\n();\n\n  \nthis\n.\nheroService\n.\nupdateHero\n(\nthis\n.\nhero\n).\nsubscribe\n(\n/* error handling */\n);\n\n  \nthis\n.\nngOnChanges\n();\n\n\n}\n\n\n\n\n\n\n\nCrie o m\u00e9todo \nprepareSaveHero\n que ir\u00e1 criar um novo her\u00f3i a partir da combina\u00e7\u00e3o dos valores originais do her\u00f3i (\nthis.hero\n) e de valores do modelo do formul\u00e1rio (\nthis.heroForm.value\n):\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nprepareSaveHero\n()\n:\n \nHero\n \n{\n\n  \nconst\n \nformModel\n \n=\n \nthis\n.\nheroForm\n.\nvalue\n;\n\n\n  \n// deep copy of form model lairs\n\n  \nconst\n \nsecretLairsDeepCopy\n:\n \nAddress\n[]\n \n=\n \nformModel\n.\nsecretLairs\n.\nmap\n(\n\n    \n(\naddress\n:\n \nAddress\n)\n \n=>\n \nObject\n.\nassign\n({},\n \naddress\n)\n\n  \n);\n\n\n  \n// return new `Hero` object containing a combination of original hero value(s)\n\n  \n// and deep copies of changed form model values\n\n  \nconst\n \nsaveHero\n:\n \nHero\n \n=\n \n{\n\n    \nid\n:\n \nthis\n.\nhero\n.\nid\n,\n\n    \nname\n:\n \nformModel\n.\nname\n \nas\n \nstring\n,\n\n    \n// addresses: formModel.secretLairs // <-- bad!\n\n    \naddresses\n:\n \nsecretLairsDeepCopy\n\n  \n};\n\n  \nreturn\n \nsaveHero\n;\n\n\n}\n\n\n\n\n\n\n\nRevertando mudan\u00e7as n\u00e3o salvas\n\u00b6\n\n\nO usu\u00e1rio cancela mudan\u00e7as e reverte o formul\u00e1rio para o estado original ao clicar no bot\u00e3o \"Revert\".\n\n\nReverter ao estado original \u00e9 f\u00e1cil. Simplesmente re-execute o m\u00e9todo \nngOnChanges\n que constr\u00f3i o modelo do formul\u00e1rio a partir do her\u00f3i selecionado (modelo de dados).\n\n\n1\nrevert\n()\n \n{\n \nthis\n.\nngOnChanges\n();\n \n}\n\n\n\n\n\n\n\nBot\u00f5es\n\u00b6\n\n\nAdicione os bot\u00f5es \"Save\" e \"Revert\" no topo do template do componente:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n<\nform\n \n[\nformGroup\n]=\"\nheroForm\n\"\n \n(\nngSubmit\n)=\"\nonSubmit\n()\"\n \nnovalidate\n>\n\n  \n<\ndiv\n \nstyle\n=\n\"margin-bottom: 1em\"\n>\n\n    \n<\nbutton\n \ntype\n=\n\"submit\"\n\n            \n[\ndisabled\n]=\"\nheroForm\n.\npristine\n\"\n \nclass\n=\n\"btn btn-success\"\n>\nSave\n</\nbutton\n>\n \n&nbsp;\n\n    \n<\nbutton\n \ntype\n=\n\"reset\"\n \n(\nclick\n)=\"\nrevert\n()\"\n\n            \n[\ndisabled\n]=\"\nheroForm\n.\npristine\n\"\n \nclass\n=\n\"btn btn-danger\"\n>\nRevert\n</\nbutton\n>\n\n  \n</\ndiv\n>\n\n\n  \n<!-- Hero Detail Controls -->\n\n  \n<\ndiv\n \nclass\n=\n\"form-group radio\"\n>\n\n    \n<\nh4\n>\nSuper power:\n</\nh4\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"flight\"\n>\nFlight\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"x-ray vision\"\n>\nX-ray vision\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"strength\"\n>\nStrength\n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"checkbox\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\n\n      \n<\ninput\n \ntype\n=\n\"checkbox\"\n \nformControlName\n=\n\"sidekick\"\n>\nI have a sidekick.\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n</\nform\n>\n\n\n\n\n\n\n\nOs bot\u00f5es s\u00e3o desabilitados enquanto o usu\u00e1rio n\u00e3o \"sujar\" o formul\u00e1rio (isto \u00e9, enquanto na\u00f5 mudar o valor em qualquer um dos \nFormControl\n).\n\n\nClicar em um bot\u00e3o de tipo \"submit\" ir\u00e1 levantar o evento \nngSubmit\n, que chama o m\u00e9todo \nonSubmit\n do compoennte. Clicar no bot\u00e3o \"Revert\" ir\u00e1 chamar o m\u00e9todo \nrevert\n. Agora, os usu\u00e1rios podem salvar ou reverter as mudan\u00e7as.\n\n\nEsse \u00e9 o final do exerc\u00edcio.\n\n\nO arquivo \nhero-detail.component.ts\n deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\nimport\n \n{\n \nComponent\n,\n \nInput\n,\n \nOnChanges\n \n}\n       \nfrom\n \n'@angular/core'\n;\n\n\nimport\n \n{\n \nFormArray\n,\n \nFormBuilder\n,\n \nFormGroup\n \n}\n \nfrom\n \n'@angular/forms'\n;\n\n\n\nimport\n \n{\n \nAddress\n,\n \nHero\n,\n \nstates\n \n}\n \nfrom\n \n'../data-model'\n;\n\n\nimport\n \n{\n \nHeroService\n \n}\n           \nfrom\n \n'../hero.service'\n;\n\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \n'app-hero-detail'\n,\n\n  \ntemplateUrl\n:\n \n'./hero-detail.component.html'\n,\n\n  \nstyleUrls\n:\n \n[\n'./hero-detail.component.css'\n]\n\n\n})\n\n\nexport\n \nclass\n \nHeroDetailComponent\n \nimplements\n \nOnChanges\n \n{\n\n  \n@\nInput\n()\n \nhero\n:\n \nHero\n;\n\n\n  \nheroForm\n:\n \nFormGroup\n;\n\n  \nstates\n \n=\n \nstates\n;\n\n\n  \nconstructor\n(\n\n    \nprivate\n \nfb\n:\n \nFormBuilder\n,\n\n    \nprivate\n \nheroService\n:\n \nHeroService\n)\n \n{\n\n\n    \nthis\n.\ncreateForm\n();\n\n  \n}\n\n\n  \ncreateForm\n()\n \n{\n\n    \nthis\n.\nheroForm\n \n=\n \nthis\n.\nfb\n.\ngroup\n({\n\n      \nname\n:\n \n''\n,\n\n      \nsecretLairs\n:\n \nthis\n.\nfb\n.\narray\n([]),\n\n      \npower\n:\n \n''\n,\n\n      \nsidekick\n:\n \n''\n\n    \n});\n\n  \n}\n\n\n  \nngOnChanges\n()\n \n{\n\n    \nthis\n.\nheroForm\n.\nreset\n({\n\n      \nname\n:\n \nthis\n.\nhero\n.\nname\n\n    \n});\n\n    \nthis\n.\nsetAddresses\n(\nthis\n.\nhero\n.\naddresses\n);\n\n  \n}\n\n\n  \nget\n \nsecretLairs\n()\n:\n \nFormArray\n \n{\n\n    \nreturn\n \nthis\n.\nheroForm\n.\nget\n(\n'secretLairs'\n)\n \nas\n \nFormArray\n;\n\n  \n};\n\n\n  \nsetAddresses\n(\naddresses\n:\n \nAddress\n[])\n \n{\n\n    \nconst\n \naddressFGs\n \n=\n \naddresses\n.\nmap\n(\naddress\n \n=>\n \nthis\n.\nfb\n.\ngroup\n(\naddress\n));\n\n    \nconst\n \naddressFormArray\n \n=\n \nthis\n.\nfb\n.\narray\n(\naddressFGs\n);\n\n    \nthis\n.\nheroForm\n.\nsetControl\n(\n'secretLairs'\n,\n \naddressFormArray\n);\n\n  \n}\n\n\n  \naddLair\n()\n \n{\n\n    \nthis\n.\nsecretLairs\n.\npush\n(\nthis\n.\nfb\n.\ngroup\n(\nnew\n \nAddress\n()));\n\n  \n}\n\n\n  \nonSubmit\n()\n \n{\n\n    \nthis\n.\nhero\n \n=\n \nthis\n.\nprepareSaveHero\n();\n\n    \nthis\n.\nheroService\n.\nupdateHero\n(\nthis\n.\nhero\n).\nsubscribe\n(\n/* error handling */\n);\n\n    \nthis\n.\nngOnChanges\n();\n\n  \n}\n\n\n  \nprepareSaveHero\n()\n:\n \nHero\n \n{\n\n    \nconst\n \nformModel\n \n=\n \nthis\n.\nheroForm\n.\nvalue\n;\n\n\n    \n// deep copy of form model lairs\n\n    \nconst\n \nsecretLairsDeepCopy\n:\n \nAddress\n[]\n \n=\n \nformModel\n.\nsecretLairs\n.\nmap\n(\n\n      \n(\naddress\n:\n \nAddress\n)\n \n=>\n \nObject\n.\nassign\n({},\n \naddress\n)\n\n    \n);\n\n\n    \n// return new `Hero` object containing a combination of original hero value(s)\n\n    \n// and deep copies of changed form model values\n\n    \nconst\n \nsaveHero\n:\n \nHero\n \n=\n \n{\n\n      \nid\n:\n \nthis\n.\nhero\n.\nid\n,\n\n      \nname\n:\n \nformModel\n.\nname\n \nas\n \nstring\n,\n\n      \n// addresses: formModel.secretLairs // <-- bad!\n\n      \naddresses\n:\n \nsecretLairsDeepCopy\n\n    \n};\n\n    \nreturn\n \nsaveHero\n;\n\n  \n}\n\n\n  \nrevert\n()\n \n{\n \nthis\n.\nngOnChanges\n();\n \n}\n\n\n\n}\n\n\n\n\n\n\n\nO arquivo \nhero-detail.component.html\n deve ser algo como:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n<\nform\n \n[\nformGroup\n]=\"\nheroForm\n\"\n \n(\nngSubmit\n)=\"\nonSubmit\n()\"\n \nnovalidate\n>\n\n  \n<\ndiv\n \nstyle\n=\n\"margin-bottom: 1em\"\n>\n\n    \n<\nbutton\n \ntype\n=\n\"submit\"\n\n            \n[\ndisabled\n]=\"\nheroForm\n.\npristine\n\"\n \nclass\n=\n\"btn btn-success\"\n>\nSave\n</\nbutton\n>\n \n&nbsp;\n\n    \n<\nbutton\n \ntype\n=\n\"reset\"\n \n(\nclick\n)=\"\nrevert\n()\"\n\n            \n[\ndisabled\n]=\"\nheroForm\n.\npristine\n\"\n \nclass\n=\n\"btn btn-danger\"\n>\nRevert\n</\nbutton\n>\n\n  \n</\ndiv\n>\n\n\n  \n<!-- Hero Detail Controls -->\n\n  \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n      \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nName:\n        \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"name\"\n>\n\n      \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n  \n<\ndiv\n \nformArrayName\n=\n\"secretLairs\"\n \nclass\n=\n\"well well-lg\"\n>\n\n    \n<\ndiv\n \n*\nngFor\n=\n\"let address of secretLairs.controls; let i=index\"\n \n[\nformGroupName\n]=\"\ni\n\"\n \n>\n\n      \n<!-- The repeated address template -->\n\n      \n<\nh4\n>\nAddress #{{i + 1}}\n</\nh4\n>\n\n      \n<\ndiv\n \nstyle\n=\n\"margin-left: 1em;\"\n>\n\n        \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n          \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nStreet:\n            \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"street\"\n>\n\n          \n</\nlabel\n>\n\n        \n</\ndiv\n>\n\n        \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n          \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nCity:\n            \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"city\"\n>\n\n          \n</\nlabel\n>\n\n        \n</\ndiv\n>\n\n        \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n          \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nState:\n            \n<\nselect\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"state\"\n>\n\n              \n<\noption\n \n*\nngFor\n=\n\"let state of states\"\n \n[\nvalue\n]=\"\nstate\n\"\n>\n{{state}}\n</\noption\n>\n\n            \n</\nselect\n>\n\n          \n</\nlabel\n>\n\n        \n</\ndiv\n>\n\n        \n<\ndiv\n \nclass\n=\n\"form-group\"\n>\n\n          \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\nZip Code:\n            \n<\ninput\n \nclass\n=\n\"form-control\"\n \nformControlName\n=\n\"zip\"\n>\n\n          \n</\nlabel\n>\n\n        \n</\ndiv\n>\n\n      \n</\ndiv\n>\n\n      \n<\nbr\n>\n\n      \n<!-- End of the repeated address template -->\n\n    \n</\ndiv\n>\n\n    \n<\nbutton\n \n(\nclick\n)=\"\naddLair\n()\"\n \ntype\n=\n\"button\"\n>\nAdd a Secret Lair\n</\nbutton\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"form-group radio\"\n>\n\n    \n<\nh4\n>\nSuper power:\n</\nh4\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"flight\"\n>\nFlight\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"x-ray vision\"\n>\nX-ray vision\n</\nlabel\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n><\ninput\n \ntype\n=\n\"radio\"\n \nformControlName\n=\n\"power\"\n \nvalue\n=\n\"strength\"\n>\nStrength\n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n  \n<\ndiv\n \nclass\n=\n\"checkbox\"\n>\n\n    \n<\nlabel\n \nclass\n=\n\"center-block\"\n>\n\n      \n<\ninput\n \ntype\n=\n\"checkbox\"\n \nformControlName\n=\n\"sidekick\"\n>\nI have a sidekick.\n    \n</\nlabel\n>\n\n  \n</\ndiv\n>\n\n\n</\nform\n>\n\n\n\n<\np\n>\nheroForm value: {{ heroForm.value | json}}\n</\np\n>\n\n\n\n\n\n\n\nRevisando a estrutura da aplica\u00e7\u00e3o\n\u00b6\n\n\nNesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\nexercicio-angular-reactive-forms/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- hero-detail/\n|  |  |   |-- hero-detail.component.css\n|  |  |   |-- hero-detail.component.html\n|  |  |   |-- hero-detail.component.ts\n|  |  |-- hero-list/\n|  |  |   |-- hero-list.component.css\n|  |  |   |-- hero-list.component.html\n|  |  |   |-- hero-list.component.ts\n|  |  |-- app.component.css\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- data-model.ts\n|  |  |-- hero.service.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...\n\n\n\n\n\n\nResumo\n\u00b6\n\n\nNesse exerc\u00edcio, aprendemos a:\n\n\n\n\nCriar um template na abordagem \nreactive\n.\n\n\nComo usar o \nFormBuilder\n para simplificar a constru\u00e7\u00e3o do formul\u00e1rio.\n\n\nAgrupar \nFormControl\ns em um \nFormGroup\n.\n\n\nInspecionar as propriedades de um \nFormControl\n.\n\n\nSetar dados com os m\u00e9todos \npatchValue\n e \nsetValue\n.\n\n\nAdicionar grupos dinamicamente com um \nFormArray\n.\n\n\nSalvar mudan\u00e7as a um formul\u00e1rio.",
            "title": "15 - Reactive Forms"
        },
        {
            "location": "/exercicios/exercicio-15/#exercicio-15",
            "text": "",
            "title": "Exerc\u00edcio 15"
        },
        {
            "location": "/exercicios/exercicio-15/#objetivos",
            "text": "Construir um formul\u00e1rio com a abordagem  reactive , com  two-way data binding , controle de estado e valida\u00e7\u00f5es customizadas.",
            "title": "Objetivos"
        },
        {
            "location": "/exercicios/exercicio-15/#duracao",
            "text": "45 minutos",
            "title": "Dura\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-15/#preparando-o-ambiente",
            "text": "Crie uma nova aplica\u00e7\u00e3o chamada  exercicio-angular-reactive-forms  e deixe-a rodando:  1\n2\n3 ng new exercicio-angular-reactive-forms cd  exercicio-angular-reactive-forms\nnpm run start   O comando  npm run start  iniciar\u00e1 um servidor local para desenvolvimento em \" watch mode \", ou seja, qualquer edi\u00e7\u00e3o nos arquivos, ir\u00e1 recompilar e recarregar a aplica\u00e7\u00e3o no browser. Acesse sua app no endere\u00e7o local:  http://localhost:4200/ .",
            "title": "Preparando o ambiente"
        },
        {
            "location": "/exercicios/exercicio-15/#introducao",
            "text": "O Angular oferece duas abordagens para a constru\u00e7\u00e3o de formul\u00e1rios: a abordagem  reactive  e a abordagem  template-driven . As duas tecnologias pertencem \u00e0 biblioteca  @angular/forms  e compartilham um conjunto comum de classes de controle de formul\u00e1rios.  No entanto, elas divergem na filosofia, no estilo e na t\u00e9cnica de programa\u00e7\u00e3o. Elas at\u00e9 tem seus m\u00f3dulos distintos: o  ReactiveFormsModule  (abordagem  reactive ) e o  FormsModule  (abordagem  template-driven ).",
            "title": "Introdu\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-15/#a-abordagem-reactive",
            "text": "A abordagem  reactive  facilita o uso do estilo de programa\u00e7\u00e3o \"reativo\", que favorece o controle expl\u00edcito do fluxo de dados entre um modelo de dados n\u00e3o-UI (geralmente, recuperados a partir de um servidor backend), e um modelo de dados de formul\u00e1rios orientado \u00e0 UI (que ret\u00e9m os estados e valores dos controles HTML da tela). A abordagem  reactive  facilita, ent\u00e3o, a implementa\u00e7\u00e3o, os testes e as valida\u00e7\u00f5es nesse padr\u00e3o de programa\u00e7\u00e3o \"reativo\".  Nos formul\u00e1rios reativos, voc\u00ea cria, na classe do seu componente, uma \u00e1rvore de objetos de controle de formul\u00e1rios (ex:  FormControl ), fazendo o binding desses objetos com os elementos nativos HTML de controle de formul\u00e1rios (ex:  <input> ,  <form> ) no template do componente.  Voc\u00ea cria e manipula os objetos de controle de formul\u00e1rios diretamente na classe do seu componente. Como o componente tem acesso imediato tanto ao modelo de dados quanto ao modelo de formul\u00e1rio, voc\u00ea pode atualizar os valores do modelo de formul\u00e1rio a partir do modelo de dados e vice-versa.  Seguindo o paradigma reativo de programa\u00e7\u00e3o, o componente preserva a imutabilidade do modelo de dados, tratando-o como uma fonte de valores \"originais\" e imut\u00e1veis. Ao inv\u00e9s de atualizar o modelo de dados diretamente, o componente extrai as mudan\u00e7as do usu\u00e1rio e as direciona para um componente ou um servi\u00e7o externo, que, por sua vez, faz alguma coisa com esses dados (por exemplo: \"salva\" os dados), retornando um novo estado do modelo de dados que reflete essas mudan\u00e7as.  Usar as diretivas da abordagem  reativa  n\u00e3o obriga voc\u00ea a seguir todos os princ\u00edpios desse padr\u00e3o de programa\u00e7\u00e3o; a ideia \u00e9 facilitar a implementa\u00e7\u00e3o de seus componentes caso voc\u00ea opte por usar esse paradigma.",
            "title": "A abordagem reactive"
        },
        {
            "location": "/exercicios/exercicio-15/#a-abordagem-template-driven",
            "text": "Os formul\u00e1rios  template-driven  tem uma abordagem completamente diferente.   Voc\u00ea faz um binding dos controle de formul\u00e1rios nativos HTML (como o  <input>  e o  <select> ) no template diretamente com o modelo de dados no componente, usando diretivas como o  ngModel .  Voc\u00ea n\u00e3o cria objetos de controle de formul\u00e1rios no seu componente (como o  FormControl ). As diretivas Angular v\u00e3o criar esses objetos para voc\u00ea automaticamente.  Voc\u00ea n\u00e3o atualiza os valores do modelo de formul\u00e1rios explicitamente. A diretiva  ngModel  faz isso para voc\u00ea.  O Angular atualiza o modelo de dados (que \u00e9 mut\u00e1vel) na medida em que as mudan\u00e7as acontecem (como, por exemplo, quando o usu\u00e1rio digita um valor em um  <input> ).   Em outras palavras, o controle do fluxo de dados entre o modelo de dados e o modelo de formul\u00e1rio \u00e9 feito pelo pr\u00f3prio Angular. Isso significa que voc\u00ea vai escrever menos c\u00f3digo, mas isso pode complicar o desenvolvimento de cen\u00e1rios mais complexos.",
            "title": "A abordagem template-driven"
        },
        {
            "location": "/exercicios/exercicio-15/#qual-abordagem-e-a-melhor",
            "text": "Nenhuma  das duas abordagens \u00e9 a melhor. As duas t\u00e9cnicas representam paradigmas diferentes, com suas pr\u00f3prias for\u00e7as e fraquezas. Escolha a abordagem que \u00e9 melhor para voc\u00ea. Voc\u00ea pode at\u00e9 escolher usar as duas abordagens na mesma aplica\u00e7\u00e3o.",
            "title": "Qual abordagem \u00e9 a melhor?"
        },
        {
            "location": "/exercicios/exercicio-15/#crie-um-modelo-de-dados",
            "text": "O objetivo desse exerc\u00edcio \u00e9 criar um componente para a edi\u00e7\u00e3o de um her\u00f3i usando a abordagem  reactive . Para isso, vamos precisar de uma classe que representa o her\u00f3i e de alguns dados para edi\u00e7\u00e3o.  Usando o Angular CLI, gere uma nova classe com o nome  data-model :  1 ng generate class data-model   Copie o conte\u00fado abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37 export   class   Hero   { \n   id   =   0 ; \n   name   =   '' ; \n   addresses :   Address [];  }  export   class   Address   { \n   street   =   '' ; \n   city     =   '' ; \n   state    =   '' ; \n   zip      =   '' ;  }  export   const   heroes :   Hero []   =   [ \n   { \n     id :   1 , \n     name :   'Whirlwind' , \n     addresses :   [ \n       { street :   '123 Main' ,    city :   'Anywhere' ,   state :   'CA' ,    zip :   '94801' }, \n       { street :   '456 Maple' ,   city :   'Somewhere' ,   state :   'VA' ,   zip :   '23226' }, \n     ] \n   }, \n   { \n     id :   2 , \n     name :   'Bombastic' , \n     addresses :   [ \n       { street :   '789 Elm' ,    city :   'Smallville' ,   state :   'OH' ,    zip :   '04501' }, \n     ] \n   }, \n   { \n     id :   3 , \n     name :   'Magneta' , \n     addresses :   [   ] \n   },  ];  export   const   states   =   [ 'CA' ,   'MD' ,   'OH' ,   'VA' ];    Esse arquivo exporta duas classes e duas constantes. As classes  Address  e  Hero  definem o modelo de dados da aplica\u00e7\u00e3o. As constantes  heroes  e  states  fornecem dados para os testes.",
            "title": "Crie um modelo de dados"
        },
        {
            "location": "/exercicios/exercicio-15/#crie-o-componente",
            "text": "Gere um novo componente chamado  HeroDetail :  1 ng generate component HeroDetail   Inclua o  import  abaixo:  1 import   {   FormControl   }   from   '@angular/forms' ;    Em seguida, atualize o  HeroDetailComponent  incluindo um  FormControl .  FormControl  \u00e9 uma diretiva que permite a cria\u00e7\u00e3o e a gest\u00e3o de inst\u00e2ncias de objetos de controle de formul\u00e1rios diretamente.  1\n2\n3 export   class   HeroDetailComponent1   { \n   name   =   new   FormControl ();  }    Nesse trecho, voc\u00ea est\u00e1 criando uma propriedade do tipo  FormControl  com o nome  name . Logo mais, iremos fazer um binding dessa propriedade com um elemento HTML  <input>  no template do componente.  O construtor de um  FormControl  aceita tr\u00eas par\u00e2metros (opcionais): o valor inicial do objeto, um array de validadores e um array de validadores ass\u00edncronos.  No nosso exemplo, o objeto n\u00e3o possui dados iniciais nem valida\u00e7\u00f5es. No entanto, em aplica\u00e7\u00f5es reais, a maioria dos controles de formul\u00e1rios possuem ambos.",
            "title": "Crie o componente"
        },
        {
            "location": "/exercicios/exercicio-15/#crie-o-template",
            "text": "Agora, atualize o template do componente como abaixo:  1\n2\n3\n4\n5 < h2 > Hero Detail </ h2 >  < h3 >< i > Just a FormControl </ i ></ h3 >  < label   class = \"center-block\" > Name:\n   < input   class = \"form-control\"   [ formControl ]=\" name \" >  </ label >    Para avisar ao Angular que esse \u00e9 o input que voc\u00ea quer associar ao  FormControl  que criamos no componente, voc\u00ea precisa usar o binding  [formControl]=\"name\" .   Observa\u00e7\u00e3o :  A classe CSS  form-control  pertence \u00e0 biblioteca  Bootstrap  (e n\u00e3o ao Angular), e serve somente para definir estilos do  <input> , sem nenhum impacto sobre a l\u00f3gica do formul\u00e1rio.",
            "title": "Crie o template"
        },
        {
            "location": "/exercicios/exercicio-15/#importe-o-modulo-reactiveformsmodule",
            "text": "O template do componente  HeroDetailComponent  usa a diretiva  formControlName  do m\u00f3dulo  ReactiveFormsModule .  Atualize, ent\u00e3o, o  app.module.ts  como abaixo:   Adicione um  import  JavaScript para usar o simbolo  ReactiveFormsModule .  Adicione o m\u00f3dulo  ReactiveFormsModule  na lista de imports do m\u00f3dulo  AppModule .    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 import   {   NgModule   }              from   '@angular/core' ;  import   {   BrowserModule   }         from   '@angular/platform-browser' ;  import   {   ReactiveFormsModule   }   from   '@angular/forms' ;    // <-- #1 import module  import   {   AppComponent   }          from   './app.component' ;  import   {   HeroDetailComponent   }   from   './hero-detail/hero-detail.component' ;   // <-- #1 import component  @ NgModule ({ \n   imports :   [ \n     BrowserModule , \n     ReactiveFormsModule   // <-- #2 add to @NgModule imports \n   ], \n   declarations :   [ \n     AppComponent , \n     HeroDetailComponent , \n   ], \n   bootstrap :   [   AppComponent   ]  })  export   class   AppModule   {   }",
            "title": "Importe o m\u00f3dulo ReactiveFormsModule"
        },
        {
            "location": "/exercicios/exercicio-15/#exiba-o-componente-herodetailcomponent",
            "text": "Modifique o template do  AppComponent  para exibir o componente  HeroDetailComponent .  1\n2\n3\n4 < div   class = \"container\" > \n   < h1 > Reactive Forms </ h1 > \n   < app-hero-detail ></ app-hero-detail >  </ div >",
            "title": "Exiba o componente HeroDetailComponent"
        },
        {
            "location": "/exercicios/exercicio-15/#classes-de-formulario-essenciais",
            "text": "Leia um pouco sobre as classes de formul\u00e1rio essenciais da biblioteca  @angular/forms :     Nome  Descri\u00e7\u00e3o      AbstractControl  \u00c9 a classe abstrata base para as classes concretas:  FormControl ,  FormGroup  e  FormArray . Prov\u00ea propriedades e comportamentos comuns \u00e0s tr\u00eas classes.    FormControl  Gerencia o valor e valida\u00e7\u00e3o de um controle de formul\u00e1rio individual. Corresponde a um elemento de formul\u00e1rio HTML (como um  <input> ou um  <select> , por exemplo).    FormGroup  Gerencia o valor e valida\u00e7\u00e3o de um grupo de inst\u00e2ncias do tipo  AbstractControl . Dentre as propriedades do grupo, s\u00e3o inclu\u00eddos os controles \"filhos\".    FormArray  Gerencia o valor e valida\u00e7\u00e3o de um array (indexado numericamente) de inst\u00e2ncias do tipo  AbstractControl .     Vamos aprender mais sobre elas no decorrer desse exerc\u00edcio.",
            "title": "Classes de formul\u00e1rio essenciais"
        },
        {
            "location": "/exercicios/exercicio-15/#adicione-estilos-do-bootstrap",
            "text": "No template dos componentes  AppComponent  e  HeroDetailComponent , n\u00f3s usamos classes CSS da biblioteca Bootstrap. Adicione, ent\u00e3o, as folhas de estilo CSS do Bootstrap ao arquivo  styles.css  como abaixo:  1 @ import   url ( 'https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css' ) ;    Agora que o CSS est\u00e1 configurado, o navegador deve exibir algo como:",
            "title": "Adicione estilos do Bootstrap"
        },
        {
            "location": "/exercicios/exercicio-15/#adicione-um-formgroup",
            "text": "Normalmente, se voc\u00ea possui m\u00faltiplos  FormControl s, voc\u00ea os registra dentro de um  FormGroup  pai. Para criar um  FormGroup , adicione o  import  abaixo ao arquivo  hero-detail.component.ts :  1\n2 import   {   Component   }                from   '@angular/core' ;  import   {   FormControl ,   FormGroup   }   from   '@angular/forms' ;    Na classe, empacote o  FormControl  dentro do  FormGroup  (de nome  heroForm ) como a seguir:  1\n2\n3\n4\n5 export   class   HeroDetailComponent   { \n   heroForm   =   new   FormGroup   ({ \n     name :   new   FormControl () \n   });  }    Agora que voc\u00ea modificou a classe do componente, precisamos refatorar o template. Troque o conte\u00fado do arquivo  hero-detail.component.html  pelo seguinte:  1\n2\n3\n4\n5\n6\n7\n8\n9 < h2 > Hero Detail </ h2 >  < h3 >< i > FormControl in a FormGroup </ i ></ h3 >  < form   [ formGroup ]=\" heroForm \"   novalidate > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Name:\n       < input   class = \"form-control\"   formControlName = \"name\" > \n     </ label > \n   </ div >  </ form >    Note que o  <input>  est\u00e1 dentro de um elemento  <form> .   Observa\u00e7\u00e3o :  O atributo  novalidate  do elemento  <form>  previne que o navegador tente fazer valida\u00e7\u00f5es nativas do HTML   A diretiva  formGroup  \u00e9 uma diretiva do m\u00f3dulo  ReactiveFormsModule  que recebe uma inst\u00e2ncia do tipo  FormGroup  e o associa a um elemento HTML. Nesse caso, a diretiva associa o  heroForm  que criamos no componente ao elemento  <form> .  Agora que o  FormControl  faz parte de um  FormGroup , \u00e9 preciso usar a sintaxe  formControlName=\"name\"  para associar o  FormControl  ao elemento HTML  <input> . Essa sintqxe indica que o objeto de controle de formul\u00e1rio (isto \u00e9, o  FormControl ) deve ser procurado dentro do  FormGroup  pai do elemento (nesse caso, o  heroForm ).   Observa\u00e7\u00e3o :  Assim como a classe CSS  form-control , a classe CSS  form-group  pertence \u00e0 biblioteca  Bootstrap  (e n\u00e3o ao Angular), e serve somente para definir estilos do  <form> , sem nenhum impacto sobre a l\u00f3gica do formul\u00e1rio.   Ok, o formul\u00e1rio est\u00e1 estiloso. Mas, para onde vai o valor informado pelo usu\u00e1rio no  <input> ?",
            "title": "Adicione um FormGroup"
        },
        {
            "location": "/exercicios/exercicio-15/#o-modelo-do-formulario",
            "text": "O valor informado pelo usu\u00e1rio \u00e9 guardado no  modelo do formul\u00e1rio  por tr\u00e1s do  FormControl .  Para ver o modelo do formul\u00e1rio, adicione as seguintes linhas ao final do template  hero-detail.component.html :  1 < p > Form value: {{ heroForm.value | json }} </ p >    A express\u00e3o  heroForm.value  retorna o  modelo do formul\u00e1rio . Usando o  JsonPipe , esse modelo \u00e9 impresso no formato JSON:   O valor inicial da propriedade  name  \u00e9 uma string vazia. Se voc\u00ea come\u00e7ar a digitar um valor no  <input> , voc\u00ea ir\u00e1 ver as mudan\u00e7as sendo refletidas no modelo do formul\u00e1rio.",
            "title": "O modelo do formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-15/#introducao-ao-formbuilder",
            "text": "Em aplica\u00e7\u00f5es reais, os formul\u00e1rios crescem rapidamente. Para facilitar o desenvolvimento e a manuten\u00e7\u00e3o dos formul\u00e1rios, usamos o  FormBuilder .  A classe  FormBuilder  ajuda a reduzir a repeti\u00e7\u00e3o ao gerenciar os detalhes de constru\u00e7\u00e3o de controles para voc\u00ea.  Para usar o  FormBuilder , voc\u00ea precisa import\u00e1-lo no  hero-detail.component.ts :  1\n2 import   {   Component   }                from   '@angular/core' ;  import   {   FormBuilder ,   FormGroup   }   from   '@angular/forms' ;    Vamos ent\u00e3o refatorar o  HeroDetailComponent  para torn\u00e1-lo um pouco mais simples e mais f\u00e1cil de ler:   Defina o tipo da propriedade  heroForm  explicitamente; ela ser\u00e1 inicializada depois.  Injete a classe  FormBuilder  no construtor.  Adicione um novo m\u00e9todo ( createForm ) que usa o  FormBuilder  para inicializar o  heroForm .  Chame o m\u00e9todo  createForm  no construtor.   O componente  HeroDetailComponent  deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 export   class   HeroDetailComponent   { \n   heroForm :   FormGroup ;   // <--- heroForm is of type FormGroup \n\n   constructor ( private   fb :   FormBuilder )   {   // <--- inject FormBuilder \n     this . createForm (); \n   } \n\n   createForm ()   { \n     this . heroForm   =   this . fb . group ({ \n       name :   '' ,   // <--- the FormControl called \"name\" \n     }); \n   }  }    O  FormBuilder.group  \u00e9 um m\u00e9todo que cria um  FormGroup , e recebe como par\u00e2metro um objeto cujas chaves s\u00e3o os nomes dos  FormControl s e cujos valores s\u00e3o as defini\u00e7\u00f5es desses  FormControl s. Nesse exemplo, o controle  name  \u00e9 definido por seu valor inicial (uma string vazia).  Definir um grupo de controles em um \u00fanico objeto \u00e9 uma forma compacta e leg\u00edvel de definir os  FormControl s do seu componente (bem mais simples do que uma s\u00e9rie equivalente de linhas  new FormControl(...) ).",
            "title": "Introdu\u00e7\u00e3o ao FormBuilder"
        },
        {
            "location": "/exercicios/exercicio-15/#a-validacao-validatorsrequired",
            "text": "Apesar de esse exerc\u00edcio n\u00e3o aprofundar em valida\u00e7\u00f5es, podemos demonstrar a simplicidade de se usar o  Validators.required  com a abordagem  reactive .  Primeiro, importe o s\u00edmbolo  Validators .  1\n2 import   {   Component   }                            from   '@angular/core' ;  import   {   FormBuilder ,   FormGroup ,   Validators   }   from   '@angular/forms' ;    Para tornar o controle  name  obrigat\u00f3rio, troque a propriedade  name  no  FormGroup  por um array. O primeiro item do array \u00e9 o valor inicial do  FormControl ; o segundo item do array \u00e9 a fun\u00e7\u00e3o de valida\u00e7\u00e3o  Validators.required :  1\n2\n3 this . heroForm   =   this . fb . group ({ \n   name :   [ '' ,   Validators . required   ],  });     Observa\u00e7\u00e3o :  Para implementar a valida\u00e7\u00e3o de formul\u00e1rios na abordagem  reactive , voc\u00ea s\u00f3 precisa definir as fun\u00e7\u00f5es de valida\u00e7\u00f5es (que s\u00e3o simples fun\u00e7\u00f5es JavaScripts); na abordagem  template-driven , voc\u00ea precisa empacotar as fun\u00e7\u00f5es de valida\u00e7\u00f5es em diretivas.   Atualize a mensagem de diagn\u00f3stico ao final do template para exibir tamb\u00e9m o status da valida\u00e7\u00e3o do formul\u00e1rio, como abaixo:  1\n2 < p > Form value: {{ heroForm.value | json }} </ p >  < p > Form status: {{ heroForm.status | json }} </ p >    O navegador deve exibir algo como:   A fun\u00e7\u00e3o  Validators.required  est\u00e1 funcionando como esperado. O status \u00e9  INVALID  porque o  <input>  n\u00e3o possui nenhum valor. Digite algo na caixa de entrada e veja o status mudar para  VALID .",
            "title": "A valida\u00e7\u00e3o Validators.required"
        },
        {
            "location": "/exercicios/exercicio-15/#mais-formcontrols",
            "text": "Um her\u00f3i possui mais que um nome. Um her\u00f3i possui um endere\u00e7o, um super-poder e, \u00e0s vezes, um sidekick.  O usu\u00e1rio ir\u00e1 seleciona o estado (propriedade do endere\u00e7o do her\u00f3i) a partir de uma caixa de sele\u00e7\u00e3o ( <select> ). Para popular os elementos  <option>  com os estados que definimos no modelo de dados, importe os  states  do arquivo  data-model.ts  como abaixo:  1\n2\n3\n4 import   {   Component   }                            from   '@angular/core' ;  import   {   FormBuilder ,   FormGroup ,   Validators   }   from   '@angular/forms' ;  import   {   states   }   from   '../data-model' ;    Defina a propriedade  states  e adicione os  FormControl s relacionados ao endere\u00e7o como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 export   class   HeroDetailComponent   { \n   heroForm :   FormGroup ; \n   states   =   states ; \n\n   constructor ( private   fb :   FormBuilder )   { \n     this . createForm (); \n   } \n\n   createForm ()   { \n     this . heroForm   =   this . fb . group ({ \n       name :   [ '' ,   Validators . required   ], \n       street :   '' , \n       city :   '' , \n       state :   '' , \n       zip :   '' , \n       power :   '' , \n       sidekick :   '' \n     }); \n   }  }    Mofique, ent\u00e3o, o  hero-detail.component.html  para incluir os elementos HTML correspondentes:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45 < h2 > Hero Detail </ h2 >  < h3 >< i > A FormGroup with multiple FormControls </ i ></ h3 >  < form   [ formGroup ]=\" heroForm \"   novalidate > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Name:\n       < input   class = \"form-control\"   formControlName = \"name\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Street:\n       < input   class = \"form-control\"   formControlName = \"street\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > City:\n       < input   class = \"form-control\"   formControlName = \"city\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > State:\n       < select   class = \"form-control\"   formControlName = \"state\" > \n           < option   * ngFor = \"let state of states\"   [ value ]=\" state \" > {{state}} </ option > \n       </ select > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Zip Code:\n       < input   class = \"form-control\"   formControlName = \"zip\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group radio\" > \n     < h4 > Super power: </ h4 > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"flight\" > Flight </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"x-ray vision\" > X-ray vision </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"strength\" > Strength </ label > \n   </ div > \n   < div   class = \"checkbox\" > \n     < label   class = \"center-block\" > \n       < input   type = \"checkbox\"   formControlName = \"sidekick\" > I have a sidekick.\n     </ label > \n   </ div >  </ form >  < p > Form value: {{ heroForm.value | json }} </ p >     Observa\u00e7\u00e3o :  Lembrete: voc\u00ea pode ignorar as men\u00e7\u00f5es \u00e0s classes CSS  form-group ,  form-control ,  center-block , e  checkbox  do Bootstrap. Preste aten\u00e7\u00e3o \u00e0s diretivas  [formGroup]  e  formControlName . Elas s\u00e3o diretivas Angular que ligam os controles HTML \u00e0s propriedades  FormGroup  e  FormControl  do componente.   A nova vers\u00e3o do template inclui novos  <input>  do tipo  text , um  <select>  para o estado, um  <input>  do tipo  radio  para o super-poder e um  <input>  do tipo  checkbox  para o sidekick.   Observa\u00e7\u00e3o :  Voc\u00ea deve fazer o binding  [value]=\"state\"  no elemento  <option> . Se voc\u00ea n\u00e3o fizer esse binding, o  <select>  ir\u00e1 mostrar a primeira op\u00e7\u00e3o da lista de estados do modelo de dados.   O componente define as propriedades de controle sem levar em conta a sua representa\u00e7\u00e3o no template; isto \u00e9, o estado, o super-poder e o sidekick s\u00e3o definidos da mesma forma como voc\u00ea definiu o controle para o nome do her\u00f3i. O binding das propriedades com os elementos HTML tamb\u00e9m \u00e9 feita da mesma forma: com a diretiva  formControlName .",
            "title": "Mais FormControls"
        },
        {
            "location": "/exercicios/exercicio-15/#formgroups-aninhados",
            "text": "O formul\u00e1rio est\u00e1 ficando muito grande. Voc\u00ea pode agrupar os  FormControl s relacionados em um  FormGroup  aninhado. As propriedades  street ,  city ,  state  e  zip  s\u00e3o propriedades que formariam um bom  FormGroup  de endere\u00e7o. Aninhar grupos e controles dessa forma permite que voc\u00ea espelhe a estrutura do modelo de dados e ajuda a manter a valida\u00e7\u00e3o e o estado de um conjunto de controles relacionados.  Voc\u00ea usou o  FormBuilder  para criar um  FormGroup  chamado  heroForm . Use o  FormBuilder  novamente para criar um  FormGroup  filho que encapsula os controles relacionados ao endere\u00e7o; atribua o resultado a uma nova propriedade  address :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 export   class   HeroDetailComponent   { \n   heroForm :   FormGroup ; \n   states   =   states ; \n\n   constructor ( private   fb :   FormBuilder )   { \n     this . createForm (); \n   } \n\n   createForm ()   { \n     this . heroForm   =   this . fb . group ({   // <-- the parent FormGroup \n       name :   [ '' ,   Validators . required   ], \n       address :   this . fb . group ({   // <-- the child FormGroup \n         street :   '' , \n         city :   '' , \n         state :   '' , \n         zip :   '' \n       }), \n       power :   '' , \n       sidekick :   '' \n     }); \n   }  }    Como fizemos altera\u00e7\u00f5es aos controles de formul\u00e1rios na classe do componente, precisamos fazer os ajustes correspondentes no template do componente.  No arquivo  hero-detail.component.html , mova os  FormControl s relacionados ao endere\u00e7o para dentro de uma  <div> . Adicione uma diretiva  formGroupName  \u00e0 nova  <div>  com o valor  address . Essa \u00e9 a propriedade  address  ( FormGroup  \"filho\") do  heroForm  ( FormGroup  \"pai\").  Para tornar essa mudan\u00e7a visualmente \u00f3bvia, inclua um  <h4>  como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 < div   formGroupName = \"address\"   class = \"well well-lg\" > \n   < h4 > Secret Lair </ h4 > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Street:\n       < input   class = \"form-control\"   formControlName = \"street\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > City:\n       < input   class = \"form-control\"   formControlName = \"city\" > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > State:\n       < select   class = \"form-control\"   formControlName = \"state\" > \n         < option   * ngFor = \"let state of states\"   [ value ]=\" state \" > {{state}} </ option > \n       </ select > \n     </ label > \n   </ div > \n   < div   class = \"form-group\" > \n     < label   class = \"center-block\" > Zip Code:\n       < input   class = \"form-control\"   formControlName = \"zip\" > \n     </ label > \n   </ div >  </ div >    Ap\u00f3s essas mudan\u00e7as, o modelo do formul\u00e1rio (impresso no formato JSON ao final da p\u00e1gina) mostra a nova propriedade  address :",
            "title": "FormGroups aninhados"
        },
        {
            "location": "/exercicios/exercicio-15/#inspecionando-as-propriedades-do-formcontrol",
            "text": "Nesse momento, voc\u00ea est\u00e1 mostrando todo o modelo do formul\u00e1rio na p\u00e1gina. \u00c0s vezes voc\u00ea est\u00e1 interessado somente no estado de um  FormControl  em particular.  Voc\u00ea pode inspecionar um  FormControl  individual dentro de um formul\u00e1rio ao extra\u00ed-lo com o m\u00e9todo  .get() . Voc\u00ea pode fazer isso dentro da classe do componente ou diretamente no template, com uma interpola\u00e7\u00e3o como abaixo:  1 < p > Name value: {{ heroForm.get('name').value }} </ p >    Para recuperar o estado de um  FormControl  que est\u00e1 dentro de um  FormGroup , use a nota\u00e7\u00e3o de ponto ( . ) para chegar no controle que voc\u00ea quer inspecionar:  1 < p > Street value: {{ heroForm.get('address.street').value}} </ p >    Voc\u00ea pode usar essa t\u00e9cnica para exibir qualquer uma  propriedades de um  FormControl . Segue abaixo algumas propriedades interessantes:     Propriedade  Descri\u00e7\u00e3o      myControl.value  o valor do  FormControl .    myControl.status  o status de valida\u00e7\u00e3o do  FormControl . Valores poss\u00edveis:  VALID ,  INVALID ,  PENDING , ou  DISABLED .    myControl.pristine  true  se o usu\u00e1rio n\u00e3o fez nenhuma mudan\u00e7a ao elemento UI. \u00c9 oposto \u00e0 propriedade  myControl.dirty .    myControl.untouched  true  se o usu\u00e1rio ainda n\u00e3o \"entrou\" no elemento UI e disparou seu evento  blur . \u00c9 oposto \u00e0 propriedade  myControl.touched .     Visite a refer\u00eancia da API do Angular para aprender mais sobre as outras propriedades do FormControl (e AbstractControl).",
            "title": "Inspecionando as propriedades do FormControl"
        },
        {
            "location": "/exercicios/exercicio-15/#o-modelo-de-dados-e-o-modelo-de-formulario",
            "text": "Nesse momento, o formul\u00e1rio est\u00e1 exibindo valores vazios. O componente  HeroDetailComponent  deveria exibir valores de um her\u00f3i (possivelmente, recuperado a partir de um servidor remoto).  Nessa aplica\u00e7\u00e3o, o  HeroDetailComponent  ir\u00e1 recuperar o her\u00f3i a partir de um componente pai  HeroListComponent .  O her\u00f3i recuperado do componente pai \u00e9 o modelo de dados; a estrutura de  FormControl s \u00e9 o modelo de formul\u00e1rio.  O componente precisa copia o valor do her\u00f3i do modelo de dados para o modelo de formul\u00e1rio. Isso tem duas implica\u00e7\u00f5es:   O desenvolvedor precisa entender como mapear as propriedades do modelo de dados para as propriedades do modelo de formul\u00e1rio.  As mudan\u00e7as fluem dos elementos DOM para o modelo de formul\u00e1rio,  e n\u00e3o para o modelo de dados . O modelo de formul\u00e1rio nunca atualiza o modelo de dados.   As estruturas do modelo de formul\u00e1rio e do modelo de dados n\u00e3o precisam ser id\u00eanticas. Frequentemente, voc\u00ea apresenta somente um subconjunto do modelo de dados na tela. Mas tudo fica mais simples se a estrutura do modelo de formul\u00e1rio for parecida \u00e0 estrutura do modelo de dados.  No  HeroDetailComponent , os dois modelos s\u00e3o bem parecidos.  Relembre a defini\u00e7\u00e3o do  Hero  no arquivo  data-model.ts :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 export   class   Hero   { \n   id   =   0 ; \n   name   =   '' ; \n   addresses :   Address [];  }  export   class   Address   { \n   street   =   '' ; \n   city     =   '' ; \n   state    =   '' ; \n   zip      =   '' ;  }    A defini\u00e7\u00e3o do  FormGroup  \u00e9 como abaixo:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 this . heroForm   =   this . fb . group ({ \n   name :   [ '' ,   Validators . required   ], \n   address :   this . fb . group ({ \n     street :   '' , \n     city :   '' , \n     state :   '' , \n     zip :   '' \n   }), \n   power :   '' , \n   sidekick :   ''  });    Existem duas diferen\u00e7as significativas entre esses dois modelos:   A classe  Hero  tem uma propriedade  id . O modelo de formul\u00e1rio n\u00e3o possui essa propriedade, porque geralmente voc\u00ea n\u00e3o apresenta a chave prim\u00e1rio aos usu\u00e1rios.  A classe  Hero  tem um array de endere\u00e7os. O modelo de formul\u00e1rio apresenta somente um \u00fanico endere\u00e7o (uma escolha que vamos revisitar a seguir).   De qualquer forma, os dois modelos s\u00e3o bem pr\u00f3ximos e voc\u00ea ir\u00e1 ver como esse alinhamento facilita a c\u00f3pia das propriedades do modelo de dados para o modelo de formul\u00e1rio com os m\u00e9todos  patchValue  e  setValue .  Refatore a defini\u00e7\u00e3o do  FormGroup   address  como abaixo (para brevidade e maior clareza):  1\n2\n3\n4\n5\n6 this . heroForm   =   this . fb . group ({ \n   name :   [ '' ,   Validators . required   ], \n   address :   this . fb . group ( new   Address ()),   // <-- a FormGroup with a new address \n   power :   '' , \n   sidekick :   ''  });    Atualize os  import s para referenciar as classes  Hero  e  Address :  1 import   {   Address ,   Hero ,   states   }   from   '../data-model' ;",
            "title": "O modelo de dados e o modelo de formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-15/#popule-o-modelo-de-formulario-com-os-metodos-setvalue-e-patchvalue",
            "text": "Anteriomente, voc\u00ea criou um controle e o inicializou ao mesmo tempo. Voc\u00ea pode inicilizar (ou resetar) os valores de um controle mais tarde com os m\u00e9todos  setValue  e  patchValue .",
            "title": "Popule o modelo de formul\u00e1rio com os m\u00e9todos setValue e patchValue"
        },
        {
            "location": "/exercicios/exercicio-15/#setvalue",
            "text": "Com o m\u00e9todo  setValue , voc\u00ea atribui um valor para cada  FormControl  de uma \u00fanica vez, ao passar um objeto de dados cujas propriedades coincidem com o modelo de formul\u00e1rio por tr\u00e1s do  FormGroup :  1\n2\n3\n4 this . heroForm . setValue ({ \n   name :      this . hero . name , \n   address :   this . hero . addresses [ 0 ]   ||   new   Address ()  });    O m\u00e9todo  setValue  checa todo o objeto de dados antes de atribuir qualquer valor ao modelo de formul\u00e1rio.  O m\u00e9todo n\u00e3o ir\u00e1 aceitar um objeto de dados que n\u00e3o coincide com a estrutura do  FormGroup  ou se faltar um valor para qualquer um dos controles do grupo. O m\u00e9todo  setValue  ir\u00e1 retornar uma mensagem de erro nesse caso.  Note que por pouco n\u00e3o usamos o pr\u00f3prio her\u00f3i como um argumtento para o m\u00e9todo  setValue , porque a sua estrutura \u00e9 quase que similar \u00e0 estrutura do  FormGroup .  No entanto, como s\u00f3 podemos exibir um \u00fanico endere\u00e7o do her\u00f3i (e, como temos que prever a possibilidade de o her\u00f3i n\u00e3o ter nenhum endere\u00e7o), \u00e9 usada a atribui\u00e7\u00e3o condicional na propriedade  address :  1 address :   this . hero . addresses [ 0 ]   ||   new   Address ()",
            "title": "setValue"
        },
        {
            "location": "/exercicios/exercicio-15/#patchvalue",
            "text": "Com o m\u00e9todo  patchValue , voc\u00ea pode atribuir valores para controles espec\u00edficos de um  FormGroup  ao fornecer um objeto com pares chave/valor somente para os controles de interesse.  O exemplo a seguir modifica somente o controle  name  do formul\u00e1rio:  1\n2\n3 this . heroForm . `patchValue` ({ \n   name :   this . hero . name  });    Com  patchValue  voc\u00ea tem uma maior flexibilidade para tratar modelos de dados e formul\u00e1rios divergentes; no entanto, ao contr\u00e1rio do  setValue , o m\u00e9todo  patchValue  n\u00e3o checa a falta de valores para controles e n\u00e3o devolve mensagens de erros.",
            "title": "patchValue"
        },
        {
            "location": "/exercicios/exercicio-15/#quando-setar-o-valor-do-modelo-de-formulario-ngonchanges",
            "text": "Agora voc\u00ea sabe como setar os valores do modelo de formul\u00e1rio. Mas quando voc\u00ea deve set\u00e1-los? A resposta depende de quando o componente recupera os valores do modelo de dados.  O componente  HeroDetailComponent  \u00e9 aninhado a um componente pai  HeroListComponent  (que iremos discutir a seguir). O componente  HeroListComponent  exibe os nomes dos her\u00f3is. Quando o usu\u00e1rio clica em um her\u00f3i da lista, o componente  HeroListComponent  passa o her\u00f3i selecionado para o  HeroDetailComponent  usando um binding de propriedade:  1\n2\n3\n4\n5\n6\n7 < nav > \n   < a   * ngFor = \"let hero of heroes | async\"   ( click )=\" select ( hero )\" > {{hero.name}} </ a >  </ nav >  < div   * ngIf = \"selectedHero\" > \n   < app-hero-detail   [ hero ]=\" selectedHero \" ></ app-hero-detail >  </ div >    Nessa abordagem, o valor do her\u00f3i no  HeroDetailComponent  ir\u00e1 mudar sempre que usu\u00e1rio selecionar um novo her\u00f3i. Voc\u00ea deve chamar o m\u00e9todo  setValue  no m\u00e9todo  ngOnChanges , que \u00e9 chamado pelo Angular sempre que uma propriedade de input do componente \u00e9 alterada.   Para fazer isso, importe os s\u00edmbolos  OnChanges  e  Input  no arquivo  hero-detail.component.ts .  1 import   {   Component ,   Input ,   OnChanges   }               from   '@angular/core' ;    Adicione a propriedade de input  hero :  1 @ Input ()   hero :   Hero ;    Adicione o m\u00e9todo  ngOnChanges :  1\n2\n3\n4\n5\n6 ngOnChanges ()   { \n   this . heroForm . setValue ({ \n     name :      this . hero . name , \n     address :   this . hero . addresses [ 0 ]   ||   new   Address () \n   });  }",
            "title": "Quando setar o valor do modelo de formul\u00e1rio (ngOnChanges)"
        },
        {
            "location": "/exercicios/exercicio-15/#resetando-o-formulario",
            "text": "Voc\u00ea deve resetar o formul\u00e1rio quando a propriedade de input  hero  mudar. Dessa forma, os valores e o status de valida\u00e7\u00e3o dos controles associados ao her\u00f3i anterior ser\u00e3o restaurados ao estado  pristine .  Voc\u00ea poderia chamar o m\u00e9todo  reset  no topo do m\u00e9todo  ngOnChanges  como a seguir:  1 this . heroForm . reset ();    No entanto, o m\u00e9todo  reset  recebe um par\u00e2metro opcional de forma que voc\u00ea pode restaurar o formul\u00e1rio e inicializar os valores dos controles ao mesmo tempo. Internamente, o m\u00e9todo  reset  passa o argumento para o m\u00e9todo  setValue . O m\u00e9todo  ngOnChanges  ficaria, ent\u00e3o, como abaixo:  1\n2\n3\n4\n5\n6 ngOnChanges ()   { \n   this . heroForm . reset ({ \n     name :   this . hero . name , \n     address :   this . hero . addresses [ 0 ]   ||   new   Address () \n   });  }",
            "title": "Resetando o formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-15/#crie-o-componente-herolistcomponent-e-o-servico-heroservice",
            "text": "O componente  HeroDetailComponent  \u00e9 um componente filho do  HeroListComponent  em uma vis\u00e3o do tipo mestre/detalhe. Juntos, eles forma a seguinte vis\u00e3o:   O componente  HeroListComponent  usa o servi\u00e7o  HeroService  para recuperar os her\u00f3is a partir de um servidor e, ent\u00e3o, apresenta esses her\u00f3is para o usu\u00e1rio em uma s\u00e9rie de bot\u00f5es.  O  HeroService  emula um servi\u00e7o HTTP. Ele retorna um  Observable  de her\u00f3is que s\u00e3o resolvidos ap\u00f3s um pequeno delay, para simular a lat\u00eancia de rede e indicar visualmente a natureza ass\u00edncrona da aplica\u00e7\u00e3o.  Quando o usu\u00e1rio clica em um her\u00f3i, o componente seta a propriedade  selectedHero , que faz um binding com a propriedade de input  hero  do componente  HeroDetailComponent . O componente  HeroDetailComponent  detecta a mudan\u00e7a na propriedade  hero  e reseta o formul\u00e1rio com os dados do her\u00f3i selecionado.  Um bot\u00e3o \"Refresh\" limpa a lista de her\u00f3is e o her\u00f3i selecionado antes de recuperar a lista novamente.  Os detalhes de implementa\u00e7\u00e3o do  HeroListComponent  e  HeroService  n\u00e3o s\u00e3o relevantes para esse exerc\u00edcio (e reusam conceitos que j\u00e1 foram abordados em exerc\u00edcios anteriores). Por isso, n\u00e3o vamos abordar em detalhes essa implementa\u00e7\u00e3o.  Para dar continuidade ao exerc\u00edcio, crie o componente  HeroListComponent  e o servi\u00e7o  HeroService  como a seguir:   hero-list.component.ts :    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 import   {   Component ,   OnInit   }   from   '@angular/core' ;  import   {   Observable ,   pipe   }          from   'rxjs' ;  import   {   finalize   }   from   'rxjs/operators' ;  import   {   Hero   }          from   '../data-model' ;  import   {   HeroService   }   from   '../hero.service' ;  @ Component ({ \n   selector :   'app-hero-list' , \n   templateUrl :   './hero-list.component.html'  })  export   class   HeroListComponent   implements   OnInit   { \n   heroes :   Observable < Hero [] > ; \n   isLoading   =   false ; \n   selectedHero :   Hero ; \n\n   constructor ( private   heroService :   HeroService )   {   } \n\n   ngOnInit ()   {   this . getHeroes ();   } \n\n   getHeroes ()   { \n     this . isLoading   =   true ; \n     this . heroes   =   this . heroService . getHeroes () \n       . pipe ( \n             // Todo: error handling \n             finalize (()   =>   this . isLoading   =   false ) \n       ); \n     this . selectedHero   =   undefined ; \n   } \n\n   select ( hero :   Hero )   {   this . selectedHero   =   hero ;   }  }     hero-list.component.html :    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 < h3   * ngIf = \"isLoading\" >< i > Loading heroes ...  </ i ></ h3 >  < h3   * ngIf = \"!isLoading\" > Select a hero: </ h3 >  < nav > \n   < button   ( click )=\" getHeroes ()\"   class = \"btn btn-primary\" > Refresh </ button > \n   < a   * ngFor = \"let hero of heroes | async\"   ( click )=\" select ( hero )\" > {{hero.name}}  </ a >  </ nav >  < div   * ngIf = \"selectedHero\" > \n   < hr > \n   < h2 > Hero Detail </ h2 > \n   < h3 > Editing: {{selectedHero.name}} </ h3 > \n   < app-hero-detail   [ hero ]=\" selectedHero \" ></ app-hero-detail >  </ div >     hero.service.ts :    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30 import   {   Injectable   }   from   '@angular/core' ;  import   {   Observable ,   of   }   from   'rxjs' ;  import   {   delay   }   from   'rxjs/operators' ;  import   {   Hero ,   heroes   }   from   './data-model' ;  @ Injectable ()  export   class   HeroService   { \n\n   delayMs   =   500 ; \n\n   // Fake server get; assume nothing can go wrong \n   getHeroes () :   Observable < Hero [] >   { \n     return   of ( heroes ) \n       . pipe ( \n         delay ( this . delayMs )   // simulate latency with delay \n       ); \n   } \n\n   // Fake server update; assume nothing can go wrong \n   updateHero ( hero :   Hero ) :   Observable < Hero >    { \n     const   oldHero   =   heroes . find ( h   =>   h . id   ===   hero . id ); \n     const   newHero   =   Object . assign ( oldHero ,   hero );   // Demo: mutate cached hero \n     return   of ( newHero ) \n       . pipe ( \n         delay ( this . delayMs )   // simulate latency with delay \n       ); \n   }  }    N\u00e3o se esque\u00e7a de incluir o componente  HeroListComponent  ao array  declarations  e o  HeroService  ao array  providers  do m\u00f3dulo  AppModule .",
            "title": "Crie o componente HeroListComponent e o servi\u00e7o HeroService"
        },
        {
            "location": "/exercicios/exercicio-15/#usando-o-formarray-para-apresentar-um-array-de-formgroups",
            "text": "At\u00e9 agora, voc\u00ea trabalhou com  FormControl s e  FormGroup s. Um  FormGroup  \u00e9 um objeto cujas propriedades s\u00e3o  FormControl s ou outros  FormGroup s.  Algumas vezes, voc\u00ea precisa apresentar um n\u00famero arbitr\u00e1rio de controles ou grupos. Por exemplo, um her\u00f3i pode ter nenhum, um ou um n\u00famero qualquer de endere\u00e7os.  A propriedade  Hero.addresses  \u00e9 um array de inst\u00e2ncias do tipo  Address . Um  FormGroup  pode exibir somente um endere\u00e7o. No entanto, um  FormArray  pode exibir um array de  FormGroup s.  Para usar a classe  FormArray , importe-a no arquivo  hero-detail.component.ts :  1\n2\n3\n4 import   {   Component ,   Input ,   OnChanges   }                     from   '@angular/core' ;  import   {   FormArray ,   FormBuilder ,   FormGroup ,   Validators   }   from   '@angular/forms' ;  import   {   Address ,   Hero ,   states   }   from   '../data-model' ;    Para trabalhar com um  FormArray , voc\u00ea faz o seguinte:   Defina os itens ( FormControl s ou  FormGroup s) no array.  Inicialize o array com os itens criados a partir do modelo de dados.  Adicione e remova itens conforme a necesssidade.   Nesse exerc\u00edcio, voc\u00ea define um  FormArray para o  Hero.addresses  e permite ao usu\u00e1rio adicionar ou modificar endere\u00e7os.  Para isso, voc\u00ea precisa redefinir o modelo do formul\u00e1rio no componente  HeroDetailComponent , que atualmente somente exibe o primeiro endere\u00e7o do her\u00f3i em um  FormGroup :  1\n2\n3\n4\n5\n6 this . heroForm   =   this . fb . group ({ \n   name :   [ '' ,   Validators . required   ], \n   address :   this . fb . group ( new   Address ()),   // <-- a FormGroup with a new address \n   power :   '' , \n   sidekick :   ''  });",
            "title": "Usando o FormArray para apresentar um array de FormGroups"
        },
        {
            "location": "/exercicios/exercicio-15/#covis-secretos",
            "text": "Pela perspectiva do usu\u00e1rio, os her\u00f3is n\u00e3o possuem endere\u00e7os. Endere\u00e7os s\u00e3o para meros mortais. Her\u00f3is possuem covis secretos!  Modifique a defini\u00e7\u00e3o do  FormGroup  com uma propriedade  secretLairs  do tipo  FormArray :  1\n2\n3\n4\n5\n6\n7\n8 createForm ()   { \n   this . heroForm   =   this . fb . group ({ \n     name :   [ '' ,   Validators . required   ], \n     secretLairs :   this . fb . array ([]),   // <-- secretLairs as an empty FormArray \n     power :   '' , \n     sidekick :   '' \n   });  }    Alterar o nome da propriedade no modelo de formul\u00e1rio traz \u00e0 tona uma importante observa\u00e7\u00e3o: o modelo de formul\u00e1rio n\u00e3o precisa ser exatamente igual ao modelo de dados. As necessidades de apresenta\u00e7\u00e3o normalmente s\u00e3o diferentes das necessidades do modelo de dados. A abordagem  reactive  enfatiza e facilita essa distin\u00e7\u00e3o.",
            "title": "Covis secretos"
        },
        {
            "location": "/exercicios/exercicio-15/#inicializar-o-secretlairs",
            "text": "Para popular (e repopular) o  FormArray   secretLairs  a partir dos endere\u00e7os de um her\u00f3i, crie o m\u00e9todo  setAddresses  como a seguir.  O m\u00e9todo  setAddresses  substitui a inst\u00e2ncia do  secretLairs  por uma nova inst\u00e2ncia de um  FormArray , inicializada a partir de um array de  FormGroup s de endere\u00e7os do her\u00f3i.  1\n2\n3\n4\n5 setAddresses ( addresses :   Address [])   { \n   const   addressFormGroups   =   addresses . map ( address   =>   this . fb . group ( address )); \n   const   addressFormArray   =   this . fb . array ( addressFormGroups ); \n   this . heroForm . setControl ( 'secretLairs' ,   addressFormArray );  }    Modifique ent\u00e3o o m\u00e9todo  ngOnChanges  para adicionar a chamada ao novo m\u00e9todo  setAddresses  e para remover a defini\u00e7\u00e3o da propriedade  address :  1\n2\n3\n4\n5\n6 ngOnChanges ()   { \n   this . heroForm . reset ({ \n     name :   this . hero . name , \n   }); \n   this . setAddresses ( this . hero . addresses );  }    Note que o  FormArray  \u00e9 substitu\u00eddo com o m\u00e9todo  FormGroup.setControl , e n\u00e3o com o  setValue . N\u00f3s estamos mudando um controle, e n\u00e3o o valor de um controle.  Note tamb\u00e9m que o  secretLairs  cont\u00e9m  FormGroup s (modelo de formul\u00e1rio) e n\u00e3o inst\u00e2ncias de  Address  (modelo de dados).",
            "title": "Inicializar o secretLairs"
        },
        {
            "location": "/exercicios/exercicio-15/#recupere-o-formarray",
            "text": "O componente  HeroDetailComponent  deve ser capaz de exibir, adicionar e remover itens do  secretLairs .  Use o m\u00e9todo  FormGroup.get  para recuperar uma refer\u00eancia para o  FormArray . Empacote essa express\u00e3o em um m\u00e9todo getter  secretLairs  para reuso e clareza:  1\n2\n3 get   secretLairs () :   FormArray   { \n   return   this . heroForm . get ( 'secretLairs' )   as   FormArray ;  };",
            "title": "Recupere o FormArray"
        },
        {
            "location": "/exercicios/exercicio-15/#exiba-o-formarray",
            "text": "O template HTML atual exibe somente um \u00fanico endere\u00e7o. Vamos refator\u00e1-lo para exibir todos os endere\u00e7os de um her\u00f3i.  Para fazer isso, basicamente vamos criar um novo  <div>  sobre o  <div>  que empacota o endere\u00e7o (que criamos anteriormente), e fazer uma itera\u00e7\u00e3o no novo  <div>  com a diretiva  *ngFor  para cada endere\u00e7o do her\u00f3i.  O truque \u00e9 saber como escrever o  *ngFor . S\u00e3o tr\u00eas pontos chaves:   Adicione outro  <div>  sobre o  <div>  com o  *ngFor , e use a diretiva  formArrayName  com o valor  secretLairs . Esse passo estabelece o  FormArray   secretLairs  como o contexto para os controles no template interno do  *ngFor .  A fonte de itens para a itera\u00e7\u00e3o \u00e9 o  FormArray.controls  e n\u00e3o o  FormArray  por si pr\u00f3prio. Cada controle \u00e9 um  FormGroup  de endere\u00e7o, exatamente como na vers\u00e3o anterior do template.  Cada  FormGroup  da itera\u00e7\u00e3o precisa de um  formGroupName  \u00fanico, que precisa ser o \u00edndice do  FormGroup  no  FormArray . Voc\u00ea ir\u00e1 reusar o \u00edndice para compor um label para cada endere\u00e7o.   Esse \u00e9 o esqueleto da se\u00e7\u00e3o de covis secretos no template HTML:  1\n2\n3\n4\n5 < div   formArrayName = \"secretLairs\"   class = \"well well-lg\" > \n   < div   * ngFor = \"let address of secretLairs.controls; let i=index\"   [ formGroupName ]=\" i \"   > \n     <!-- The repeated address template --> \n   </ div >  </ div >    E esse \u00e9 o template completo para a se\u00e7\u00e3o de covis secretos:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32 < div   formArrayName = \"secretLairs\"   class = \"well well-lg\" > \n   < div   * ngFor = \"let address of secretLairs.controls; let i=index\"   [ formGroupName ]=\" i \"   > \n     <!-- The repeated address template --> \n     < h4 > Address #{{i + 1}} </ h4 > \n     < div   style = \"margin-left: 1em;\" > \n       < div   class = \"form-group\" > \n         < label   class = \"center-block\" > Street:\n           < input   class = \"form-control\"   formControlName = \"street\" > \n         </ label > \n       </ div > \n       < div   class = \"form-group\" > \n         < label   class = \"center-block\" > City:\n           < input   class = \"form-control\"   formControlName = \"city\" > \n         </ label > \n       </ div > \n       < div   class = \"form-group\" > \n         < label   class = \"center-block\" > State:\n           < select   class = \"form-control\"   formControlName = \"state\" > \n             < option   * ngFor = \"let state of states\"   [ value ]=\" state \" > {{state}} </ option > \n           </ select > \n         </ label > \n       </ div > \n       < div   class = \"form-group\" > \n         < label   class = \"center-block\" > Zip Code:\n           < input   class = \"form-control\"   formControlName = \"zip\" > \n         </ label > \n       </ div > \n     </ div > \n     < br > \n     <!-- End of the repeated address template --> \n   </ div >  </ div >",
            "title": "Exiba o FormArray"
        },
        {
            "location": "/exercicios/exercicio-15/#adicionando-um-novo-covil-secreto",
            "text": "Crie o m\u00e9todo  addLair  que adiciona um novo  FormGroup  de endere\u00e7o ao  FormArray   secretLairs :  1\n2\n3 addLair ()   { \n   this . secretLairs . push ( this . fb . group ( new   Address ()));  }    Inclua um novo bot\u00e3o ao formul\u00e1rio para que usu\u00e1rio possa adicionar um novo covil secreto. Fa\u00e7a o binding ao novo m\u00e9todo  addLair :  1 < button   ( click )=\" addLair ()\"   type = \"button\" > Add a Secret Lair </ button >    De volta ao navegador, selecione o her\u00f3i \"Magneta\". O her\u00f3i \"Magneta\" n\u00e3o possui um endere\u00e7o, como voc\u00ea pode ver na mensagem de diagn\u00f3stico ao final do formul\u00e1rio.   Clique no bot\u00e3o \"Add a Secret Lair\". Uma nova se\u00e7\u00e3o de endere\u00e7o aparece. Muito bem!",
            "title": "Adicionando um novo covil secreto"
        },
        {
            "location": "/exercicios/exercicio-15/#removendo-um-covil-secreto",
            "text": "Esse exemplo mostra como adicionar endere\u00e7os, mas n\u00e3o mostra como remov\u00ea-los. Como tarefa de casa, escreva um m\u00e9todo  removeLair  e adicione um bot\u00e3o para apagar um endere\u00e7o.",
            "title": "Removendo um covil secreto"
        },
        {
            "location": "/exercicios/exercicio-15/#salvando-dados-do-formulario",
            "text": "O componente  HeroDetailComponent  captura as mudan\u00e7as do usu\u00e1rio, mas n\u00e3o faz nada com essas mudan\u00e7as.  Em aplica\u00e7\u00f5es reais, voc\u00ea provavelmente ir\u00e1 salvar essas mudan\u00e7as e voc\u00ea tamb\u00e9m gostaria de reverter mudan\u00e7as que n\u00e3o foram salvas.  Ap\u00f3s implementar essas funcionalidades, o formul\u00e1rio ir\u00e1 parecer como abaixo:",
            "title": "Salvando dados do formul\u00e1rio"
        },
        {
            "location": "/exercicios/exercicio-15/#salvar",
            "text": "Nesse exerc\u00edcio, quando o usu\u00e1rio submeter o formul\u00e1rio, o componente  HeroDetailComponent  ir\u00e1 passar uma inst\u00e2ncia de um her\u00f3i para o m\u00e9todo  updateHero  do  HeroService .  1\n2\n3\n4\n5 onSubmit ()   { \n   this . hero   =   this . prepareSaveHero (); \n   this . heroService . updateHero ( this . hero ). subscribe ( /* error handling */ ); \n   this . ngOnChanges ();  }    Crie o m\u00e9todo  prepareSaveHero  que ir\u00e1 criar um novo her\u00f3i a partir da combina\u00e7\u00e3o dos valores originais do her\u00f3i ( this.hero ) e de valores do modelo do formul\u00e1rio ( this.heroForm.value ):   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 prepareSaveHero () :   Hero   { \n   const   formModel   =   this . heroForm . value ; \n\n   // deep copy of form model lairs \n   const   secretLairsDeepCopy :   Address []   =   formModel . secretLairs . map ( \n     ( address :   Address )   =>   Object . assign ({},   address ) \n   ); \n\n   // return new `Hero` object containing a combination of original hero value(s) \n   // and deep copies of changed form model values \n   const   saveHero :   Hero   =   { \n     id :   this . hero . id , \n     name :   formModel . name   as   string , \n     // addresses: formModel.secretLairs // <-- bad! \n     addresses :   secretLairsDeepCopy \n   }; \n   return   saveHero ;  }",
            "title": "Salvar"
        },
        {
            "location": "/exercicios/exercicio-15/#revertando-mudancas-nao-salvas",
            "text": "O usu\u00e1rio cancela mudan\u00e7as e reverte o formul\u00e1rio para o estado original ao clicar no bot\u00e3o \"Revert\".  Reverter ao estado original \u00e9 f\u00e1cil. Simplesmente re-execute o m\u00e9todo  ngOnChanges  que constr\u00f3i o modelo do formul\u00e1rio a partir do her\u00f3i selecionado (modelo de dados).  1 revert ()   {   this . ngOnChanges ();   }",
            "title": "Revertando mudan\u00e7as n\u00e3o salvas"
        },
        {
            "location": "/exercicios/exercicio-15/#botoes",
            "text": "Adicione os bot\u00f5es \"Save\" e \"Revert\" no topo do template do componente:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 < form   [ formGroup ]=\" heroForm \"   ( ngSubmit )=\" onSubmit ()\"   novalidate > \n   < div   style = \"margin-bottom: 1em\" > \n     < button   type = \"submit\" \n             [ disabled ]=\" heroForm . pristine \"   class = \"btn btn-success\" > Save </ button >   &nbsp; \n     < button   type = \"reset\"   ( click )=\" revert ()\" \n             [ disabled ]=\" heroForm . pristine \"   class = \"btn btn-danger\" > Revert </ button > \n   </ div > \n\n   <!-- Hero Detail Controls --> \n   < div   class = \"form-group radio\" > \n     < h4 > Super power: </ h4 > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"flight\" > Flight </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"x-ray vision\" > X-ray vision </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"strength\" > Strength </ label > \n   </ div > \n   < div   class = \"checkbox\" > \n     < label   class = \"center-block\" > \n       < input   type = \"checkbox\"   formControlName = \"sidekick\" > I have a sidekick.\n     </ label > \n   </ div >  </ form >    Os bot\u00f5es s\u00e3o desabilitados enquanto o usu\u00e1rio n\u00e3o \"sujar\" o formul\u00e1rio (isto \u00e9, enquanto na\u00f5 mudar o valor em qualquer um dos  FormControl ).  Clicar em um bot\u00e3o de tipo \"submit\" ir\u00e1 levantar o evento  ngSubmit , que chama o m\u00e9todo  onSubmit  do compoennte. Clicar no bot\u00e3o \"Revert\" ir\u00e1 chamar o m\u00e9todo  revert . Agora, os usu\u00e1rios podem salvar ou reverter as mudan\u00e7as.  Esse \u00e9 o final do exerc\u00edcio.  O arquivo  hero-detail.component.ts  deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82 import   {   Component ,   Input ,   OnChanges   }         from   '@angular/core' ;  import   {   FormArray ,   FormBuilder ,   FormGroup   }   from   '@angular/forms' ;  import   {   Address ,   Hero ,   states   }   from   '../data-model' ;  import   {   HeroService   }             from   '../hero.service' ;  @ Component ({ \n   selector :   'app-hero-detail' , \n   templateUrl :   './hero-detail.component.html' , \n   styleUrls :   [ './hero-detail.component.css' ]  })  export   class   HeroDetailComponent   implements   OnChanges   { \n   @ Input ()   hero :   Hero ; \n\n   heroForm :   FormGroup ; \n   states   =   states ; \n\n   constructor ( \n     private   fb :   FormBuilder , \n     private   heroService :   HeroService )   { \n\n     this . createForm (); \n   } \n\n   createForm ()   { \n     this . heroForm   =   this . fb . group ({ \n       name :   '' , \n       secretLairs :   this . fb . array ([]), \n       power :   '' , \n       sidekick :   '' \n     }); \n   } \n\n   ngOnChanges ()   { \n     this . heroForm . reset ({ \n       name :   this . hero . name \n     }); \n     this . setAddresses ( this . hero . addresses ); \n   } \n\n   get   secretLairs () :   FormArray   { \n     return   this . heroForm . get ( 'secretLairs' )   as   FormArray ; \n   }; \n\n   setAddresses ( addresses :   Address [])   { \n     const   addressFGs   =   addresses . map ( address   =>   this . fb . group ( address )); \n     const   addressFormArray   =   this . fb . array ( addressFGs ); \n     this . heroForm . setControl ( 'secretLairs' ,   addressFormArray ); \n   } \n\n   addLair ()   { \n     this . secretLairs . push ( this . fb . group ( new   Address ())); \n   } \n\n   onSubmit ()   { \n     this . hero   =   this . prepareSaveHero (); \n     this . heroService . updateHero ( this . hero ). subscribe ( /* error handling */ ); \n     this . ngOnChanges (); \n   } \n\n   prepareSaveHero () :   Hero   { \n     const   formModel   =   this . heroForm . value ; \n\n     // deep copy of form model lairs \n     const   secretLairsDeepCopy :   Address []   =   formModel . secretLairs . map ( \n       ( address :   Address )   =>   Object . assign ({},   address ) \n     ); \n\n     // return new `Hero` object containing a combination of original hero value(s) \n     // and deep copies of changed form model values \n     const   saveHero :   Hero   =   { \n       id :   this . hero . id , \n       name :   formModel . name   as   string , \n       // addresses: formModel.secretLairs // <-- bad! \n       addresses :   secretLairsDeepCopy \n     }; \n     return   saveHero ; \n   } \n\n   revert ()   {   this . ngOnChanges ();   }  }    O arquivo  hero-detail.component.html  deve ser algo como:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62 < form   [ formGroup ]=\" heroForm \"   ( ngSubmit )=\" onSubmit ()\"   novalidate > \n   < div   style = \"margin-bottom: 1em\" > \n     < button   type = \"submit\" \n             [ disabled ]=\" heroForm . pristine \"   class = \"btn btn-success\" > Save </ button >   &nbsp; \n     < button   type = \"reset\"   ( click )=\" revert ()\" \n             [ disabled ]=\" heroForm . pristine \"   class = \"btn btn-danger\" > Revert </ button > \n   </ div > \n\n   <!-- Hero Detail Controls --> \n   < div   class = \"form-group\" > \n       < label   class = \"center-block\" > Name:\n         < input   class = \"form-control\"   formControlName = \"name\" > \n       </ label > \n   </ div > \n\n   < div   formArrayName = \"secretLairs\"   class = \"well well-lg\" > \n     < div   * ngFor = \"let address of secretLairs.controls; let i=index\"   [ formGroupName ]=\" i \"   > \n       <!-- The repeated address template --> \n       < h4 > Address #{{i + 1}} </ h4 > \n       < div   style = \"margin-left: 1em;\" > \n         < div   class = \"form-group\" > \n           < label   class = \"center-block\" > Street:\n             < input   class = \"form-control\"   formControlName = \"street\" > \n           </ label > \n         </ div > \n         < div   class = \"form-group\" > \n           < label   class = \"center-block\" > City:\n             < input   class = \"form-control\"   formControlName = \"city\" > \n           </ label > \n         </ div > \n         < div   class = \"form-group\" > \n           < label   class = \"center-block\" > State:\n             < select   class = \"form-control\"   formControlName = \"state\" > \n               < option   * ngFor = \"let state of states\"   [ value ]=\" state \" > {{state}} </ option > \n             </ select > \n           </ label > \n         </ div > \n         < div   class = \"form-group\" > \n           < label   class = \"center-block\" > Zip Code:\n             < input   class = \"form-control\"   formControlName = \"zip\" > \n           </ label > \n         </ div > \n       </ div > \n       < br > \n       <!-- End of the repeated address template --> \n     </ div > \n     < button   ( click )=\" addLair ()\"   type = \"button\" > Add a Secret Lair </ button > \n   </ div > \n   < div   class = \"form-group radio\" > \n     < h4 > Super power: </ h4 > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"flight\" > Flight </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"x-ray vision\" > X-ray vision </ label > \n     < label   class = \"center-block\" >< input   type = \"radio\"   formControlName = \"power\"   value = \"strength\" > Strength </ label > \n   </ div > \n   < div   class = \"checkbox\" > \n     < label   class = \"center-block\" > \n       < input   type = \"checkbox\"   formControlName = \"sidekick\" > I have a sidekick.\n     </ label > \n   </ div >  </ form >  < p > heroForm value: {{ heroForm.value | json}} </ p >",
            "title": "Bot\u00f5es"
        },
        {
            "location": "/exercicios/exercicio-15/#revisando-a-estrutura-da-aplicacao",
            "text": "Nesse momento, a sua aplica\u00e7\u00e3o deve ter a seguinte estrutura:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26 exercicio-angular-reactive-forms/\n|\n|-- node_modules/\n|-- src/\n|  |-- app/\n|  |  |-- hero-detail/\n|  |  |   |-- hero-detail.component.css\n|  |  |   |-- hero-detail.component.html\n|  |  |   |-- hero-detail.component.ts\n|  |  |-- hero-list/\n|  |  |   |-- hero-list.component.css\n|  |  |   |-- hero-list.component.html\n|  |  |   |-- hero-list.component.ts\n|  |  |-- app.component.css\n|  |  |-- app.component.html\n|  |  |-- app.component.ts\n|  |  |-- app.module.ts\n|  |  |-- data-model.ts\n|  |  |-- hero.service.ts\n|  |-- index.html\n|  |-- main.ts\n|  |-- styles.css\n|  |-- ...\n|-- .angular-cli.json\n|-- package.json\n|-- ...",
            "title": "Revisando a estrutura da aplica\u00e7\u00e3o"
        },
        {
            "location": "/exercicios/exercicio-15/#resumo",
            "text": "Nesse exerc\u00edcio, aprendemos a:   Criar um template na abordagem  reactive .  Como usar o  FormBuilder  para simplificar a constru\u00e7\u00e3o do formul\u00e1rio.  Agrupar  FormControl s em um  FormGroup .  Inspecionar as propriedades de um  FormControl .  Setar dados com os m\u00e9todos  patchValue  e  setValue .  Adicionar grupos dinamicamente com um  FormArray .  Salvar mudan\u00e7as a um formul\u00e1rio.",
            "title": "Resumo"
        }
    ]
}